/* JSModeler 0.9 - http://www.github.com/kovacsv/JSModeler */ var JSM={mainVersion:0,subVersion:9};JSM.Eps=1e-8;JSM.Inf=9999999999;JSM.RadDeg=57.29577951308232;JSM.DegRad=0.017453292519943;JSM.IsZero=function(a){return Math.abs(a)<JSM.Eps;};JSM.IsPositive=function(a){return a>JSM.Eps;};JSM.IsNegative=function(a){return a<-JSM.Eps;};JSM.IsLower=function(a,b){return b-a>JSM.Eps;};JSM.IsGreater=function(a,b){return a-b>JSM.Eps;};JSM.IsEqual=function(a,b){return Math.abs(b-a)<JSM.Eps;};JSM.IsLowerOrEqual=function(a,b){return JSM.IsLower(a,b)||JSM.IsEqual(a,b);};JSM.IsGreaterOrEqual=function(a,b){return JSM.IsGreater(a,b)||JSM.IsEqual(a,b);};JSM.Minimum=function(a,b){return JSM.IsLower(a,b)?a:b;};JSM.Maximum=function(a,b){return JSM.IsGreater(a,b)?a:b;};JSM.ArcSin=function(value){if(JSM.IsGreaterOrEqual(value,1)){return Math.PI/2;}else{if(JSM.IsLowerOrEqual(value,-1)){return -Math.PI/2;}}return Math.asin(value);};JSM.ArcCos=function(value){if(JSM.IsGreaterOrEqual(value,1)){return 0;}else{if(JSM.IsLowerOrEqual(value,-1)){return Math.PI;}}return Math.acos(value);};JSM.RandomInt=function(from,to){return Math.floor((Math.random()*(to-from+1))+from);};JSM.ValueOrDefault=function(val,def){if(val===undefined||val===null){return def;}return val;};JSM.MatrixDeterminant2x2=function(m00,m01,m10,m11){return m00*m11-m01*m10;};JSM.MatrixDeterminant3x3=function(m00,m01,m02,m10,m11,m12,m20,m21,m22){var subDet1=JSM.MatrixDeterminant2x2(m11,m12,m21,m22);var subDet2=JSM.MatrixDeterminant2x2(m10,m12,m20,m22);var subDet3=JSM.MatrixDeterminant2x2(m10,m11,m20,m21);return m00*subDet1-m01*subDet2+m02*subDet3;};JSM.MatrixDeterminant4x4=function(m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33){var subDet1=JSM.MatrixDeterminant3x3(m11,m12,m13,m21,m22,m23,m31,m32,m33);var subDet2=JSM.MatrixDeterminant3x3(m10,m12,m13,m20,m22,m23,m30,m32,m33);var subDet3=JSM.MatrixDeterminant3x3(m10,m11,m13,m20,m21,m23,m30,m31,m33);var subDet4=JSM.MatrixDeterminant3x3(m10,m11,m12,m20,m21,m22,m30,m31,m32);return subDet1*m00-subDet2*m01+subDet3*m02-subDet4*m03;};JSM.VectorMatrixMultiply4x4=function(vector,matrix){var result=[];var a00=vector[0];var a01=vector[1];var a02=vector[2];var a03=vector[3];var b00=matrix[0];var b01=matrix[1];var b02=matrix[2];var b03=matrix[3];var b10=matrix[4];var b11=matrix[5];var b12=matrix[6];var b13=matrix[7];var b20=matrix[8];var b21=matrix[9];var b22=matrix[10];var b23=matrix[11];var b30=matrix[12];var b31=matrix[13];var b32=matrix[14];var b33=matrix[15];result[0]=a00*b00+a01*b10+a02*b20+a03*b30;result[1]=a00*b01+a01*b11+a02*b21+a03*b31;result[2]=a00*b02+a01*b12+a02*b22+a03*b32;result[3]=a00*b03+a01*b13+a02*b23+a03*b33;return result;};JSM.MatrixMultiply4x4=function(matrix1,matrix2){var result=[];var a00=matrix1[0];var a01=matrix1[1];var a02=matrix1[2];var a03=matrix1[3];var a10=matrix1[4];var a11=matrix1[5];var a12=matrix1[6];var a13=matrix1[7];var a20=matrix1[8];var a21=matrix1[9];var a22=matrix1[10];var a23=matrix1[11];var a30=matrix1[12];var a31=matrix1[13];var a32=matrix1[14];var a33=matrix1[15];var b00=matrix2[0];var b01=matrix2[1];var b02=matrix2[2];var b03=matrix2[3];var b10=matrix2[4];var b11=matrix2[5];var b12=matrix2[6];var b13=matrix2[7];var b20=matrix2[8];var b21=matrix2[9];var b22=matrix2[10];var b23=matrix2[11];var b30=matrix2[12];var b31=matrix2[13];var b32=matrix2[14];var b33=matrix2[15];result[0]=a00*b00+a01*b10+a02*b20+a03*b30;result[1]=a00*b01+a01*b11+a02*b21+a03*b31;result[2]=a00*b02+a01*b12+a02*b22+a03*b32;result[3]=a00*b03+a01*b13+a02*b23+a03*b33;result[4]=a10*b00+a11*b10+a12*b20+a13*b30;result[5]=a10*b01+a11*b11+a12*b21+a13*b31;result[6]=a10*b02+a11*b12+a12*b22+a13*b32;result[7]=a10*b03+a11*b13+a12*b23+a13*b33;result[8]=a20*b00+a21*b10+a22*b20+a23*b30;result[9]=a20*b01+a21*b11+a22*b21+a23*b31;result[10]=a20*b02+a21*b12+a22*b22+a23*b32;result[11]=a20*b03+a21*b13+a22*b23+a23*b33;result[12]=a30*b00+a31*b10+a32*b20+a33*b30;result[13]=a30*b01+a31*b11+a32*b21+a33*b31;result[14]=a30*b02+a31*b12+a32*b22+a33*b32;result[15]=a30*b03+a31*b13+a32*b23+a33*b33;return result;};JSM.Coord2D=function(x,y){this.x=JSM.ValueOrDefault(x,0);this.y=JSM.ValueOrDefault(y,0);};JSM.Coord2D.prototype={Set:function(x,y){this.x=JSM.ValueOrDefault(x,0);this.y=JSM.ValueOrDefault(y,0);},ToString:function(){return("("+this.x+", "+this.y+")");},Clone:function(){return new JSM.Coord2D(this.x,this.y);}};JSM.PolarCoord=function(radius,angle){this.radius=JSM.ValueOrDefault(radius,1);this.angle=JSM.ValueOrDefault(angle,0);};JSM.PolarCoord.prototype={Set:function(radius,angle){this.radius=JSM.ValueOrDefault(radius,1);this.angle=JSM.ValueOrDefault(angle,0);},ToString:function(){return("("+this.radius+", "+this.angle+")");},Clone:function(){return new JSM.PolarCoord(this.radius,this.angle);}};JSM.Coord=function(x,y,z){this.x=JSM.ValueOrDefault(x,0);this.y=JSM.ValueOrDefault(y,0);this.z=JSM.ValueOrDefault(z,0);};JSM.Coord.prototype={Set:function(x,y,z){this.x=JSM.ValueOrDefault(x,0);this.y=JSM.ValueOrDefault(y,0);this.z=JSM.ValueOrDefault(z,0);},ToString:function(){return("("+this.x+", "+this.y+", "+this.z+")");},Clone:function(){return new JSM.Coord(this.x,this.y,this.z);}};JSM.Vector2D=JSM.Coord2D;JSM.Vector=JSM.Coord;JSM.CoordIsEqual2D=function(a,b){return JSM.IsEqual(a.x,b.x)&&JSM.IsEqual(a.y,b.y);};JSM.CoordDistance2D=function(a,b){var x1=a.x;var y1=a.y;var x2=b.x;var y2=b.y;return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));};JSM.MidCoord2D=function(a,b){return new JSM.Coord2D((a.x+b.x)/2,(a.y+b.y)/2);};JSM.CoordIsEqual=function(a,b){return JSM.IsEqual(a.x,b.x)&&JSM.IsEqual(a.y,b.y)&&JSM.IsEqual(a.z,b.z);};JSM.CoordDistance=function(a,b){var x1=a.x;var y1=a.y;var z1=a.z;var x2=b.x;var y2=b.y;var z2=b.z;return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1));};JSM.CoordSignedDistance=function(a,b,direction){var abDirection=JSM.CoordSub(b,a);var distance=JSM.CoordDistance(a,b);var angle=JSM.GetVectorsAngle(abDirection,direction);if(JSM.IsEqual(angle,Math.PI)){distance=-distance;}return distance;};JSM.MidCoord=function(a,b){return new JSM.Coord((a.x+b.x)/2,(a.y+b.y)/2,(a.z+b.z)/2);};JSM.VectorMultiply=function(vector,scalar){var result=new JSM.Vector();result.x=vector.x*scalar;result.y=vector.y*scalar;result.z=vector.z*scalar;return result;};JSM.VectorDot=function(a,b){return a.x*b.x+a.y*b.y+a.z*b.z;};JSM.VectorCross=function(a,b){var result=new JSM.Vector();result.x=a.y*b.z-a.z*b.y;result.y=a.z*b.x-a.x*b.z;result.z=a.x*b.y-a.y*b.x;return result;};JSM.VectorLength=function(vector){var x=vector.x;var y=vector.y;var z=vector.z;return Math.sqrt(x*x+y*y+z*z);};JSM.VectorNormalize=function(vector){var length=JSM.VectorLength(vector);var result=new JSM.Coord(0,0,0);if(JSM.IsGreater(length,0)){result=JSM.VectorMultiply(vector,1/length);}return result;};JSM.VectorSetLength=function(vector,length){var ratio=length/JSM.VectorLength(vector);var result=JSM.VectorMultiply(vector,ratio);return result;};JSM.GetVectorsAngle=function(a,b){var aDirection=JSM.VectorNormalize(a);var bDirection=JSM.VectorNormalize(b);if(JSM.CoordIsEqual(aDirection,bDirection)){return 0;}var product=JSM.VectorDot(aDirection,bDirection);return JSM.ArcCos(product);};JSM.VectorsAreCollinear=function(a,b){var angle=JSM.GetVectorsAngle(a,b);return JSM.IsEqual(angle,0)||JSM.IsEqual(angle,Math.PI);};JSM.CoordAdd=function(a,b){return new JSM.Vector(a.x+b.x,a.y+b.y,a.z+b.z);};JSM.CoordSub=function(a,b){return new JSM.Vector(a.x-b.x,a.y-b.y,a.z-b.z);};JSM.CoordOffset=function(coord,direction,distance){var normal=JSM.VectorNormalize(direction);var result=new JSM.Coord();result.x=coord.x+normal.x*distance;result.y=coord.y+normal.y*distance;result.z=coord.z+normal.z*distance;return result;};JSM.CoordRotate=function(coord,axis,angle,origo){var offseted=JSM.CoordSub(coord,origo);var normal=JSM.VectorNormalize(axis);var u=normal.x;var v=normal.y;var w=normal.z;var x=offseted.x;var y=offseted.y;var z=offseted.z;var result=new JSM.Coord();result.x=-u*(-u*x-v*y-w*z)*(1-Math.cos(angle))+x*Math.cos(angle)+(-w*y+v*z)*Math.sin(angle);result.y=-v*(-u*x-v*y-w*z)*(1-Math.cos(angle))+y*Math.cos(angle)+(w*x-u*z)*Math.sin(angle);result.z=-w*(-u*x-v*y-w*z)*(1-Math.cos(angle))+z*Math.cos(angle)+(-v*x+u*y)*Math.sin(angle);result=JSM.CoordAdd(result,origo);return result;};JSM.CoordTurnType2D=function(a,b,c){var m00=a.x;var m01=a.y;var m02=1;var m10=b.x;var m11=b.y;var m12=1;var m20=c.x;var m21=c.y;var m22=1;var determinant=JSM.MatrixDeterminant3x3(m00,m01,m02,m10,m11,m12,m20,m21,m22);if(JSM.IsPositive(determinant)){return"CounterClockwise";}else{if(JSM.IsNegative(determinant)){return"Clockwise";}else{return"Collinear";}}};JSM.PolarToCartesian=function(radius,theta){var result=new JSM.Coord2D();result.x=radius*Math.cos(theta);result.y=radius*Math.sin(theta);return result;};JSM.GetPolarArcLengthFromAngle=function(radius,theta){return theta*radius;};JSM.GetPolarAngleFromArcLength=function(radius,arcLength){if(JSM.IsEqual(radius,0)){return 0;}return arcLength/radius;};JSM.CoordTurnType=function(a,b,c,normal){var origo=new JSM.Coord(0,0,0);var a2=JSM.GetCoord2DFromCoord(a,origo,normal);var b2=JSM.GetCoord2DFromCoord(b,origo,normal);var c2=JSM.GetCoord2DFromCoord(c,origo,normal);var turnType=JSM.CoordTurnType2D(a2,b2,c2);var zNormal=new JSM.Vector(0,0,1);var angle=JSM.GetVectorsAngle(normal,zNormal);if(JSM.IsEqual(angle,Math.PI)){if(turnType==="CounterClockwise"){turnType="Clockwise";}else{if(turnType==="Clockwise"){turnType="CounterClockwise";}}}return turnType;};JSM.CalculateCentroid=function(coords){var count=coords.length;var centroid=new JSM.Coord(0,0,0);if(count>=1){var i;for(var i=0;i<count;i++){centroid=JSM.CoordAdd(centroid,coords[i]);}centroid=JSM.VectorMultiply(centroid,1/count);}return centroid;};JSM.CalculateNormal=function(coords){var count=coords.length;var normal=new JSM.Vector(0,0,0);if(count>=3){var i,currentIndex,nextIndex;var current,next;for(i=0;i<count;i++){currentIndex=i%count;nextIndex=(i+1)%count;current=coords[currentIndex];next=coords[nextIndex];normal.x+=(current.y-next.y)*(current.z+next.z);normal.y+=(current.z-next.z)*(current.x+next.x);normal.z+=(current.x-next.x)*(current.y+next.y);}}var normalized=JSM.VectorNormalize(normal);return normalized;};JSM.SphericalToCartesian=function(radius,phi,theta){var result=new JSM.Coord();result.x=radius*Math.sin(phi)*Math.cos(theta);result.y=radius*Math.sin(phi)*Math.sin(theta);result.z=radius*Math.cos(phi);return result;};JSM.CylindricalToCartesian=function(radius,height,theta){var result=new JSM.Coord();result.x=radius*Math.cos(theta);result.y=radius*Math.sin(theta);result.z=height;return result;};JSM.GetCoord2DFromCoord=function(coord,origo,normal){var zNormal=new JSM.Vector(0,0,1);var axis=JSM.VectorCross(normal,zNormal);var angle=JSM.GetVectorsAngle(normal,zNormal);var rotated=JSM.CoordRotate(coord,axis,angle,origo);return new JSM.Coord2D(rotated.x,rotated.y);};JSM.GetArcLength=function(a,b,radius){var angle=JSM.GetVectorsAngle(a,b);return angle*radius;};JSM.GetVectorsFullAngle=function(referenceVector,currentVector,normal){var angle=JSM.GetVectorsAngle(referenceVector,currentVector);var origo=new JSM.Coord(0,0,0);if(JSM.CoordTurnType(currentVector,origo,referenceVector,normal)=="Clockwise"){angle=2*Math.PI-angle;}return angle;};JSM.GetFullArcLength=function(referenceVector,currentVector,radius,normal){var angle=JSM.GetVectorsFullAngle(referenceVector,currentVector,normal);return angle*radius;};JSM.CoordSystem=function(origo,e1,e2,e3){this.origo=JSM.ValueOrDefault(origo,new JSM.Coord());this.e1=JSM.ValueOrDefault(e1,new JSM.Coord());this.e2=JSM.ValueOrDefault(e2,new JSM.Coord());this.e3=JSM.ValueOrDefault(e3,new JSM.Coord());};JSM.CoordSystem.prototype={Set:function(origo,e1,e2,e3){this.origo=JSM.ValueOrDefault(origo,new JSM.Coord());this.e1=JSM.ValueOrDefault(e1,new JSM.Coord());this.e2=JSM.ValueOrDefault(e2,new JSM.Coord());this.e3=JSM.ValueOrDefault(e3,new JSM.Coord());},Clone:function(){return new JSM.CoordSystem(this.origo.Clone(),this.e1.Clone(),this.e2.Clone(),this.e3.Clone());}};JSM.CoordSystemToDirectionVectors=function(system){return new JSM.CoordSystem(system.origo,JSM.CoordSub(system.e1,system.origo),JSM.CoordSub(system.e2,system.origo),JSM.CoordSub(system.e3,system.origo));};JSM.CoordSystemToAbsoluteCoords=function(system){return new JSM.CoordSystem(system.origo,JSM.CoordAdd(system.e1,system.origo),JSM.CoordAdd(system.e2,system.origo),JSM.CoordAdd(system.e3,system.origo));};JSM.ChangeCoordSystem=function(coord,from,to){var fromE1=JSM.VectorNormalize(from.e1);var fromE2=JSM.VectorNormalize(from.e2);var fromE3=JSM.VectorNormalize(from.e3);var toE1=JSM.VectorNormalize(to.e1);var toE2=JSM.VectorNormalize(to.e2);var toE3=JSM.VectorNormalize(to.e3);var offseted=JSM.CoordSub(coord,from.origo);var result=new JSM.Coord();result.x=JSM.VectorDot(toE1,fromE1)*offseted.x+JSM.VectorDot(toE1,fromE2)*offseted.y+JSM.VectorDot(toE1,fromE3)*offseted.z;result.y=JSM.VectorDot(toE2,fromE1)*offseted.x+JSM.VectorDot(toE2,fromE2)*offseted.y+JSM.VectorDot(toE2,fromE3)*offseted.z;result.z=JSM.VectorDot(toE3,fromE1)*offseted.x+JSM.VectorDot(toE3,fromE2)*offseted.y+JSM.VectorDot(toE3,fromE3)*offseted.z;result=JSM.CoordAdd(result,to.origo);return result;};JSM.Sector2D=function(beg,end){this.beg=JSM.ValueOrDefault(beg,new JSM.Coord2D());this.end=JSM.ValueOrDefault(end,new JSM.Coord2D());};JSM.Sector2D.prototype={Set:function(beg,end){this.beg=JSM.ValueOrDefault(beg,new JSM.Coord2D());this.end=JSM.ValueOrDefault(end,new JSM.Coord2D());},Clone:function(){return new JSM.Sector2D(this.beg.Clone(),this.end.Clone());}};JSM.Sector=function(beg,end){this.beg=JSM.ValueOrDefault(beg,new JSM.Coord());this.end=JSM.ValueOrDefault(end,new JSM.Coord());};JSM.Sector.prototype={Set:function(beg,end){this.beg=JSM.ValueOrDefault(beg,new JSM.Coord());this.end=JSM.ValueOrDefault(end,new JSM.Coord());},Clone:function(){return new JSM.Sector(this.beg.Clone(),this.end.Clone());}};JSM.CoordSectorPosition2D=function(coord,sector){var x=coord.x;var y=coord.y;var x1=sector.beg.x;var y1=sector.beg.y;var x2=sector.end.x;var y2=sector.end.y;var length=Math.pow(x2-x1,2)+Math.pow(y2-y1,2);if(JSM.IsZero(length)){if(JSM.CoordIsEqual2D(coord,sector.beg)){return"CoordOnSectorEndCoord";}return"CoordOutsideOfSector";}var u=((x-x1)*(x2-x1)+(y-y1)*(y2-y1))/length;if(JSM.IsLower(u,0)||JSM.IsGreater(u,1)){return"CoordOutsideOfSector";}var ux=x1+u*(x2-x1);var uy=y1+u*(y2-y1);if(!JSM.IsEqual(ux,x)||!JSM.IsEqual(uy,y)){return"CoordOutsideOfSector";}if(JSM.IsEqual(u,0)||JSM.IsEqual(u,1)){return"CoordOnSectorEndCoord";}return"CoordInsideOfSector";};JSM.SectorSectorPosition2D=function(aSector,bSector,intersection){var x1=aSector.beg.x;var y1=aSector.beg.y;var x2=aSector.end.x;var y2=aSector.end.y;var x3=bSector.beg.x;var y3=bSector.beg.y;var x4=bSector.end.x;var y4=bSector.end.y;var ux=(x4-x3)*(y1-y3)-(y4-y3)*(x1-x3);var uy=(x2-x1)*(y1-y3)-(y2-y1)*(x1-x3);if(JSM.IsZero(ux)&&JSM.IsZero(uy)){var aBeg=JSM.CoordSectorPosition2D(aSector.beg,bSector);var aEnd=JSM.CoordSectorPosition2D(aSector.end,bSector);var bBeg=JSM.CoordSectorPosition2D(bSector.beg,aSector);var bEnd=JSM.CoordSectorPosition2D(bSector.end,aSector);if(aBeg==="CoordInsideOfSector"||aEnd==="CoordInsideOfSector"||bBeg==="CoordInsideOfSector"||bEnd==="CoordInsideOfSector"){return"SectorsIntersectsCoincident";}else{if(aBeg==="CoordOnSectorEndCoord"&&aEnd==="CoordOnSectorEndCoord"&&bBeg==="CoordOnSectorEndCoord"&&bEnd==="CoordOnSectorEndCoord"){return"SectorsIntersectsCoincident";}else{if(aBeg==="CoordOnSectorEndCoord"||aEnd==="CoordOnSectorEndCoord"||bBeg==="CoordOnSectorEndCoord"||bEnd==="CoordOnSectorEndCoord"){if(intersection!==undefined){if(aBeg==="CoordOnSectorEndCoord"){intersection=aSector.beg;}else{if(aEnd==="CoordOnSectorEndCoord"){intersection=aSector.end;}else{if(bBeg==="CoordOnSectorEndCoord"){intersection=bSector.beg;}else{if(bEnd==="CoordOnSectorEndCoord"){intersection=bSector.end;}}}}}return"SectorsIntersectsEndPoint";}}}return"SectorsDontIntersects";}var denom=(y4-y3)*(x2-x1)-(x4-x3)*(y2-y1);if(JSM.IsZero(denom)){return"SectorsDontIntersects";}ux/=denom;uy/=denom;if(JSM.IsLower(ux,0)||JSM.IsGreater(ux,1)||JSM.IsLower(uy,0)||JSM.IsGreater(uy,1)){return"SectorsDontIntersects";}if(intersection!==undefined){intersection.x=x1+ux*(x2-x1);intersection.y=y1+ux*(y2-y1);}if(JSM.IsEqual(ux,0)||JSM.IsEqual(ux,1)||JSM.IsEqual(uy,0)||JSM.IsEqual(uy,1)){return"SectorsIntersectsEndPoint";}return"SectorsIntersectsOnePoint";};JSM.Line2D=function(start,direction){this.start=JSM.ValueOrDefault(start,new JSM.Coord2D());this.direction=JSM.ValueOrDefault(direction,new JSM.Vector2D());};JSM.Line2D.prototype={Set:function(start,direction){this.start=JSM.ValueOrDefault(start,new JSM.Coord2D());this.direction=JSM.ValueOrDefault(direction,new JSM.Vector2D());},Clone:function(){return new JSM.Line2D(this.start.Clone(),this.direction.Clone());}};JSM.Line=function(start,direction){this.start=JSM.ValueOrDefault(start,new JSM.Coord());this.direction=JSM.ValueOrDefault(direction,new JSM.Vector());};JSM.Line.prototype={Set:function(start,direction){this.start=JSM.ValueOrDefault(start,new JSM.Coord());this.direction=JSM.ValueOrDefault(direction,new JSM.Vector());},Clone:function(){return new JSM.Line(this.start.Clone(),this.direction.Clone());}};JSM.CoordLinePosition2D=function(coord,line){var x=coord.x;var y=coord.y;var a=line.start;var b=line.direction;var position=b.x*(y-a.y)-b.y*(x-a.x);if(JSM.IsPositive(position)){return"CoordAtLineLeft";}else{if(JSM.IsNegative(position)){return"CoordAtLineRight";}}return"CoordOnLine";};JSM.CoordLinePosition=function(coord,line,projected){var x=coord.x;var y=coord.y;var z=coord.z;var a=line.start;var b=line.direction;var x1=a.x;var y1=a.y;var z1=a.z;var x2=a.x+b.x;var y2=a.y+b.y;var z2=a.z+b.z;var denom=(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1);if(JSM.IsZero(denom)){if(projected!==undefined){projected.Set(a.x,a.y,a.z);}if(JSM.CoordIsEqual(a,coord)){return"CoordOnLine";}return"CoordOutsideOfLine";}var u=((x2-x1)*(x-x1)+(y2-y1)*(y-y1)+(z2-z1)*(z-z1))/denom;var c=JSM.CoordAdd(a,JSM.VectorMultiply(b,u));if(projected!==undefined){projected.Set(c.x,c.y,c.z);}var distance=JSM.CoordDistance(coord,c);if(JSM.IsZero(distance)){return"CoordOnLine";}return"CoordOutsideOfLine";};JSM.ProjectCoordToLine=function(coord,line){var result=new JSM.Coord();var x=coord.x;var y=coord.y;var z=coord.z;var a=line.start;var b=line.direction;var x1=a.x;var y1=a.y;var z1=a.z;var x2=a.x+b.x;var y2=a.y+b.y;var z2=a.z+b.z;var denom=(x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1);if(JSM.IsZero(denom)){result.Set(a.x,a.y,a.z);return result;}var u=((x2-x1)*(x-x1)+(y2-y1)*(y-y1)+(z2-z1)*(z-z1))/denom;var c=JSM.CoordAdd(a,JSM.VectorMultiply(b,u));result.Set(c.x,c.y,c.z);return result;};JSM.LineLineClosestPoint=function(aLine,bLine,aClosestPoint,bClosestPoint){function Dmnop(v,m,n,o,p){var result=(v[m].x-v[n].x)*(v[o].x-v[p].x)+(v[m].y-v[n].y)*(v[o].y-v[p].y)+(v[m].z-v[n].z)*(v[o].z-v[p].z);return result;}var aDir=JSM.VectorNormalize(aLine.direction);var aStart=aLine.start;var aEnd=JSM.CoordAdd(aStart,aDir);var bDir=JSM.VectorNormalize(bLine.direction);var bStart=bLine.start;var bEnd=JSM.CoordAdd(bStart,bDir);var v=[aStart,aEnd,bStart,bEnd];var d1010=Dmnop(v,1,0,1,0);var d0210=Dmnop(v,0,2,1,0);var d0232=Dmnop(v,0,2,3,2);var d3210=Dmnop(v,3,2,1,0);var d3232=Dmnop(v,3,2,3,2);var denom=(d1010*d3232-d3210*d3210);if(JSM.IsEqual(denom,0)){return false;}var nom=(d0232*d3210-d0210*d3232);var mua=nom/denom;var mub=(d0232+mua*d3210)/d3232;if(aClosestPoint!==undefined){var aDir=JSM.VectorNormalize(JSM.CoordSub(aEnd,aStart));var aClosest=JSM.CoordAdd(aStart,JSM.VectorMultiply(aDir,mua));aClosestPoint.Set(aClosest.x,aClosest.y,aClosest.z);}if(bClosestPoint!==undefined){var bClosest=JSM.CoordAdd(bStart,JSM.VectorMultiply(bDir,mub));bClosestPoint.Set(bClosest.x,bClosest.y,bClosest.z);}return true;};JSM.LineLinePosition=function(aLine,bLine,intersection){var aClosestPoint=new JSM.Coord();var bClosestPoint=new JSM.Coord();if(!JSM.LineLineClosestPoint(aLine,bLine,aClosestPoint,bClosestPoint)){return"LinesIntersectsCoincident";}if(JSM.CoordIsEqual(aClosestPoint,bClosestPoint)){if(intersection!==undefined){intersection.Set(aClosestPoint.x,aClosestPoint.y,aClosestPoint.z);}return"LinesIntersectsOnePoint";}return"LinesDontIntersects";};JSM.Transformation=function(){this.matrix=[1,0,0,0,0,1,0,0,0,0,1,0];};JSM.Transformation.prototype={Append:function(source){this.matrix=[source.matrix[0]*this.matrix[0]+source.matrix[1]*this.matrix[4]+source.matrix[2]*this.matrix[8],source.matrix[0]*this.matrix[1]+source.matrix[1]*this.matrix[5]+source.matrix[2]*this.matrix[9],source.matrix[0]*this.matrix[2]+source.matrix[1]*this.matrix[6]+source.matrix[2]*this.matrix[10],source.matrix[0]*this.matrix[3]+source.matrix[1]*this.matrix[7]+source.matrix[2]*this.matrix[11]+source.matrix[3],source.matrix[4]*this.matrix[0]+source.matrix[5]*this.matrix[4]+source.matrix[6]*this.matrix[8],source.matrix[4]*this.matrix[1]+source.matrix[5]*this.matrix[5]+source.matrix[6]*this.matrix[9],source.matrix[4]*this.matrix[2]+source.matrix[5]*this.matrix[6]+source.matrix[6]*this.matrix[10],source.matrix[4]*this.matrix[3]+source.matrix[5]*this.matrix[7]+source.matrix[6]*this.matrix[11]+source.matrix[7],source.matrix[8]*this.matrix[0]+source.matrix[9]*this.matrix[4]+source.matrix[10]*this.matrix[8],source.matrix[8]*this.matrix[1]+source.matrix[9]*this.matrix[5]+source.matrix[10]*this.matrix[9],source.matrix[8]*this.matrix[2]+source.matrix[9]*this.matrix[6]+source.matrix[10]*this.matrix[10],source.matrix[8]*this.matrix[3]+source.matrix[9]*this.matrix[7]+source.matrix[10]*this.matrix[11]+source.matrix[11]];},Apply:function(coord){var result=new JSM.Coord();result.x=this.matrix[0]*coord.x+this.matrix[1]*coord.y+this.matrix[2]*coord.z+this.matrix[3];result.y=this.matrix[4]*coord.x+this.matrix[5]*coord.y+this.matrix[6]*coord.z+this.matrix[7];result.z=this.matrix[8]*coord.x+this.matrix[9]*coord.y+this.matrix[10]*coord.z+this.matrix[11];return result;},Clone:function(){var result=new JSM.Transformation;result.matrix=[this.matrix[0],this.matrix[1],this.matrix[2],this.matrix[3],this.matrix[4],this.matrix[5],this.matrix[6],this.matrix[7],this.matrix[8],this.matrix[9],this.matrix[10],this.matrix[11]];return result;}};JSM.IdentityTransformation=function(){var transformation=new JSM.Transformation();transformation.matrix=[1,0,0,0,0,1,0,0,0,0,1,0];return transformation;};JSM.TranslationTransformation=function(translation){var transformation=new JSM.Transformation();transformation.matrix=[1,0,0,translation.x,0,1,0,translation.y,0,0,1,translation.z];return transformation;};JSM.OffsetTransformation=function(direction,distance){var normal=JSM.VectorNormalize(direction);var translation=JSM.VectorMultiply(normal,distance);return JSM.TranslationTransformation(translation);};JSM.RotationTransformation=function(axis,angle,origo){var transformation=new JSM.Transformation();var normal=JSM.VectorNormalize(axis);var u=normal.x;var v=normal.y;var w=normal.z;var u2=u*u;var v2=v*v;var w2=w*w;var si=Math.sin(angle);var co=Math.cos(angle);if(origo===undefined){transformation.matrix=[u2+(v2+w2)*co,u*v*(1-co)-w*si,u*w*(1-co)+v*si,0,u*v*(1-co)+w*si,v2+(u2+w2)*co,v*w*(1-co)-u*si,0,u*w*(1-co)-v*si,v*w*(1-co)+u*si,w2+(u2+v2)*co,0];}else{var a=origo.x;var b=origo.y;var c=origo.z;transformation.matrix=[u2+(v2+w2)*co,u*v*(1-co)-w*si,u*w*(1-co)+v*si,(a*(v2+w2)-u*(b*v+c*w))*(1-co)+(b*w-c*v)*si,u*v*(1-co)+w*si,v2+(u2+w2)*co,v*w*(1-co)-u*si,(b*(u2+w2)-v*(a*u+c*w))*(1-co)+(c*u-a*w)*si,u*w*(1-co)-v*si,v*w*(1-co)+u*si,w2+(u2+v2)*co,(c*(u2+v2)-w*(a*u+b*v))*(1-co)+(a*v-b*u)*si];}return transformation;};JSM.RotationXTransformation=function(angle,origo){var transformation=new JSM.Transformation();if(origo===undefined){var si=Math.sin(angle);var co=Math.cos(angle);transformation.matrix=[1,0,0,0,0,co,-si,0,0,si,co,0];}else{transformation.Append(JSM.TranslationTransformation(new JSM.Vector(-origo.x,-origo.y,-origo.z)));transformation.Append(JSM.RotationXTransformation(angle));transformation.Append(JSM.TranslationTransformation(new JSM.Vector(origo.x,origo.y,origo.z)));}return transformation;};JSM.RotationYTransformation=function(angle,origo){var transformation=new JSM.Transformation();if(origo===undefined){var si=Math.sin(angle);var co=Math.cos(angle);transformation.matrix=[co,0,si,0,0,1,0,0,-si,0,co,0];}else{transformation.Append(JSM.TranslationTransformation(new JSM.Vector(-origo.x,-origo.y,-origo.z)));transformation.Append(JSM.RotationYTransformation(angle));transformation.Append(JSM.TranslationTransformation(new JSM.Vector(origo.x,origo.y,origo.z)));}return transformation;};JSM.RotationZTransformation=function(angle,origo){var transformation=new JSM.Transformation();if(origo===undefined){var si=Math.sin(angle);var co=Math.cos(angle);transformation.matrix=[co,-si,0,0,si,co,0,0,0,0,1,0];}else{transformation.Append(JSM.TranslationTransformation(new JSM.Vector(-origo.x,-origo.y,-origo.z)));transformation.Append(JSM.RotationZTransformation(angle));transformation.Append(JSM.TranslationTransformation(new JSM.Vector(origo.x,origo.y,origo.z)));}return transformation;};JSM.SystemConversionTransformation=function(fromE1,fromE2,fromE3,toE1,toE2,toE3){var transformation=new JSM.Transformation();transformation.matrix=[JSM.VectorDot(toE1,fromE1),JSM.VectorDot(toE1,fromE2),JSM.VectorDot(toE1,fromE3),0,JSM.VectorDot(toE2,fromE1),JSM.VectorDot(toE2,fromE2),JSM.VectorDot(toE2,fromE3),0,JSM.VectorDot(toE3,fromE1),JSM.VectorDot(toE3,fromE2),JSM.VectorDot(toE3,fromE3),0];return transformation;};JSM.Polygon2D=function(source){if(source===undefined){this.vertices=[];}else{if(source instanceof JSM.Polygon2D){this.vertices=source.vertices;}else{if(source instanceof Array){this.vertices=source;}}}};JSM.Polygon2D.prototype={AddVertex:function(x,y){this.vertices.push(new JSM.Coord2D(x,y));},GetVertex:function(index){return this.vertices[index];},SetVertex:function(index,x,y){this.vertices[index].Set(x,y);},Count:function(){return this.vertices.length;},Clear:function(){this.vertices=[];},Clone:function(source){var result=new JSM.Polygon2D();var i;for(i=0;i<this.vertices.length;i++){result.vertices.push(this.vertices[i].Clone());}return result;}};JSM.Polygon=function(source){if(source===undefined){this.vertices=[];}else{if(source instanceof JSM.Polygon){this.vertices=source.vertices;}else{if(source instanceof Array){this.vertices=source;}}}};JSM.Polygon.prototype={AddVertex:function(x,y,z){this.vertices.push(new JSM.Coord(x,y,z));},GetVertex:function(index){return this.vertices[index];},SetVertex:function(index,x,y,z){this.vertices[index].Set(x,y,z);},Count:function(){return this.vertices.length;},Clear:function(){this.vertices=[];},Clone:function(source){var result=new JSM.Polygon();var i;for(i=0;i<this.vertices.length;i++){result.vertices.push(this.vertices[i].Clone());}return result;}};JSM.PolygonSignedArea2D=function(polygon){var count=polygon.Count();var area=0;var i,current,next;for(i=0;i<count;i++){current=polygon.GetVertex(i);next=polygon.GetVertex((i+1)%count);area+=current.x*next.y-next.x*current.y;}area/=2;return area;};JSM.PolygonArea2D=function(polygon){return Math.abs(JSM.PolygonSignedArea2D(polygon));};JSM.PolygonOrientation2D=function(polygon){var signedArea=JSM.PolygonSignedArea2D(polygon);if(JSM.IsPositive(signedArea)){return"CounterClockwise";}else{if(JSM.IsNegative(signedArea)){return"ClockWise";}}return"Invalid";};JSM.PolygonComplexity2D=function(polygon){var hasCounterClockwiseVertex=false;var hasClockWiseVertex=false;var count=polygon.Count();var i,prevIndex,currIndex,nextIndex;var prev,curr,next,turnType;for(i=0;i<count;i++){prevIndex=(i===0?count-1:i-1);currIndex=i;nextIndex=(i===count-1?0:i+1);prev=polygon.GetVertex(prevIndex);curr=polygon.GetVertex(currIndex);next=polygon.GetVertex(nextIndex);turnType=JSM.CoordTurnType2D(prev,curr,next);if(turnType==="CounterClockwise"){hasCounterClockwiseVertex=true;}else{if(turnType==="Clockwise"){hasClockWiseVertex=true;}}if(hasCounterClockwiseVertex&&hasClockWiseVertex){return"Concave";}}if(!hasCounterClockwiseVertex&&!hasClockWiseVertex){return"Invalid";}return"Convex";};JSM.CoordPolygonPosition2D=function(coord,polygon){var count=polygon.Count();var i,current,next,sector;for(i=0;i<count;i++){current=polygon.GetVertex(i);next=polygon.GetVertex((i+1)%count);sector=new JSM.Sector2D(current,next);if(JSM.CoordSectorPosition2D(coord,sector)!=="CoordOutsideOfSector"){return"CoordOnPolygonEdge";}}var maxHorizontalDistance=0;var currentDistance;for(i=0;i<count;i++){currentDistance=Math.abs(polygon.GetVertex(i).x-coord.x);if(JSM.IsGreater(currentDistance,maxHorizontalDistance)){maxHorizontalDistance=currentDistance;}}var ray=new JSM.Sector2D(coord,new JSM.Coord2D(coord.x+2*maxHorizontalDistance,coord.y));var intersections=0;var intersection,ssp;for(i=0;i<count;i++){current=polygon.GetVertex(i);next=polygon.GetVertex((i+1)%count);sector=new JSM.Sector2D(current,next);intersection=new JSM.Coord2D();ssp=JSM.SectorSectorPosition2D(ray,sector,intersection);if(ssp==="SectorsDontIntersects"){continue;}if(ssp==="SectorsIntersectsOnePoint"){intersections++;}else{if(ssp==="SectorsIntersectsEndPoint"){if(JSM.CoordIsEqual2D(intersection,sector.beg)){if(JSM.IsGreater(sector.beg.y,sector.end.y)){intersections++;}}else{if(JSM.CoordIsEqual2D(intersection,sector.end)){if(JSM.IsLower(sector.beg.y,sector.end.y)){intersections++;}}}}}}if(intersections%2===0){return"CoordOutsideOfPolygon";}return"CoordInsideOfPolygon";};JSM.IsPolygonVertexVisible2D=function(polygon,from,to){if(from===to){return false;}var count=polygon.Count();var prev=(from>0?from-1:count-1);var next=(from<count-1?from+1:0);if(to===prev||to===next){return false;}var endPointIntersectionCount=0;var diagonalSector=new JSM.Sector2D(polygon.GetVertex(from),polygon.GetVertex(to));var i,currentSector,position;for(i=0;i<count;i++){if(i===prev||i===from){continue;}currentSector=new JSM.Sector2D(polygon.GetVertex(i),polygon.GetVertex((i+1)%count));position=JSM.SectorSectorPosition2D(diagonalSector,currentSector);if(position==="SectorsIntersectsOnePoint"||position==="SectorsIntersectsCoincident"){return false;}else{if(position==="SectorsIntersectsEndPoint"){endPointIntersectionCount++;if(endPointIntersectionCount>2){return false;}}}}var midCoord=JSM.MidCoord2D(diagonalSector.beg,diagonalSector.end);if(JSM.CoordPolygonPosition2D(midCoord,polygon)==="CoordOutsideOfPolygon"){return false;}return true;};JSM.PolygonTriangulate2D=function(polygon){var Increase=function(value,count){if(value<count-1){return value+1;}else{return 0;}};var Decrease=function(value,count){if(value>0){return value-1;}else{return count-1;}};var GetResult=function(){var result=[];var i,j,resultPolygon,resultTriangle;for(i=0;i<resultPolygons.length;i++){resultPolygon=resultPolygons[i];if(resultPolygon.length!==3){continue;}if(orientation==="CounterClockwise"){result.push(resultPolygon);}else{resultTriangle=[];for(j=resultPolygon.length-1;j>=0;j--){resultTriangle.push(count-resultPolygon[j]-1);}result.push(resultTriangle);}}return result;};var IsVisibleVertex=function(currentPolygon2D,vertex1,vertex2){if(vertex1===vertex2){return false;}var currentVertexCount=currentPolygon2D.Count();if(Increase(vertex1,currentVertexCount)===vertex2||Decrease(vertex1,currentVertexCount)===vertex2){return false;}return JSM.IsPolygonVertexVisible2D(currentPolygon2D,vertex1,vertex2);};var SplitPolygon=function(currentPolygon,vertex1,vertex2){var currentVertexCount=currentPolygon.length;if(currentVertexCount<=3){return true;}var i,j,start,end,resultPolygon;for(i=0;i<2;i++){start=-1;end=-1;if(i===0){start=vertex1;end=vertex2;}else{if(i===1){start=vertex2;end=vertex1;}}resultPolygon=[];resultPolygon.push(currentPolygon[end]);for(j=start;j!==end;j=Increase(j,currentVertexCount)){resultPolygon.push(currentPolygon[j]);}resultPolygons.push(resultPolygon);}return true;};var poly=polygon.Clone();var count=poly.Count();if(count<3){return[];}var resultPolygons=[];var firstPolygon=[];var i,j,k;for(i=0;i<count;i++){firstPolygon.push(i);}resultPolygons.push(firstPolygon);if(count===3){return GetResult();}var complexity=JSM.PolygonComplexity2D(poly);var orientation=JSM.PolygonOrientation2D(poly);if(complexity==="Invalid"||orientation==="Invalid"){return[];}if(orientation!=="CounterClockwise"){var i1,i2,tmp;for(i=0;i<count/2;i++){i1=i;i2=count-i-1;tmp=poly.vertices[i1];poly.vertices[i1]=poly.vertices[i2];poly.vertices[i2]=tmp;}}if(complexity==="Convex"){var triangle;for(i=0;i<count-2;i++){triangle=[];triangle.push(0);triangle.push((i+1)%count);triangle.push((i+2)%count);resultPolygons.push(triangle);}return GetResult();}var currentPolygon,currentVertexCount,currentPolygon2D,createdNewPolygons,vertex;for(i=0;i<resultPolygons.length;i++){currentPolygon=resultPolygons[i];currentVertexCount=currentPolygon.length;if(currentVertexCount===3){continue;}currentPolygon2D=new JSM.Polygon2D();for(j=0;j<currentVertexCount;j++){vertex=poly.GetVertex(currentPolygon[j]);currentPolygon2D.AddVertex(vertex.x,vertex.y);}createdNewPolygons=false;for(j=0;j<currentVertexCount;j++){for(k=0;k<currentVertexCount;k++){if(IsVisibleVertex(currentPolygon2D,j,k)){SplitPolygon(currentPolygon,j,k);createdNewPolygons=true;break;}}if(createdNewPolygons){break;}}}return GetResult();};JSM.CheckTriangulation2D=function(polygon,triangles){var polygonArea=JSM.PolygonSignedArea2D(polygon);var trianglesArea=0;var i,j,triangle,currentTriangle,vertex;for(i=0;i<triangles.length;i++){triangle=triangles[i];if(triangle.length!==3){return false;}currentTriangle=new JSM.Polygon2D();for(j=0;j<triangle.length;j++){vertex=polygon.GetVertex(triangle[j]);currentTriangle.AddVertex(vertex.x,vertex.y);}trianglesArea+=JSM.PolygonSignedArea2D(currentTriangle);}if(!JSM.IsEqual(polygonArea,trianglesArea)){return false;}return true;};JSM.PolygonTriangulate=function(polygon){var polygon2D=new JSM.Polygon2D();var normal=JSM.CalculateNormal(polygon.vertices);var origo=new JSM.Coord(0,0,0);var vertexCount=polygon.Count();var i,vertex;for(i=0;i<vertexCount;i++){vertex=JSM.GetCoord2DFromCoord(polygon.GetVertex(i),origo,normal);polygon2D.AddVertex(vertex.x,vertex.y);}return JSM.PolygonTriangulate2D(polygon2D);};JSM.OffsetPolygonContour=function(polygon,width){var count=polygon.Count();var normal=JSM.CalculateNormal(polygon.vertices);var prev,curr,next;var prevVertex,currVertex,nextVertex;var prevDir,nextDir;var distance,offsetedCoord;var result=new JSM.Polygon();for(i=0;i<count;i++){prev=(i===0?count-1:i-1);curr=i;next=(i===count-1?0:i+1);prevVertex=polygon.GetVertex(prev);currVertex=polygon.GetVertex(curr);nextVertex=polygon.GetVertex(next);prevDir=JSM.CoordSub(prevVertex,currVertex);nextDir=JSM.CoordSub(nextVertex,currVertex);angle=JSM.GetVectorsAngle(prevDir,nextDir)/2;if(JSM.CoordTurnType(prevVertex,currVertex,nextVertex,normal)==="Clockwise"){angle=Math.PI-angle;}distance=width/Math.sin(angle);offsetedCoord=JSM.CoordOffset(currVertex,nextDir,distance);offsetedCoord=JSM.CoordRotate(offsetedCoord,normal,angle,currVertex);result.AddVertex(offsetedCoord.x,offsetedCoord.y,offsetedCoord.z);}return result;};JSM.Plane=function(a,b,c,d){this.a=JSM.ValueOrDefault(a,0);this.b=JSM.ValueOrDefault(b,0);this.c=JSM.ValueOrDefault(c,0);this.d=JSM.ValueOrDefault(d,0);};JSM.Plane.prototype={Set:function(a,b,c,d){this.a=JSM.ValueOrDefault(a,0);this.b=JSM.ValueOrDefault(b,0);this.c=JSM.ValueOrDefault(c,0);this.d=JSM.ValueOrDefault(d,0);},Clone:function(){return new JSM.Plane(this.a,this.b,this.c,this.d);}};JSM.GetPlaneFromCoordAndDirection=function(coord,direction){var plane=new JSM.Plane();var normal=JSM.VectorNormalize(direction);var pa=normal.x;var pb=normal.y;var pc=normal.z;var pd=-(pa*coord.x+pb*coord.y+pc*coord.z);plane.Set(pa,pb,pc,pd);return plane;};JSM.GetPlaneFromThreeCoords=function(a,b,c){var plane=new JSM.Plane();var pa=(b.y-a.y)*(c.z-a.z)-(c.y-a.y)*(b.z-a.z);var pb=(b.z-a.z)*(c.x-a.x)-(c.z-a.z)*(b.x-a.x);var pc=(b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y);var pd=-(pa*a.x+pb*a.y+pc*a.z);plane.Set(pa,pb,pc,pd);return plane;};JSM.CoordPlanePosition=function(coord,plane){var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var x=coord.x;var y=coord.y;var z=coord.z;var s=a*x+b*y+c*z+d;if(JSM.IsPositive(s)){return"CoordInFrontOfPlane";}else{if(JSM.IsNegative(s)){return"CoordAtBackOfPlane";}}return"CoordOnPlane";};JSM.LinePlanePosition=function(line,plane,intersection){var direction=JSM.VectorNormalize(line.direction);var x1=line.start.x;var y1=line.start.y;var z1=line.start.z;var x2=line.start.x+direction.x;var y2=line.start.y+direction.y;var z2=line.start.z+direction.z;var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var denom=(a*(x1-x2)+b*(y1-y2)+c*(z1-z2));if(JSM.IsZero(denom)){return"LineParallelToPlane";}var u=(a*x1+b*y1+c*z1+d)/denom;if(intersection!==undefined){var i=JSM.CoordAdd(line.start,JSM.VectorMultiply(direction,u));intersection.Set(i.x,i.y,i.z);}return"LineIntersectsPlane";};JSM.LinePlaneIntersection=function(line,plane){var direction=JSM.VectorNormalize(line.direction);var x1=line.start.x;var y1=line.start.y;var z1=line.start.z;var x2=line.start.x+direction.x;var y2=line.start.y+direction.y;var z2=line.start.z+direction.z;var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var result=new JSM.Coord(0,0,0);var denom=(a*(x1-x2)+b*(y1-y2)+c*(z1-z2));if(JSM.IsZero(denom)){return result;}var u=(a*x1+b*y1+c*z1+d)/denom;result=JSM.CoordAdd(line.start,JSM.VectorMultiply(direction,u));return result;};JSM.CoordPlaneSignedDistance=function(coord,plane){var x=coord.x;var y=coord.y;var z=coord.z;var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var distance=(a*x+b*y+c*z+d)/Math.sqrt(a*a+b*b+c*c);return distance;};JSM.CoordPlaneDistance=function(coord,plane){return Math.abs(JSM.CoordPlaneSignedDistance(coord,plane));};JSM.CoordPlaneSignedDirectionalDistance=function(coord,direction,plane){var normal=JSM.VectorNormalize(direction);var x1=coord.x;var y1=coord.y;var z1=coord.z;var x2=coord.x+normal.x;var y2=coord.y+normal.y;var z2=coord.z+normal.z;var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var denom=(a*(x1-x2)+b*(y1-y2)+c*(z1-z2));if(JSM.IsZero(denom)){return 0;}var u=(a*x1+b*y1+c*z1+d)/denom;var intersection=JSM.CoordAdd(coord,JSM.VectorMultiply(normal,u));var distance=JSM.CoordDistance(coord,intersection);var s=a*x1+b*y1+c*z1+d;if(JSM.IsNegative(s)){distance=-distance;}return distance;};JSM.CoordPlaneDirectionalDistance=function(coord,direction,plane){return Math.abs(JSM.CoordPlaneSignedDirectionalDistance(coord,direction,plane));};JSM.ProjectCoordToPlane=function(coord,plane){var x=coord.x;var y=coord.y;var z=coord.z;var a=plane.a;var b=plane.b;var c=plane.c;var d=plane.d;var distance=JSM.CoordPlaneDistance(coord,plane);var side=a*x+b*y+c*z+d;if(JSM.IsGreater(side,0)){distance=-distance;}var normal=JSM.VectorNormalize(new JSM.Coord(a,b,c));var result=JSM.CoordOffset(coord,normal,distance);return result;};JSM.CalculateModelViewMatrix=function(eye,center,up){var d=JSM.VectorNormalize(JSM.CoordSub(center,eye));var c=JSM.VectorNormalize(JSM.VectorCross(d,up));var u=JSM.VectorNormalize(JSM.VectorCross(c,d));var result=[];result[0]=c.x;result[1]=u.x;result[2]=-d.x;result[3]=0;result[4]=c.y;result[5]=u.y;result[6]=-d.y;result[7]=0;result[8]=c.z;result[9]=u.z;result[10]=-d.z;result[11]=0;result[12]=-(c.x*eye.x+c.y*eye.y+c.z*eye.z);result[13]=-(u.x*eye.x+u.y*eye.y+u.z*eye.z);result[14]=(d.x*eye.x+d.y*eye.y+d.z*eye.z);result[15]=1;return result;};JSM.CalculateProjectionMatrix=function(fieldOfView,aspectRatio,nearPlane,farPlane){var e=1/Math.tan(fieldOfView/2);var a=1/aspectRatio;var n=nearPlane;var f=farPlane;var result=[];result[0]=e;result[1]=0;result[2]=0;result[3]=0;result[4]=0;result[5]=e/a;result[6]=0;result[7]=0;result[8]=0;result[9]=0;result[10]=-((f+n)/(f-n));result[11]=-1;result[12]=0;result[13]=0;result[14]=-((2*f*n)/(f-n));result[15]=0;return result;};JSM.ProjectWithMatrices=function(coord,modelView,projection,viewPort,projected){var result=new JSM.Coord();var input=[];var output=[];input[0]=coord.x;input[1]=coord.y;input[2]=coord.z;input[3]=1;output=JSM.VectorMatrixMultiply4x4(JSM.VectorMatrixMultiply4x4(input,modelView),projection);var denom=output[3];if(JSM.IsZero(denom)){return false;}output[0]=output[0]/denom*0.5+0.5;output[1]=output[1]/denom*0.5+0.5;output[2]=output[2]/denom*0.5+0.5;output[0]=output[0]*viewPort[2]+viewPort[0];output[1]=output[1]*viewPort[3]+viewPort[1];result.x=output[0];result.y=output[1];result.z=output[2];if(projected!==undefined){projected.Set(result.x,result.y,result.z);}return true;};JSM.Project=function(coord,eye,center,up,fieldOfView,aspectRatio,nearPlane,farPlane,viewPort,projected){var modelView=JSM.CalculateModelViewMatrix(eye,center,up);var projection=JSM.CalculateProjectionMatrix(fieldOfView,aspectRatio,nearPlane,farPlane);return JSM.ProjectWithMatrices(coord,modelView,projection,viewPort,projected);};JSM.BodyVertex=function(position){this.position=JSM.ValueOrDefault(position,new JSM.Coord());};JSM.BodyPolygon=function(vertices){this.vertices=JSM.ValueOrDefault(vertices,[]);this.material=-1;this.curved=-1;};JSM.Body=function(){this.vertices=[];this.polygons=[];this.projection="Cubic";this.coords=new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1));};JSM.BodyVertex.prototype={GetPosition:function(){return this.position;},SetPosition:function(position){this.position=position;},Clone:function(){return new JSM.BodyVertex(this.position.Clone());}};JSM.BodyPolygon.prototype={AddVertexIndex:function(index){this.vertices.push(index);},GetVertexIndex:function(index){return this.vertices[index];},VertexIndexCount:function(){return this.vertices.length;},HasMaterialIndex:function(){return this.material!==-1;},GetMaterialIndex:function(){return this.material;},SetMaterialIndex:function(material){this.material=material;},HasCurveGroup:function(){return this.curved!==-1;},GetCurveGroup:function(){return this.curved;},SetCurveGroup:function(group){this.curved=group;},InheritAttributes:function(source){this.material=source.material;this.curved=source.curved;},Clone:function(){var result=new JSM.BodyPolygon();var i;for(i=0;i<this.vertices.length;i++){result.vertices.push(this.vertices[i]);}result.material=this.material;result.curved=this.curved;return result;}};JSM.Body.prototype={AddVertex:function(vertex){this.vertices.push(vertex);return this.vertices.length-1;},AddPolygon:function(polygon){this.polygons.push(polygon);return this.polygons.length-1;},GetVertex:function(index){return this.vertices[index];},GetVertexPosition:function(index){return this.vertices[index].position;},GetPolygon:function(index){return this.polygons[index];},VertexCount:function(){return this.vertices.length;},PolygonCount:function(){return this.polygons.length;},SetVertexPosition:function(index,position){this.vertices[index].position=position;},SetPolygonsMaterialIndex:function(material){var i;for(i=0;i<this.polygons.length;i++){this.polygons[i].SetMaterialIndex(material);}},SetPolygonsCurveGroup:function(group){var i;for(i=0;i<this.polygons.length;i++){this.polygons[i].SetCurveGroup(group);}},GetTextureProjectionType:function(){return this.projection;},SetTextureProjectionType:function(projection){this.projection=projection;},GetTextureProjectionCoords:function(){return this.coords;},SetTextureProjectionCoords:function(coords){this.coords=coords;},Transform:function(transformation){var i;for(i=0;i<this.vertices.length;i++){this.vertices[i].position=transformation.Apply(this.vertices[i].position);}if(this.coords!==null){var absoluteSystem=JSM.CoordSystemToAbsoluteCoords(this.coords);absoluteSystem.origo=transformation.Apply(absoluteSystem.origo);absoluteSystem.e1=transformation.Apply(absoluteSystem.e1);absoluteSystem.e2=transformation.Apply(absoluteSystem.e2);absoluteSystem.e3=transformation.Apply(absoluteSystem.e3);this.coords=JSM.CoordSystemToDirectionVectors(absoluteSystem);}},GetCenter:function(){var boundingBox=this.GetBoundingBox();return JSM.MidCoord(boundingBox[0],boundingBox[1]);},GetBoundingBox:function(){var min=new JSM.Coord(JSM.Inf,JSM.Inf,JSM.Inf);var max=new JSM.Coord(-JSM.Inf,-JSM.Inf,-JSM.Inf);var i,coord;for(i=0;i<this.vertices.length;i++){coord=this.vertices[i].position;min.x=JSM.Minimum(min.x,coord.x);min.y=JSM.Minimum(min.y,coord.y);min.z=JSM.Minimum(min.z,coord.z);max.x=JSM.Maximum(max.x,coord.x);max.y=JSM.Maximum(max.y,coord.y);max.z=JSM.Maximum(max.z,coord.z);}return[min,max];},GetBoundingSphereRadius:function(){var center=this.GetCenter();var radius=0;var i,current;for(i=0;i<this.vertices.length;i++){current=JSM.CoordDistance(center,this.vertices[i].position);if(JSM.IsGreater(current,radius)){radius=current;}}return radius;},OffsetToOrigo:function(){var center=this.GetCenter();center=JSM.VectorMultiply(center,-1);var i;for(i=0;i<this.vertices.length;i++){this.vertices[i].position=JSM.CoordAdd(this.vertices[i].position,center);}},Merge:function(body){var oldVertexCount=this.vertices.length;var i,j;for(i=0;i<body.VertexCount();i++){this.vertices.push(body.GetVertex(i).Clone());}var newPolygon;for(i=0;i<body.PolygonCount();i++){newPolygon=body.GetPolygon(i).Clone();for(j=0;j<newPolygon.VertexIndexCount();j++){newPolygon.vertices[j]+=oldVertexCount;}this.polygons.push(newPolygon);}},Clear:function(){this.vertices=[];this.polygons=[];this.projection=null;this.coords=null;}};JSM.AddVertexToBody=function(body,x,y,z){body.AddVertex(new JSM.BodyVertex(new JSM.Coord(x,y,z)));};JSM.AddPolygonToBody=function(body,vertices){body.AddPolygon(new JSM.BodyPolygon(vertices));};JSM.CalculateBodyVertexToPolygon=function(body){var result=[];var i,j;for(i=0;i<body.VertexCount();i++){result[i]=[];}var polygon;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);for(j=0;j<polygon.VertexIndexCount();j++){result[polygon.GetVertexIndex(j)].push(i);}}return result;};JSM.CalculateBodyPolygonNormal=function(body,index){var polygon=body.GetPolygon(index);var count=polygon.VertexIndexCount();var normal=new JSM.Vector(0,0,0);if(count>=3){var i,currentIndex,nextIndex,current,next;for(i=0;i<count;i++){currentIndex=i;nextIndex=(i+1)%count;current=body.GetVertexPosition(polygon.GetVertexIndex(currentIndex));next=body.GetVertexPosition(polygon.GetVertexIndex(nextIndex));normal.x+=(current.y-next.y)*(current.z+next.z);normal.y+=(current.z-next.z)*(current.x+next.x);normal.z+=(current.x-next.x)*(current.y+next.y);}}var normalized=JSM.VectorNormalize(normal);return normalized;};JSM.CalculateBodyPolygonNormals=function(body){var result=[];var i;for(i=0;i<body.PolygonCount();i++){result.push(JSM.CalculateBodyPolygonNormal(body,i));}return result;};JSM.CalculateBodyVertexNormals=function(body){var result=[];var polygonNormals=JSM.CalculateBodyPolygonNormals(body);var vertexToPolygon=JSM.CalculateBodyVertexToPolygon(body);var i,j,k,polygon,normal;var average,count,neighbourPolygons,neighbourPolygon;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);result[i]=[];if(polygon.HasCurveGroup()){for(j=0;j<polygon.VertexIndexCount();j++){average=new JSM.Vector(0,0,0);count=0;neighbourPolygons=vertexToPolygon[polygon.GetVertexIndex(j)];for(k=0;k<neighbourPolygons.length;k++){neighbourPolygon=body.GetPolygon(neighbourPolygons[k]);if(neighbourPolygon.GetCurveGroup()===polygon.GetCurveGroup()){average=JSM.CoordAdd(average,polygonNormals[neighbourPolygons[k]]);count++;}}average=JSM.VectorMultiply(average,1/count);average=JSM.VectorNormalize(average);result[i].push(average);}}else{normal=polygonNormals[i];for(j=0;j<polygon.VertexIndexCount();j++){result[i].push(new JSM.Vector(normal.x,normal.y,normal.z));}}}return result;};JSM.MakeBodyInsideOut=function(body){var i,j,polygon,count,vertices;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);vertices=polygon.vertices.slice(0);count=vertices.length;polygon.vertices=[];for(j=0;j<count;j++){polygon.vertices.push(vertices[count-j-1]);}}};JSM.GetGaussianParameterToReachEpsilonAtValue=function(x,a,b,epsilon){return Math.sqrt(-(Math.pow(x-b,2)/(2*Math.log(epsilon/Math.abs(a)))));};JSM.GetGaussianValue=function(x,a,b,c){return a*Math.exp(-(Math.pow(x-b,2)/(2*Math.pow(c,2))));};JSM.SoftMoveBodyVertex=function(body,index,radius,direction,distance){var referenceCoord=body.GetVertex(index).position;var eps=0.00001;var a=distance;var b=0;var c=JSM.GetGaussianParameterToReachEpsilonAtValue(radius,a,b,eps);var i,x,currentDistance,newDistance,currentCoord;for(i=0;i<body.VertexCount();i++){currentDistance=JSM.CoordDistance(referenceCoord,body.GetVertex(i).position);if(JSM.IsGreater(currentDistance,radius)){continue;}x=currentDistance;newDistance=JSM.GetGaussianValue(x,distance,b,c);currentCoord=body.GetVertex(i).position;body.GetVertex(i).position=JSM.CoordOffset(currentCoord,direction,newDistance);}};JSM.CalculatePolygonCentroid=function(body,index){var polygon=body.GetPolygon(index);var count=polygon.VertexIndexCount();var result=new JSM.Coord();var i;for(i=0;i<count;i++){result=JSM.CoordAdd(result,body.GetVertexPosition(polygon.GetVertexIndex(i)));}result=JSM.VectorMultiply(result,1/count);return result;};JSM.TriangulateWithCentroids=function(body){var result=new JSM.Body();var i,j,vertCoord;for(i=0;i<body.VertexCount();i++){vertCoord=body.GetVertex(i).position;result.AddVertex(new JSM.BodyVertex(new JSM.Coord(vertCoord.x,vertCoord.y,vertCoord.z)));}var polygon,oldPolygon,vertexCount,curr,next,centroid;for(i=0;i<body.PolygonCount();i++){vertCoord=JSM.CalculatePolygonCentroid(body,i);centroid=result.VertexCount();result.AddVertex(new JSM.BodyVertex(new JSM.Coord(vertCoord.x,vertCoord.y,vertCoord.z)));oldPolygon=body.GetPolygon(i);vertexCount=oldPolygon.VertexIndexCount();for(j=0;j<vertexCount;j++){curr=oldPolygon.GetVertexIndex(j);next=oldPolygon.GetVertexIndex(j<vertexCount-1?j+1:0);polygon=new JSM.BodyPolygon([curr,next,centroid]);polygon.material=oldPolygon.material;polygon.curved=oldPolygon.curved;result.AddPolygon(polygon);}}return result;};JSM.Vert=function(){this.edges=[];this.pgons=[];};JSM.Edge=function(){this.vert1=-1;this.vert2=-1;this.pgon1=-1;this.pgon2=-1;};JSM.PolyEdge=function(){this.index=-1;this.reverse=false;};JSM.Pgon=function(){this.verts=[];this.pedges=[];};JSM.AdjacencyList=function(){this.verts=[];this.edges=[];this.pgons=[];};JSM.GetPolyEdgeStartVertex=function(polyEdge,adjacencyList){if(!polyEdge.reverse){return adjacencyList.edges[polyEdge.index].vert1;}else{return adjacencyList.edges[polyEdge.index].vert2;}};JSM.GetPolyEdgeEndVertex=function(polyEdge,adjacencyList){if(!polyEdge.reverse){return adjacencyList.edges[polyEdge.index].vert2;}else{return adjacencyList.edges[polyEdge.index].vert1;}};JSM.IsSolidBody=function(body){var adjacencyList=JSM.CalculateAdjacencyList(body);var i,edge;for(i=0;i<adjacencyList.edges.length;i++){edge=adjacencyList.edges[i];if(edge.pgon1===-1||edge.pgon2===-1){return false;}}return true;};JSM.CheckSolidBody=function(body){var adjacencyList=JSM.CalculateAdjacencyList(body);var i,j,edge,pedge,found,pgon1,pgon2,pgon1Reverse,pgon2Reverse;for(i=0;i<adjacencyList.edges.length;i++){edge=adjacencyList.edges[i];if(edge.pgon1===-1||edge.pgon2===-1){return false;}pgon1=adjacencyList.pgons[edge.pgon1];found=false;for(j=0;j<pgon1.pedges.length;j++){pedge=pgon1.pedges[j];if(pedge.index==i){pgon1Reverse=pedge.reverse;found=true;break;}}if(!found){return false;}pgon2=adjacencyList.pgons[edge.pgon2];found=false;for(j=0;j<pgon2.pedges.length;j++){pedge=pgon2.pedges[j];if(pedge.index==i){pgon2Reverse=pedge.reverse;found=true;break;}}if(!found){return false;}if(pgon1Reverse==pgon2Reverse){return false;}}return true;};JSM.CalculateAdjacencyList=function(body){var AddEdge=function(from,to,polygon){var pedge=new JSM.PolyEdge();var i,edge;for(i=0;i<adjacencyList.edges.length;i++){edge=adjacencyList.edges[i];if(edge.vert1===from&&edge.vert2===to){pedge.index=i;pedge.reverse=false;}else{if(edge.vert1===to&&edge.vert2===from){pedge.index=i;pedge.reverse=true;}}}if(pedge.index===-1){var newEdge=new JSM.Edge();newEdge.vert1=from;newEdge.vert2=to;newEdge.pgon1=polygon;newEdge.pgon2=-1;adjacencyList.edges.push(newEdge);pedge.index=adjacencyList.edges.length-1;pedge.reverse=false;}else{var currEdge=adjacencyList.edges[pedge.index];if(currEdge.pgon1===-1){currEdge.pgon1=polygon;}else{if(currEdge.pgon1!==polygon&&currEdge.pgon2===-1){currEdge.pgon2=polygon;}}}return pedge;};var adjacencyList=new JSM.AdjacencyList();var i,j;var vert,pgon;for(i=0;i<body.VertexCount();i++){vert=new JSM.Vert();adjacencyList.verts.push(vert);}var polygon,count,curr,next,pedge;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);pgon=new JSM.Pgon();count=polygon.VertexIndexCount();for(j=0;j<count;j++){curr=polygon.GetVertexIndex(j);next=polygon.GetVertexIndex(j<count-1?j+1:0);pedge=AddEdge(curr,next,i);pgon.verts.push(curr);pgon.pedges.push(pedge);adjacencyList.verts[curr].edges.push(pedge.index);adjacencyList.verts[curr].pgons.push(i);}adjacencyList.pgons.push(pgon);}return adjacencyList;};JSM.CatmullClarkSubdivisionOneIteration=function(body){var AddOriginalVertices=function(){var i,vertCoord;for(i=0;i<al.verts.length;i++){vertCoord=body.GetVertex(i).position;result.AddVertex(new JSM.BodyVertex(new JSM.Coord(vertCoord.x,vertCoord.y,vertCoord.z)));}};var AddPolygonVertices=function(){var i,j,pgon,pgonCoord;for(i=0;i<al.pgons.length;i++){pgon=al.pgons[i];pgonCoord=new JSM.Coord(0,0,0);for(j=0;j<pgon.verts.length;j++){vertCoord=body.GetVertex(pgon.verts[j]).position;pgonCoord=JSM.CoordAdd(pgonCoord,vertCoord);}pgonCoord=JSM.VectorMultiply(pgonCoord,1/pgon.verts.length);pgonVertices.push(result.AddVertex(new JSM.BodyVertex(pgonCoord)));}};var AddEdgeVertices=function(){var edgeVertexWeight=1/4;var i,j,edge,edgeCoord,pgonIndex;for(i=0;i<al.edges.length;i++){edge=al.edges[i];edgeCoord=new JSM.Coord(0,0,0);edgeCoord=JSM.CoordAdd(edgeCoord,JSM.VectorMultiply(body.GetVertex(edge.vert1).position,edgeVertexWeight));edgeCoord=JSM.CoordAdd(edgeCoord,JSM.VectorMultiply(body.GetVertex(edge.vert2).position,edgeVertexWeight));for(j=0;j<2;j++){pgonIndex=(j===0?edge.pgon1:edge.pgon2);if(pgonIndex===-1){pgonIndex=(j===0?edge.pgon2:edge.pgon1);}pgonCoord=result.GetVertex(pgonVertices[pgonIndex]).position;edgeCoord=JSM.CoordAdd(edgeCoord,JSM.VectorMultiply(pgonCoord,edgeVertexWeight));}edgeVertices.push(result.AddVertex(new JSM.BodyVertex(edgeCoord)));}};var MoveOriginalVertices=function(){var MoveVertex=function(f,r,n,vertCoord){vertCoord.x=(f.x+2*r.x+(n-3)*vertCoord.x)/n;vertCoord.y=(f.y+2*r.y+(n-3)*vertCoord.y)/n;vertCoord.z=(f.z+2*r.z+(n-3)*vertCoord.z)/n;};var edgeMidCoords=[];var edge,edgeCoord;for(i=0;i<al.edges.length;i++){edge=al.edges[i];edgeCoord=JSM.MidCoord(body.GetVertex(edge.vert1).position,body.GetVertex(edge.vert2).position);edgeMidCoords.push(edgeCoord);}var vert,vertCoord,currentVertCoord;var pgonVertexWeight,edgeMidCoordWeight;var i,j,f,r,n;for(i=0;i<al.verts.length;i++){vert=al.verts[i];f=new JSM.Coord(0,0,0);r=new JSM.Coord(0,0,0);pgonVertexWeight=1/vert.pgons.length;for(j=0;j<vert.pgons.length;j++){currentVertCoord=result.GetVertex(pgonVertices[vert.pgons[j]]).position;f=JSM.CoordAdd(f,JSM.VectorMultiply(currentVertCoord,pgonVertexWeight));}edgeMidCoordWeight=1/vert.edges.length;for(j=0;j<vert.edges.length;j++){edgeCoord=edgeMidCoords[vert.edges[j]];r=JSM.CoordAdd(r,JSM.VectorMultiply(edgeCoord,edgeMidCoordWeight));}n=vert.edges.length;vertCoord=result.GetVertex(i).position;MoveVertex(f,r,n,vertCoord);}};var AddNewPolygons=function(){var edgeCount,currentEdge,nextEdge;var centroid,currentEdgeVertex,originalVertex,nextEdgeVertex;var polygon,oldPolygon;for(i=0;i<al.pgons.length;i++){pgon=al.pgons[i];edgeCount=pgon.verts.length;for(j=0;j<edgeCount;j++){currentEdge=pgon.pedges[j];nextEdge=pgon.pedges[(j+1)%edgeCount];centroid=pgonVertices[i];currentEdgeVertex=edgeVertices[currentEdge.index];originalVertex=JSM.GetPolyEdgeStartVertex(nextEdge,al);nextEdgeVertex=edgeVertices[nextEdge.index];polygon=new JSM.BodyPolygon([centroid,currentEdgeVertex,originalVertex,nextEdgeVertex]);oldPolygon=body.GetPolygon(i);polygon.material=oldPolygon.material;polygon.curved=oldPolygon.curved;result.AddPolygon(polygon);}}};var result=new JSM.Body();var al=JSM.CalculateAdjacencyList(body);AddOriginalVertices();var pgonVertices=[];AddPolygonVertices();var edgeVertices=[];AddEdgeVertices();MoveOriginalVertices();AddNewPolygons();return result;};JSM.CatmullClarkSubdivision=function(body,iterations){var result=body;var i;for(i=0;i<iterations;i++){result=JSM.CatmullClarkSubdivisionOneIteration(result);}return result;};JSM.CutPolygonByPlane=function(polygon,plane,indexTable){var AddOriginalVertex=function(index){rawResult.push(new JSM.Coord(vertex.x,vertex.y,vertex.z));rawIndexTable.push(index);};var AddIntersectionVertex=function(from,to){direction=JSM.VectorNormalize(JSM.CoordSub(polygon[to],polygon[from]));line=new JSM.Line(polygon[from],direction);intersection=JSM.LinePlaneIntersection(line,plane);rawResult.push(new JSM.Coord(intersection.x,intersection.y,intersection.z));rawIndexTable.push(-1);};var hasIndexTable=(indexTable!==undefined&&indexTable!==null);var count=polygon.length;var result=[];var front=[];var needCut=false;var i,position,vertex;for(i=0;i<count;i++){vertex=polygon[i];position=JSM.CoordPlanePosition(vertex,plane);front.push(position!=="CoordAtBackOfPlane");if(i>0&&front[i-1]!==front[i]){needCut=true;}}if(!needCut){if(front[0]===false){return result;}for(i=0;i<count;i++){vertex=polygon[i];result.push(new JSM.Coord(vertex.x,vertex.y,vertex.z));if(hasIndexTable){indexTable.push(i);}}return result;}var rawResult=[];var rawIndexTable=[];var from,to;var direction,line,intersection;for(i=0;i<count;i++){from=i-1;to=i;if(i===0){from=count-1;}vertex=polygon[to];if(front[to]){if(!front[from]){AddIntersectionVertex(from,to);}AddOriginalVertex(to);}else{if(front[from]){AddIntersectionVertex(from,to);}}}var currentVertex;var currentIndex;var lastVertex;var lastIndex;for(i=0;i<rawResult.length;i++){var currentVertex=rawResult[i];var lastVertex=result[result.length-1];if(i==0||!JSM.CoordIsEqual(lastVertex,currentVertex)){result.push(new JSM.Coord(currentVertex.x,currentVertex.y,currentVertex.z));if(hasIndexTable){currentIndex=rawIndexTable[i];indexTable.push(currentIndex);}}else{if(hasIndexTable){currentIndex=rawIndexTable[i];lastIndex=rawIndexTable[i-1];if(currentIndex!==-1){indexTable[indexTable.length-1]=currentIndex;}else{if(lastIndex!==-1){indexTable[indexTable.length-1]=lastIndex;}}}}}return result;};JSM.CutBodyByPlane=function(body,plane){var GetInsertedVertexIndex=function(vertex){var index=-1;var i;for(i=originalVertexCount;i<result.VertexCount();i++){if(JSM.CoordIsEqual(result.GetVertexPosition(i),vertex)){index=i;break;}}if(index===-1){index=result.AddVertex(new JSM.BodyVertex(new JSM.Coord(vertex.x,vertex.y,vertex.z)));}return index;};var result=new JSM.Body();var cuttedPolygons=[];var cuttedIndexTables=[];var remainsVertex=[];var originalOldToNewIndex=[];var i,j,polygon,polygon3D,vertexPosition;var cuttedPolygon,indexTable;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);polygon3D=[];for(j=0;j<polygon.VertexIndexCount();j++){vertexPosition=body.GetVertexPosition(polygon.GetVertexIndex(j));polygon3D.push(new JSM.Coord(vertexPosition.x,vertexPosition.y,vertexPosition.z));}indexTable=[];cuttedPolygon=JSM.CutPolygonByPlane(polygon3D,plane,indexTable);for(j=0;j<indexTable.length;j++){if(indexTable[j]!==-1){remainsVertex[polygon.GetVertexIndex(indexTable[j])]=true;}}cuttedPolygons.push(cuttedPolygon);cuttedIndexTables.push(indexTable);}var vertex;for(i=0;i<body.VertexCount();i++){if(remainsVertex[i]){vertex=body.GetVertexPosition(i);originalOldToNewIndex[i]=result.AddVertex(new JSM.BodyVertex(new JSM.Coord(vertex.x,vertex.y,vertex.z)));}}var originalVertexCount=result.VertexCount();var newPolygon,newPolygonVertices;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);cuttedPolygon=cuttedPolygons[i];indexTable=cuttedIndexTables[i];if(indexTable.length==0){continue;}newPolygonVertices=[];for(j=0;j<indexTable.length;j++){if(indexTable[j]!==-1){newPolygonVertices.push(originalOldToNewIndex[polygon.GetVertexIndex(indexTable[j])]);}else{vertex=cuttedPolygon[j];newPolygonVertices.push(GetInsertedVertexIndex(vertex));}}newPolygon=new JSM.BodyPolygon(newPolygonVertices);newPolygon.InheritAttributes(polygon);result.AddPolygon(newPolygon);}return result;};JSM.CalculatePlanarTextureCoord=function(coord,system){var result=new JSM.Coord2D();var e1=JSM.VectorNormalize(system.e1);var e2=JSM.VectorNormalize(system.e2);var e3=JSM.VectorCross(system.e1,system.e2);var xyPlane=JSM.GetPlaneFromCoordAndDirection(system.origo,e3);var xzPlane=JSM.GetPlaneFromCoordAndDirection(system.origo,e2);var yzPlane=JSM.GetPlaneFromCoordAndDirection(system.origo,e1);var projected=JSM.ProjectCoordToPlane(coord,xyPlane);result.x=JSM.CoordPlaneSignedDistance(projected,yzPlane);result.y=JSM.CoordPlaneSignedDistance(projected,xzPlane);return result;};JSM.CalculatePolygonPlanarTextureCoords=function(body,index){var result=[];var polygon=body.GetPolygon(index);var system=body.GetTextureProjectionCoords();var i,coord;for(i=0;i<polygon.VertexIndexCount();i++){coord=body.GetVertexPosition(polygon.GetVertexIndex(i));result.push(JSM.CalculatePlanarTextureCoord(coord,system));}return result;};JSM.CalculateCubicTextureCoord=function(coord,normal,system){var result=new JSM.Coord2D();var e1=JSM.VectorNormalize(system.e1);var e2=JSM.VectorNormalize(system.e2);var e3=JSM.VectorNormalize(system.e3);var correctPlane=-1;var maxProduct=0;var i,currentDirection,product;for(i=0;i<3;i++){if(i===0){currentDirection=e1;}else{if(i===1){currentDirection=e2;}else{if(i===2){currentDirection=e3;}}}product=Math.abs(JSM.VectorDot(normal,currentDirection));if(JSM.IsGreater(product,maxProduct)){correctPlane=i;maxProduct=product;}}if(correctPlane===-1){return result;}var planeSystem=null;if(correctPlane===0){planeSystem=new JSM.CoordSystem(system.origo,e2,e3,null);}else{if(correctPlane===1){planeSystem=new JSM.CoordSystem(system.origo,e1,e3,null);}else{if(correctPlane===2){planeSystem=new JSM.CoordSystem(system.origo,e1,e2,null);}}}if(planeSystem===null){return result;}return JSM.CalculatePlanarTextureCoord(coord,planeSystem);};JSM.CalculatePolygonCubicTextureCoords=function(body,index,normal){var result=[];var polygon=body.GetPolygon(index);var system=body.GetTextureProjectionCoords();var i,coord;for(i=0;i<polygon.VertexIndexCount();i++){coord=body.GetVertexPosition(polygon.GetVertexIndex(i));result.push(JSM.CalculateCubicTextureCoord(coord,normal,system));}return result;};JSM.CalculateCylindricalTextureCoord=function(coord,normal,system){var result=new JSM.Coord2D();var e3Direction=JSM.VectorNormalize(system.e3);if(JSM.VectorsAreCollinear(e3Direction,normal)){result=JSM.CalculateCubicTextureCoord(coord,normal,system);return[result,0];}var baseLine=new JSM.Line(system.origo,e3Direction);var projectedCoord=JSM.ProjectCoordToLine(coord,baseLine);var projectedDistance=JSM.CoordSignedDistance(system.origo,projectedCoord,system.e3);var e1Direction=JSM.VectorNormalize(system.e1);var coordDirection=JSM.CoordSub(coord,projectedCoord);var angle=JSM.GetVectorsFullAngle(e1Direction,coordDirection,e3Direction);var radius=JSM.VectorLength(system.e1);result.x=angle*radius;result.y=projectedDistance;return[result,angle];};JSM.CalculatePolygonCylindricalTextureCoords=function(body,index,normal){var result=[];var angles=[];var polygon=body.GetPolygon(index);var system=body.GetTextureProjectionCoords();var angle=0;var i,j,coord,textureValues;for(i=0;i<polygon.VertexIndexCount();i++){coord=body.GetVertexPosition(polygon.GetVertexIndex(i));textureValues=JSM.CalculateCylindricalTextureCoord(coord,normal,system);result.push(textureValues[0]);angles.push(textureValues[1]);}var e3Direction=JSM.VectorNormalize(system.e3);if(JSM.VectorsAreCollinear(e3Direction,normal)){return result;}var needRepair=false;for(i=0;i<angles.length;i++){for(j=i+1;j<angles.length;j++){if(JSM.IsGreater(Math.abs(angles[i]-angles[j]),Math.PI)){needRepair=true;break;}}if(needRepair){break;}}if(needRepair){var radius=JSM.VectorLength(system.e1);for(i=0;i<angles.length;i++){if(JSM.IsLower(angles[i],Math.PI)){result[i].x=radius*(angles[i]+2*Math.PI);}}}return result;};JSM.CalculatePolygonTextureCoords=function(body,polygonNormals,index){var result=[];var projection=body.GetTextureProjectionType();var normal=polygonNormals[index];if(projection==="Planar"){result=JSM.CalculatePolygonPlanarTextureCoords(body,index);}else{if(projection==="Cubic"){result=JSM.CalculatePolygonCubicTextureCoords(body,index,normal);}else{if(projection==="Cylindrical"){result=JSM.CalculatePolygonCylindricalTextureCoords(body,index,normal);}}}return result;};JSM.CalculateBodyTextureCoords=function(body){var result=[];var polygonNormals=JSM.CalculateBodyPolygonNormals(body);var i,j,polygon,coord;for(i=0;i<body.PolygonCount();i++){result[i]=JSM.CalculatePolygonTextureCoords(body,polygonNormals,i);}return result;};JSM.Model=function(){this.bodies=[];};JSM.Model.prototype={AddBody:function(body){this.bodies.push(body);return this.bodies.length-1;},GetBody:function(index){return this.bodies[index];},BodyCount:function(){return this.bodies.length;}};JSM.HexColorToRGBColor=function(hexColor){var hexString=hexColor.toString(16);while(hexString.length<6){hexString="0"+hexString;}var r=parseInt(hexString.substr(0,2),16);var g=parseInt(hexString.substr(2,2),16);var b=parseInt(hexString.substr(4,2),16);return[r,g,b];};JSM.Material=function(ambient,diffuse,opacity,texture,textureWidth,textureHeight){this.ambient=JSM.ValueOrDefault(ambient,52224);this.diffuse=JSM.ValueOrDefault(diffuse,52224);this.opacity=JSM.ValueOrDefault(opacity,1);this.texture=JSM.ValueOrDefault(texture,null);this.textureWidth=JSM.ValueOrDefault(textureWidth,1);this.textureHeight=JSM.ValueOrDefault(textureHeight,1);};JSM.Material.prototype={};JSM.Materials=function(){this.materials=[];this.defaultMaterial=new JSM.Material();};JSM.Materials.prototype={AddMaterial:function(material){this.materials.push(material);},GetMaterial:function(index){if(index<0||index>=this.materials.length){return this.defaultMaterial;}return this.materials[index];},GetDefaultMaterial:function(index){return this.defaultMaterial;},Count:function(){return this.materials.length;},Clone:function(){return new JSM.Material(this.ambient,this.diffuse,this.opacity,this.texture,this.textureWidth,this.textureHeight);}};JSM.GenerateCuboid=function(xSize,ySize,zSize){var result=new JSM.Body();var x=xSize/2;var y=ySize/2;var z=zSize/2;result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-x,-y,-z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(x,-y,-z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(x,-y,z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-x,-y,z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-x,y,-z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(x,y,-z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(x,y,z)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-x,y,z)));result.AddPolygon(new JSM.BodyPolygon([0,1,2,3]));result.AddPolygon(new JSM.BodyPolygon([1,5,6,2]));result.AddPolygon(new JSM.BodyPolygon([5,4,7,6]));result.AddPolygon(new JSM.BodyPolygon([4,0,3,7]));result.AddPolygon(new JSM.BodyPolygon([0,4,5,1]));result.AddPolygon(new JSM.BodyPolygon([3,2,6,7]));result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(-x,-y,-z),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateSphere=function(radius,segmentation,isCurved){var result=new JSM.Body();var segments=segmentation;var circle=segments*2;var topIndex=result.AddVertex(new JSM.BodyVertex(JSM.SphericalToCartesian(radius,0,0)));var step=Math.PI/segments;var phi=step;var i,j,theta;for(i=1;i<segments;i++){theta=0;for(j=0;j<circle;j++){result.AddVertex(new JSM.BodyVertex(JSM.SphericalToCartesian(radius,phi,theta)));theta+=step;}phi+=step;}var bottomIndex=result.AddVertex(new JSM.BodyVertex(JSM.SphericalToCartesian(-radius,0,0)));var offset,current,next,top,ntop,polygon;for(i=1;i<=segments;i++){if(i===1){offset=1;for(j=0;j<circle;j++){current=offset+j;next=current+1;if(j===circle-1){next=offset;}polygon=new JSM.BodyPolygon([current,next,topIndex]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}}else{if(i<segments){offset=(i-1)*circle+1;for(j=0;j<circle;j++){current=offset+j;next=current+1;top=current-circle;ntop=top+1;if(j===circle-1){next=offset;ntop=offset-circle;}polygon=new JSM.BodyPolygon([current,next,ntop,top]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}}else{if(i===segments){offset=(i-2)*circle+1;for(j=0;j<circle;j++){current=offset+j;next=current+1;if(j===circle-1){next=offset;}polygon=new JSM.BodyPolygon([current,bottomIndex,next]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}}}}}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateTriangulatedSphere=function(radius,iterations,isCurved){var GenerateIcosahedron=function(radius){var result=new JSM.Body();var a=1;var b=0;var c=(1+Math.sqrt(5))/2;JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,+b,+a,-c);JSM.AddVertexToBody(result,+b,-a,+c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,+b);JSM.AddVertexToBody(result,-a,+c,+b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,+b,+a);JSM.AddVertexToBody(result,+c,+b,-a);JSM.AddVertexToBody(result,-c,+b,-a);JSM.AddPolygonToBody(result,[0,2,8]);JSM.AddPolygonToBody(result,[0,4,6]);JSM.AddPolygonToBody(result,[0,6,9]);JSM.AddPolygonToBody(result,[0,8,4]);JSM.AddPolygonToBody(result,[0,9,2]);JSM.AddPolygonToBody(result,[1,3,11]);JSM.AddPolygonToBody(result,[1,4,10]);JSM.AddPolygonToBody(result,[1,6,4]);JSM.AddPolygonToBody(result,[1,10,3]);JSM.AddPolygonToBody(result,[1,11,6]);JSM.AddPolygonToBody(result,[2,5,8]);JSM.AddPolygonToBody(result,[2,7,5]);JSM.AddPolygonToBody(result,[2,9,7]);JSM.AddPolygonToBody(result,[3,5,7]);JSM.AddPolygonToBody(result,[3,7,11]);JSM.AddPolygonToBody(result,[3,10,5]);JSM.AddPolygonToBody(result,[4,8,10]);JSM.AddPolygonToBody(result,[6,11,9]);JSM.AddPolygonToBody(result,[5,10,8]);JSM.AddPolygonToBody(result,[7,9,11]);return result;};var result=GenerateIcosahedron();var currentRadius=JSM.VectorLength(result.GetVertexPosition(0));var scale=radius/currentRadius;var i,j,vertex;for(i=0;i<result.VertexCount();i++){vertex=result.GetVertex(i);vertex.SetPosition(JSM.VectorMultiply(vertex.GetPosition(),scale));}var iteration,oldVertexCoord,oldBody,adjacencyList;var currentEdge,edgeVertexIndices;var currentPgon,polygonVertexIndices;for(iteration=0;iteration<iterations;iteration++){oldBody=result;result=new JSM.Body();adjacencyList=JSM.CalculateAdjacencyList(oldBody);for(i=0;i<adjacencyList.verts.length;i++){oldVertexCoord=oldBody.GetVertexPosition(i);JSM.AddVertexToBody(result,oldVertexCoord.x,oldVertexCoord.y,oldVertexCoord.z);}edgeVertexIndices=[];for(i=0;i<adjacencyList.edges.length;i++){currentEdge=adjacencyList.edges[i];midcoord=JSM.MidCoord(oldBody.GetVertexPosition(currentEdge.vert1),oldBody.GetVertexPosition(currentEdge.vert2));edgeCoord=JSM.VectorMultiply(JSM.VectorNormalize(midcoord),radius);edgeVertexIndices.push(result.AddVertex(new JSM.BodyVertex(edgeCoord)));}for(i=0;i<adjacencyList.pgons.length;i++){currentPgon=adjacencyList.pgons[i];polygonVertexIndices=[];for(j=0;j<currentPgon.pedges.length;j++){currentPolyEdge=currentPgon.pedges[j];polygonVertexIndices.push(JSM.GetPolyEdgeStartVertex(currentPolyEdge,adjacencyList));polygonVertexIndices.push(edgeVertexIndices[currentPolyEdge.index]);}JSM.AddPolygonToBody(result,[polygonVertexIndices[0],polygonVertexIndices[1],polygonVertexIndices[5]]);JSM.AddPolygonToBody(result,[polygonVertexIndices[1],polygonVertexIndices[2],polygonVertexIndices[3]]);JSM.AddPolygonToBody(result,[polygonVertexIndices[3],polygonVertexIndices[4],polygonVertexIndices[5]]);JSM.AddPolygonToBody(result,[polygonVertexIndices[1],polygonVertexIndices[3],polygonVertexIndices[5]]);}}if(isCurved){for(i=0;i<result.PolygonCount();i++){result.GetPolygon(i).SetCurveGroup(0);}}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateCylinder=function(radius,height,segmentation,withTopAndBottom,isCurved){var result=new JSM.Body();var segments=segmentation;var theta=2*Math.PI;var step=2*Math.PI/segments;var i;for(i=0;i<segments;i++){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(radius,height/2,theta)));result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(radius,-height/2,theta)));theta-=step;}var current,next,polygon;for(i=0;i<segments;i++){current=2*i;next=current+2;if(i===segments-1){next=0;}polygon=new JSM.BodyPolygon([current,next,next+1,current+1]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}if(withTopAndBottom){var topPolygon=new JSM.BodyPolygon();var bottomPolygon=new JSM.BodyPolygon();for(i=0;i<segments;i++){topPolygon.AddVertexIndex(2*(segments-i-1));bottomPolygon.AddVertexIndex(2*i+1);}result.AddPolygon(topPolygon);result.AddPolygon(bottomPolygon);}result.SetTextureProjectionType("Cylindrical");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,-(height/2)),new JSM.Coord(radius,0,0),new JSM.Coord(0,radius,0),new JSM.Coord(0,0,1)));return result;};JSM.GeneratePie=function(radius,height,angle,segmentation,withTopAndBottom,isCurved){var result=new JSM.Body();var segments=segmentation;var theta=angle;var step=angle/(segments-1);var i;result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(0,height/2,0)));result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(0,-height/2,0)));for(i=0;i<segments;i++){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(radius,height/2,theta)));result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(radius,-height/2,theta)));theta-=step;}var current,next,polygon;for(i=0;i<=segments;i++){current=2*i;next=current+2;if(i===segments){next=0;}polygon=new JSM.BodyPolygon([current,next,next+1,current+1]);if(isCurved&&i>0&&i<segments){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}if(withTopAndBottom){var topPolygon=new JSM.BodyPolygon();var bottomPolygon=new JSM.BodyPolygon();for(i=0;i<=segments;i++){topPolygon.AddVertexIndex(2*(segments-i));bottomPolygon.AddVertexIndex(2*i+1);}result.AddPolygon(topPolygon);result.AddPolygon(bottomPolygon);}result.SetTextureProjectionType("Cylindrical");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,-(height/2)),new JSM.Coord(radius,0,0),new JSM.Coord(0,radius,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateCone=function(topRadius,bottomRadius,height,segmentation,withTopAndBottom,isCurved){var result=new JSM.Body();var segments=segmentation;var topDegenerated=(JSM.IsZero(topRadius));var bottomDegenerated=(JSM.IsZero(bottomRadius));var theta=2*Math.PI;var step=2*Math.PI/segments;if(topDegenerated){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(0,height/2,0)));}var i;for(i=0;i<segments;i++){if(!topDegenerated){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(topRadius,height/2,theta)));}if(!bottomDegenerated){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(bottomRadius,-height/2,theta)));}theta-=step;}if(bottomDegenerated){result.AddVertex(new JSM.BodyVertex(JSM.CylindricalToCartesian(0,-height/2,0)));}var current,next,polygon;for(i=0;i<segments;i++){if(topDegenerated){current=i+1;next=current+1;if(i===segments-1){next=1;}polygon=new JSM.BodyPolygon([0,next,current]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}else{if(bottomDegenerated){current=i;next=current+1;if(i===segments-1){next=0;}polygon=new JSM.BodyPolygon([current,next,segments]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}else{current=2*i;next=current+2;if(i===segments-1){next=0;}polygon=new JSM.BodyPolygon([current,next,next+1,current+1]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}}}var topPolygon,bottomPolygon;if(withTopAndBottom){if(topDegenerated){bottomPolygon=new JSM.BodyPolygon();for(i=0;i<segments;i++){bottomPolygon.AddVertexIndex(i+1);}result.AddPolygon(bottomPolygon);}else{if(bottomDegenerated){topPolygon=new JSM.BodyPolygon();for(i=0;i<segments;i++){topPolygon.AddVertexIndex(segments-i-1);}result.AddPolygon(topPolygon);}else{topPolygon=new JSM.BodyPolygon();bottomPolygon=new JSM.BodyPolygon();for(i=0;i<segments;i++){topPolygon.AddVertexIndex(2*(segments-i-1));bottomPolygon.AddVertexIndex(2*i+1);}result.AddPolygon(topPolygon);result.AddPolygon(bottomPolygon);}}}var avgRadius=(topRadius+bottomRadius)/2;result.SetTextureProjectionType("Cylindrical");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,-(height/2)),new JSM.Coord(avgRadius,0,0),new JSM.Coord(0,avgRadius,0),new JSM.Coord(0,0,1)));return result;};JSM.GeneratePrism=function(basePolygon,direction,height,withTopAndBottom){var result=new JSM.Body();var count=basePolygon.length;var i;for(i=0;i<count;i++){result.AddVertex(new JSM.BodyVertex(basePolygon[i]));result.AddVertex(new JSM.BodyVertex(JSM.CoordOffset(basePolygon[i],direction,height)));}var current,next;for(i=0;i<count;i++){current=2*i;next=current+2;if(i===count-1){next=0;}result.AddPolygon(new JSM.BodyPolygon([current,next,next+1,current+1]));}if(withTopAndBottom){var topPolygon=new JSM.BodyPolygon();var bottomPolygon=new JSM.BodyPolygon();for(i=0;i<count;i++){topPolygon.AddVertexIndex(2*i+1);bottomPolygon.AddVertexIndex(2*(count-i-1));}result.AddPolygon(topPolygon);result.AddPolygon(bottomPolygon);}var firstDirection=JSM.VectorNormalize(JSM.CoordSub(basePolygon[1],basePolygon[0]));var origo=new JSM.Coord(basePolygon[0].x,basePolygon[0].y,basePolygon[0].z);var e3=JSM.VectorNormalize(direction);var e2=JSM.VectorCross(e3,firstDirection);var e1=JSM.VectorCross(e2,e3);result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(origo,e1,e2,e3));return result;};JSM.GeneratePrismShell=function(basePolygon,direction,height,width,withTopAndBottom){var result=new JSM.Body();var count=basePolygon.length;var i;for(i=0;i<count;i++){result.AddVertex(new JSM.BodyVertex(basePolygon[i]));}var innerBasePolygon=JSM.OffsetPolygonContour(new JSM.Polygon(basePolygon),width).vertices;for(i=0;i<count;i++){result.AddVertex(new JSM.BodyVertex(innerBasePolygon[i]));}var offseted;for(i=0;i<count;i++){offseted=JSM.CoordOffset(basePolygon[i],direction,height);result.AddVertex(new JSM.BodyVertex(offseted));}for(i=0;i<count;i++){offseted=JSM.CoordOffset(innerBasePolygon[i],direction,height);result.AddVertex(new JSM.BodyVertex(offseted));}var curr,next,top,ntop;for(i=0;i<count;i++){curr=i;next=curr+1;top=curr+2*count;ntop=top+1;if(i===count-1){next=0;ntop=2*count;}result.AddPolygon(new JSM.BodyPolygon([curr,next,ntop,top]));result.AddPolygon(new JSM.BodyPolygon([curr+count,top+count,ntop+count,next+count]));}if(withTopAndBottom){for(i=0;i<count;i++){curr=i;next=curr+1;top=i+count;ntop=top+1;if(i===count-1){next=0;ntop=count;}result.AddPolygon(new JSM.BodyPolygon([curr,top,ntop,next]));result.AddPolygon(new JSM.BodyPolygon([curr+2*count,next+2*count,ntop+2*count,top+2*count]));}}var firstDirection=JSM.VectorNormalize(JSM.CoordSub(basePolygon[1],basePolygon[0]));var origo=new JSM.Coord(basePolygon[0].x,basePolygon[0].y,basePolygon[0].z);var e3=JSM.VectorNormalize(direction);var e2=JSM.VectorCross(e3,firstDirection);var e1=JSM.VectorCross(e2,e3);result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(origo,e1,e2,e3));return result;};JSM.GenerateCylinderShell=function(radius,height,width,segmentation,withTopAndBottom,isCurved){var GenerateCircle=function(radius,segmentation,bottom){var result=[];var step=2*Math.PI/segmentation;var theta,cartesian;var i=0;for(i=0;i<segmentation;i++){theta=i*step;cartesian=JSM.PolarToCartesian(radius,theta);result.push(new JSM.Coord(cartesian.x,cartesian.y,bottom));}return result;};var normal=new JSM.Vector(0,0,1);var circle=GenerateCircle(radius,segmentation,-height/2);var result=JSM.GeneratePrismShell(circle,normal,height,width,withTopAndBottom);var i;if(isCurved){for(i=0;i<segmentation;i++){result.GetPolygon(2*i).SetCurveGroup(0);result.GetPolygon(2*i+1).SetCurveGroup(0);}}return result;};JSM.GenerateLineShell=function(basePolyLine,direction,height,width,withStartAndEnd,withTopAndBottom){var result=new JSM.Body();var count=basePolyLine.length;var angles=[];var i,prev,curr,next;var prevDir,nextDir,angle;for(i=0;i<count;i++){if(i===0||i===count-1){angle=Math.PI/2;}else{prev=i-1;curr=i;next=i+1;nextDir=JSM.CoordSub(basePolyLine[next],basePolyLine[curr]);prevDir=JSM.CoordSub(basePolyLine[prev],basePolyLine[curr]);angle=JSM.GetVectorsAngle(nextDir,prevDir)/2;if(JSM.CoordTurnType(basePolyLine[prev],basePolyLine[curr],basePolyLine[next],direction)==="Clockwise"){angle=Math.PI-angle;}}angles.push(angle);}var innerBasePolyLine=[];var distance,innerCoord,offsetDirection;for(i=0;i<count;i++){curr=i;if(i===count-1){offsetDirection=JSM.CoordSub(basePolyLine[curr-1],basePolyLine[curr]);}else{next=(i+1)%count;offsetDirection=JSM.CoordSub(basePolyLine[curr],basePolyLine[next]);}angle=angles[curr];distance=width/Math.sin(angle);innerCoord=JSM.CoordOffset(basePolyLine[curr],offsetDirection,distance);innerCoord=JSM.CoordRotate(innerCoord,direction,-(Math.PI-angle),basePolyLine[curr]);innerBasePolyLine.push(innerCoord);}for(i=0;i<count;i++){result.AddVertex(new JSM.BodyVertex(basePolyLine[i]));}for(i=0;i<count;i++){result.AddVertex(new JSM.BodyVertex(innerBasePolyLine[i]));}var offseted;for(i=0;i<count;i++){offseted=JSM.CoordOffset(basePolyLine[i],direction,height);result.AddVertex(new JSM.BodyVertex(offseted));}for(i=0;i<count;i++){offseted=JSM.CoordOffset(innerBasePolyLine[i],direction,height);result.AddVertex(new JSM.BodyVertex(offseted));}var top,ntop;for(i=0;i<count-1;i++){curr=i;next=curr+1;top=curr+2*count;ntop=top+1;result.AddPolygon(new JSM.BodyPolygon([curr,next,ntop,top]));result.AddPolygon(new JSM.BodyPolygon([curr+count,top+count,ntop+count,next+count]));}if(withStartAndEnd){curr=0;next=curr+count;top=curr+2*count;ntop=curr+3*count;result.AddPolygon(new JSM.BodyPolygon([curr,top,ntop,next]));curr=count-1;next=curr+count;top=curr+2*count;ntop=curr+3*count;result.AddPolygon(new JSM.BodyPolygon([curr,next,ntop,top]));}if(withTopAndBottom){for(i=0;i<count-1;i++){curr=i;next=curr+1;top=i+count;ntop=top+1;result.AddPolygon(new JSM.BodyPolygon([curr,top,ntop,next]));result.AddPolygon(new JSM.BodyPolygon([curr+2*count,next+2*count,ntop+2*count,top+2*count]));}}var firstDirection=JSM.VectorNormalize(JSM.CoordSub(basePolyLine[1],basePolyLine[0]));var origo=new JSM.Coord(basePolyLine[0].x,basePolyLine[0].y,basePolyLine[0].z);var e3=JSM.VectorNormalize(direction);var e2=JSM.VectorCross(e3,firstDirection);var e1=JSM.VectorCross(e2,e3);result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(origo,e1,e2,e3));return result;};JSM.GenerateTorus=function(outerRadius,innerRadius,outerSegmentation,innerSegmentation,isCurved){var result=new JSM.Body();var theta=2*Math.PI;var step=2*Math.PI/innerSegmentation;var circle=[];var i,coord2D,coord;for(i=0;i<innerSegmentation;i++){coord2D=JSM.PolarToCartesian(innerRadius,theta);coord=new JSM.Coord(coord2D.x+outerRadius,0,coord2D.y);circle.push(coord);theta-=step;}var axisDir=new JSM.Coord(0,0,1);var origo=new JSM.Coord(0,0,0);step=(2*Math.PI)/outerSegmentation;var j,rotated;for(i=0;i<outerSegmentation;i++){for(j=0;j<innerSegmentation;j++){rotated=JSM.CoordRotate(circle[j],axisDir,i*step,origo);result.AddVertex(new JSM.BodyVertex(rotated));}}var polygon,current,top,next,ntop,polygon;for(i=0;i<outerSegmentation;i++){polygon=new JSM.BodyPolygon();for(j=0;j<innerSegmentation;j++){current=i*innerSegmentation+j;next=current+innerSegmentation;top=current+1;ntop=next+1;if(j===innerSegmentation-1){top=(i*innerSegmentation);ntop=(i+1)*innerSegmentation;}if(i===outerSegmentation-1){next=j;ntop=j+1;if(j===innerSegmentation-1){ntop=0;}}polygon=new JSM.BodyPolygon([current,next,ntop,top]);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GeneratePolyTorus=function(basePolygon,outerRadius,outerSegmentation,isCurved){var result=new JSM.Body();var innerSegmentation=basePolygon.length;var theta=2*Math.PI;var step=2*Math.PI/innerSegmentation;var circle=[];var i,coord2D,coord;for(i=0;i<innerSegmentation;i++){coord2D=basePolygon[i];coord=new JSM.Coord(coord2D.x+outerRadius,0,coord2D.y);circle.push(coord);theta-=step;}var axisDir=new JSM.Coord(0,0,1);var origo=new JSM.Coord(0,0,0);step=(2*Math.PI)/outerSegmentation;var j,rotated;for(i=0;i<outerSegmentation;i++){for(j=0;j<innerSegmentation;j++){rotated=JSM.CoordRotate(circle[j],axisDir,i*step,origo);result.AddVertex(new JSM.BodyVertex(rotated));}}var polygon,current,top,next,ntop,polygon;for(i=0;i<outerSegmentation;i++){polygon=new JSM.BodyPolygon();for(j=0;j<innerSegmentation;j++){current=i*innerSegmentation+j;next=current+innerSegmentation;top=current+1;ntop=next+1;if(j===innerSegmentation-1){top=(i*innerSegmentation);ntop=(i+1)*innerSegmentation;}if(i===outerSegmentation-1){next=j;ntop=j+1;if(j===innerSegmentation-1){ntop=0;}}polygon=new JSM.BodyPolygon([current,next,ntop,top]);if(isCurved){polygon.SetCurveGroup(j);}result.AddPolygon(polygon);}}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GetLineSegmentation=function(begin,end,segmentation,coords){var direction=JSM.CoordSub(end,begin);var length=JSM.CoordDistance(begin,end);var step=length/segmentation;var distance=0;var i;for(i=0;i<=segmentation;i++){coords.push(JSM.CoordOffset(begin,direction,distance));distance+=step;}};JSM.GetRuledMesh=function(aCoords,bCoords,segmentation,vertices,polygons){if(aCoords.length!==bCoords.length){return;}var lineSegmentation=aCoords.length-1;var meshSegmentation=segmentation;var directions=[];var lengths=[];var i,j;for(i=0;i<=lineSegmentation;i++){directions.push(JSM.CoordSub(bCoords[i],aCoords[i]));lengths.push(JSM.CoordDistance(aCoords[i],bCoords[i]));}var step,coord;for(i=0;i<=lineSegmentation;i++){step=lengths[i]/meshSegmentation;for(j=0;j<=meshSegmentation;j++){coord=JSM.CoordOffset(aCoords[i],directions[i],step*j);vertices.push(coord);}}var current,top,next,ntop,polygon;for(i=0;i<lineSegmentation;i++){for(j=0;j<meshSegmentation;j++){current=i*(meshSegmentation+1)+j;top=current+meshSegmentation+1;next=current+1;ntop=top+1;polygon=[current,next,ntop,top];polygons.push(polygon);}}};JSM.GenerateRuledFromSectors=function(aSector,bSector,lineSegmentation,meshSegmentation,isCurved){var result=new JSM.Body();var aCoords=[];var bCoords=[];JSM.GetLineSegmentation(aSector.beg,aSector.end,lineSegmentation,aCoords);JSM.GetLineSegmentation(bSector.beg,bSector.end,lineSegmentation,bCoords);var vertices=[];var polygons=[];JSM.GetRuledMesh(aCoords,bCoords,meshSegmentation,vertices,polygons);var i;for(i=0;i<vertices.length;i++){result.AddVertex(new JSM.BodyVertex(vertices[i]));}var polygon;for(i=0;i<polygons.length;i++){polygonVertexIndices=polygons[i];polygon=new JSM.BodyPolygon(polygonVertexIndices);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateGrid=function(xSize,ySize,xSegmentation,ySegmentation,curved){var xSector=new JSM.Sector(new JSM.Coord(0,0,0),new JSM.Coord(xSize,0,0));var ySector=new JSM.Sector(new JSM.Coord(0,ySize,0),new JSM.Coord(xSize,ySize,0));return JSM.GenerateRuledFromSectors(xSector,ySector,xSegmentation,ySegmentation,curved);};JSM.GenerateQuadGrid=function(size,segmentation,curved){return JSM.GenerateGrid(size,size,segmentation,segmentation,curved);};JSM.GenerateRuledFromSectorsWithHeight=function(aSector,bSector,lineSegmentation,meshSegmentation,isCurved,height){var result=new JSM.Body();var aCoords=[];var bCoords=[];JSM.GetLineSegmentation(aSector.beg,aSector.end,lineSegmentation,aCoords);JSM.GetLineSegmentation(bSector.beg,bSector.end,lineSegmentation,bCoords);var vertices=[];var polygons=[];JSM.GetRuledMesh(aCoords,bCoords,meshSegmentation,vertices,polygons);var i;for(i=0;i<vertices.length;i++){result.AddVertex(new JSM.BodyVertex(vertices[i]));}var polygon;for(i=0;i<polygons.length;i++){polygonVertexIndices=polygons[i];polygon=new JSM.BodyPolygon(polygonVertexIndices);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}var topVertexCount=result.VertexCount();var newVertex;for(i=0;i<vertices.length;i++){vertex=vertices[i];newVertex=new JSM.Coord(vertex.x,vertex.y,vertex.z);newVertex.z-=height;result.AddVertex(new JSM.BodyVertex(newVertex));}var j,newpolygonVertexIndices;for(i=0;i<polygons.length;i++){polygonVertexIndices=polygons[i];newpolygonVertexIndices=[];for(j=polygonVertexIndices.length-1;j>=0;j--){newpolygonVertexIndices.push(polygonVertexIndices[j]+topVertexCount);}polygon=new JSM.BodyPolygon(newpolygonVertexIndices);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}var current,next,top,ntop;for(i=0;i<meshSegmentation;i++){current=i+topVertexCount;next=current+1;top=current-topVertexCount;ntop=top+1;polygon=new JSM.BodyPolygon([current,next,ntop,top]);result.AddPolygon(polygon);}for(i=0;i<meshSegmentation;i++){current=i+(lineSegmentation*(meshSegmentation+1))+topVertexCount;next=current+1;top=current-topVertexCount;ntop=top+1;polygon=new JSM.BodyPolygon([current,top,ntop,next]);result.AddPolygon(polygon);}for(i=0;i<lineSegmentation;i++){current=i*(meshSegmentation+1)+topVertexCount;next=current+meshSegmentation+1;top=current-topVertexCount;ntop=top+meshSegmentation+1;polygon=new JSM.BodyPolygon([current,top,ntop,next]);result.AddPolygon(polygon);}for(i=0;i<lineSegmentation;i++){current=(i+1)*meshSegmentation+i+topVertexCount;next=current+meshSegmentation+1;top=current-topVertexCount;ntop=top+meshSegmentation+1;polygon=new JSM.BodyPolygon([current,next,ntop,top]);result.AddPolygon(polygon);}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateRuledFromCoords=function(aCoords,bCoords,meshSegmentation,isCurved){var result=new JSM.Body();if(aCoords.length!==bCoords.length){return;}var vertices=[];var polygons=[];JSM.GetRuledMesh(aCoords,bCoords,meshSegmentation,vertices,polygons);var i;for(i=0;i<vertices.length;i++){result.AddVertex(new JSM.BodyVertex(vertices[i]));}var polygon;for(i=0;i<polygons.length;i++){vertices=polygons[i];polygon=new JSM.BodyPolygon(vertices);if(isCurved){polygon.SetCurveGroup(0);}result.AddPolygon(polygon);}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateRevolved=function(polyLine,axis,angle,segmentation,withTopAndBottom,isCurved){var result=new JSM.Body();var circular=JSM.IsEqual(angle,2*Math.PI);var count=polyLine.length;var step=angle/segmentation;var axisDir=JSM.CoordSub(axis.end,axis.beg);var i,j,rotated;for(i=0;i<count;i++){for(j=0;j<=segmentation;j++){if(circular&&j===segmentation){continue;}rotated=JSM.CoordRotate(polyLine[i],axisDir,j*step,axis.beg);result.AddVertex(new JSM.BodyVertex(rotated));}}var current,top,next,ntop,polygon;for(i=0;i<count-1;i++){for(j=0;j<segmentation;j++){current=i*(segmentation+1)+j;top=current+segmentation+1;next=current+1;ntop=top+1;if(circular){current=i*segmentation+j;top=current+segmentation;next=current+1;ntop=top+1;if(j===segmentation-1){next=i*segmentation;ntop=(i+1)*segmentation;}}polygon=new JSM.BodyPolygon([current,next,ntop,top]);if(isCurved){polygon.SetCurveGroup(i);}result.AddPolygon(polygon);}}if(circular&&withTopAndBottom){var topPolygon=new JSM.BodyPolygon();var bottomPolygon=new JSM.BodyPolygon();for(i=0;i<segmentation;i++){topPolygon.AddVertexIndex(segmentation*(count-1)+i);bottomPolygon.AddVertexIndex(segmentation-i-1);}result.AddPolygon(topPolygon);result.AddPolygon(bottomPolygon);}var axisLine=new JSM.Line(axis.beg,JSM.VectorNormalize(axisDir));var avgRadius=0;var projected;for(i=0;i<count;i++){projected=JSM.ProjectCoordToLine(polyLine[i],axisLine);avgRadius=avgRadius+JSM.CoordDistance(projected,polyLine[i]);}avgRadius=avgRadius/count;var origo=new JSM.Coord(axis.beg.x,axis.beg.y,axis.beg.z);var e3=JSM.VectorNormalize(axisDir);var baseLine=new JSM.Line(origo,axisDir);var projected=JSM.ProjectCoordToLine(polyLine[0],baseLine);var e1=JSM.VectorSetLength(JSM.CoordSub(polyLine[0],projected),avgRadius);var e2=JSM.VectorSetLength(JSM.VectorCross(e3,e1),avgRadius);result.SetTextureProjectionType("Cylindrical");result.SetTextureProjectionCoords(new JSM.CoordSystem(origo,e1,e2,e3));return result;};JSM.GenerateFunctionSurface=function(function3D,intervalMin,intervalMax,segmentation,isCurved){var aSector=new JSM.Sector(new JSM.Coord(intervalMax.x,intervalMin.y,0),new JSM.Coord(intervalMin.x,intervalMin.y,0));var bSector=new JSM.Sector(new JSM.Coord(intervalMax.x,intervalMax.y,0),new JSM.Coord(intervalMin.x,intervalMax.y,0));var result=JSM.GenerateRuledFromSectors(aSector,bSector,segmentation,segmentation,isCurved);var i,coord,functionValue;for(i=0;i<result.VertexCount();i++){coord=result.GetVertexPosition(i);coord.z=function3D(coord.x,coord.y);}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateFunctionSurfaceSolid=function(function3D,intervalMin,intervalMax,segmentation,isCurved,bottomZ){var aSector=new JSM.Sector(new JSM.Coord(intervalMax.x,intervalMin.y,0),new JSM.Coord(intervalMin.x,intervalMin.y,0));var bSector=new JSM.Sector(new JSM.Coord(intervalMax.x,intervalMax.y,0),new JSM.Coord(intervalMin.x,intervalMax.y,0));var result=JSM.GenerateRuledFromSectorsWithHeight(aSector,bSector,segmentation,segmentation,isCurved,bottomZ);var i,coord,functionValue;var topVertexCount=(segmentation+1)*(segmentation+1);for(i=0;i<topVertexCount;i++){coord=result.GetVertexPosition(i);coord.z=function3D(coord.x,coord.y);}result.SetTextureProjectionType("Cubic");result.SetTextureProjectionCoords(new JSM.CoordSystem(new JSM.Coord(0,0,0),new JSM.Coord(1,0,0),new JSM.Coord(0,1,0),new JSM.Coord(0,0,1)));return result;};JSM.GenerateSuperShape=function(a_lon,b_lon,m_lon,n1_lon,n2_lon,n3_lon,a_lat,b_lat,m_lat,n1_lat,n2_lat,n3_lat,segmentation,isCurved){var CartesianToSpherical=function(coord){var result=new JSM.Coord();var radius=Math.sqrt(coord.x*coord.x+coord.y*coord.y+coord.z*coord.z);var phi=Math.asin(coord.z/radius);var theta=Math.atan2(coord.y,coord.x);return[radius,phi,theta];};var CalculateSuperFormula=function(p,a,b,m,n1,n2,n3){var abs1=Math.abs(Math.cos(m*p/4)/a);var abs2=Math.abs(Math.sin(m*p/4)/b);return Math.pow(Math.pow(abs1,n2)+Math.pow(abs2,n3),-1/n1);};var CalculateSuperFormulaCoordinate=function(phi,theta){var coord=new JSM.Coord();var rPhi=CalculateSuperFormula(phi,a_lat,b_lat,m_lat,n1_lat,n2_lat,n3_lat);var rTheta=CalculateSuperFormula(theta,a_lon,b_lon,m_lon,n1_lon,n2_lon,n3_lon);coord.x=rTheta*Math.cos(theta)*rPhi*Math.cos(phi);coord.y=rTheta*Math.sin(theta)*rPhi*Math.cos(phi);coord.z=rPhi*Math.sin(phi);return coord;};var result=JSM.GenerateSphere(1,segmentation,isCurved);var i,j,vertex,coord,spherical,newCoord;for(i=0;i<result.VertexCount();i++){vertex=result.GetVertex(i);coord=vertex.position;spherical=CartesianToSpherical(coord);newCoord=CalculateSuperFormulaCoordinate(spherical[1],spherical[2]);vertex.SetPosition(newCoord);}return result;};JSM.GenerateSolidWithRadius=function(solidName,radius){var result=new JSM.Body();var equalRadius=true;if(solidName==="Tetrahedron"){result=JSM.GenerateTetrahedron();}else{if(solidName==="Hexahedron"){result=JSM.GenerateHexahedron();}else{if(solidName==="Octahedron"){result=JSM.GenerateOctahedron();}else{if(solidName==="Dodecahedron"){result=JSM.GenerateDodecahedron();}else{if(solidName==="Icosahedron"){result=JSM.GenerateIcosahedron();}else{if(solidName==="TruncatedTetrahedron"){result=JSM.GenerateTruncatedTetrahedron();}else{if(solidName==="Cuboctahedron"){result=JSM.GenerateCuboctahedron();}else{if(solidName==="TruncatedCube"){result=JSM.GenerateTruncatedCube();}else{if(solidName==="TruncatedOctahedron"){result=JSM.GenerateTruncatedOctahedron();}else{if(solidName==="Rhombicuboctahedron"){result=JSM.GenerateRhombicuboctahedron();}else{if(solidName==="TruncatedCuboctahedron"){result=JSM.GenerateTruncatedCuboctahedron();}else{if(solidName==="SnubCube"){result=JSM.GenerateSnubCube();}else{if(solidName==="Icosidodecahedron"){result=JSM.GenerateIcosidodecahedron();}else{if(solidName==="TruncatedDodecahedron"){result=JSM.GenerateTruncatedDodecahedron();}else{if(solidName==="TruncatedIcosahedron"){result=JSM.GenerateTruncatedIcosahedron();}else{if(solidName==="Rhombicosidodecahedron"){result=JSM.GenerateRhombicosidodecahedron();}else{if(solidName==="TruncatedIcosidodecahedron"){result=JSM.GenerateTruncatedIcosidodecahedron();}else{if(solidName==="SnubDodecahedron"){result=JSM.GenerateSnubDodecahedron();}else{if(solidName==="SmallStellatedDodecahedron"){result=JSM.GenerateSmallStellatedDodecahedron();equalRadius=false;}else{if(solidName==="GreatDodecahedron"){result=JSM.GenerateGreatDodecahedron();equalRadius=false;}else{if(solidName==="GreatStellatedDodecahedron"){result=JSM.GenerateGreatStellatedDodecahedron();equalRadius=false;}}}}}}}}}}}}}}}}}}}}}if(result.VertexCount()>0){var i;var maxRadius=0;if(equalRadius){maxRadius=JSM.VectorLength(result.GetVertexPosition(0));}else{var currentRadius;for(i=0;i<result.VertexCount();i++){currentRadius=JSM.VectorLength(result.GetVertexPosition(i));if(JSM.IsGreater(currentRadius,maxRadius)){maxRadius=currentRadius;}}}var scale=radius/maxRadius;var vertex;for(i=0;i<result.VertexCount();i++){vertex=result.GetVertex(i);vertex.SetPosition(JSM.VectorMultiply(vertex.GetPosition(),scale));}}return result;};JSM.GenerateTetrahedron=function(){var result=new JSM.Body();var a=1;result.AddVertex(new JSM.BodyVertex(new JSM.Coord(+a,+a,+a)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-a,-a,+a)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(-a,+a,-a)));result.AddVertex(new JSM.BodyVertex(new JSM.Coord(+a,-a,-a)));result.AddPolygon(new JSM.BodyPolygon([0,1,3]));result.AddPolygon(new JSM.BodyPolygon([0,2,1]));result.AddPolygon(new JSM.BodyPolygon([0,3,2]));result.AddPolygon(new JSM.BodyPolygon([1,2,3]));return result;};JSM.GenerateHexahedron=function(){var result=new JSM.Body();var a=1;JSM.AddVertexToBody(result,+a,+a,+a);JSM.AddVertexToBody(result,+a,+a,-a);JSM.AddVertexToBody(result,+a,-a,+a);JSM.AddVertexToBody(result,-a,+a,+a);JSM.AddVertexToBody(result,+a,-a,-a);JSM.AddVertexToBody(result,-a,+a,-a);JSM.AddVertexToBody(result,-a,-a,+a);JSM.AddVertexToBody(result,-a,-a,-a);JSM.AddPolygonToBody(result,[0,1,5,3]);JSM.AddPolygonToBody(result,[0,2,4,1]);JSM.AddPolygonToBody(result,[0,3,6,2]);JSM.AddPolygonToBody(result,[1,4,7,5]);JSM.AddPolygonToBody(result,[2,6,7,4]);JSM.AddPolygonToBody(result,[3,5,7,6]);return result;};JSM.GenerateOctahedron=function(){var result=new JSM.Body();var a=1;var b=0;JSM.AddVertexToBody(result,+a,+b,+b);JSM.AddVertexToBody(result,-a,+b,+b);JSM.AddVertexToBody(result,+b,+a,+b);JSM.AddVertexToBody(result,+b,-a,+b);JSM.AddVertexToBody(result,+b,+b,+a);JSM.AddVertexToBody(result,+b,+b,-a);JSM.AddPolygonToBody(result,[0,2,4]);JSM.AddPolygonToBody(result,[0,3,5]);JSM.AddPolygonToBody(result,[0,4,3]);JSM.AddPolygonToBody(result,[0,5,2]);JSM.AddPolygonToBody(result,[1,2,5]);JSM.AddPolygonToBody(result,[1,3,4]);JSM.AddPolygonToBody(result,[1,4,2]);JSM.AddPolygonToBody(result,[1,5,3]);return result;};JSM.GenerateDodecahedron=function(){var result=new JSM.Body();var a=1;var b=0;var c=(1+Math.sqrt(5))/2;var d=1/c;JSM.AddVertexToBody(result,+a,+a,+a);JSM.AddVertexToBody(result,+a,+a,-a);JSM.AddVertexToBody(result,+a,-a,+a);JSM.AddVertexToBody(result,-a,+a,+a);JSM.AddVertexToBody(result,+a,-a,-a);JSM.AddVertexToBody(result,-a,+a,-a);JSM.AddVertexToBody(result,-a,-a,+a);JSM.AddVertexToBody(result,-a,-a,-a);JSM.AddVertexToBody(result,+b,+d,+c);JSM.AddVertexToBody(result,+b,+d,-c);JSM.AddVertexToBody(result,+b,-d,+c);JSM.AddVertexToBody(result,+b,-d,-c);JSM.AddVertexToBody(result,+d,+c,+b);JSM.AddVertexToBody(result,+d,-c,+b);JSM.AddVertexToBody(result,-d,+c,+b);JSM.AddVertexToBody(result,-d,-c,+b);JSM.AddVertexToBody(result,+c,+b,+d);JSM.AddVertexToBody(result,-c,+b,+d);JSM.AddVertexToBody(result,+c,+b,-d);JSM.AddVertexToBody(result,-c,+b,-d);JSM.AddPolygonToBody(result,[0,8,10,2,16]);JSM.AddPolygonToBody(result,[0,16,18,1,12]);JSM.AddPolygonToBody(result,[0,12,14,3,8]);JSM.AddPolygonToBody(result,[1,9,5,14,12]);JSM.AddPolygonToBody(result,[1,18,4,11,9]);JSM.AddPolygonToBody(result,[2,10,6,15,13]);JSM.AddPolygonToBody(result,[2,13,4,18,16]);JSM.AddPolygonToBody(result,[3,14,5,19,17]);JSM.AddPolygonToBody(result,[3,17,6,10,8]);JSM.AddPolygonToBody(result,[4,13,15,7,11]);JSM.AddPolygonToBody(result,[5,9,11,7,19]);JSM.AddPolygonToBody(result,[6,17,19,7,15]);return result;};JSM.GenerateIcosahedron=function(){var result=new JSM.Body();var a=1;var b=0;var c=(1+Math.sqrt(5))/2;JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,+b,+a,-c);JSM.AddVertexToBody(result,+b,-a,+c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,+b);JSM.AddVertexToBody(result,-a,+c,+b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,+b,+a);JSM.AddVertexToBody(result,+c,+b,-a);JSM.AddVertexToBody(result,-c,+b,-a);JSM.AddPolygonToBody(result,[0,2,8]);JSM.AddPolygonToBody(result,[0,4,6]);JSM.AddPolygonToBody(result,[0,6,9]);JSM.AddPolygonToBody(result,[0,8,4]);JSM.AddPolygonToBody(result,[0,9,2]);JSM.AddPolygonToBody(result,[1,3,11]);JSM.AddPolygonToBody(result,[1,4,10]);JSM.AddPolygonToBody(result,[1,6,4]);JSM.AddPolygonToBody(result,[1,10,3]);JSM.AddPolygonToBody(result,[1,11,6]);JSM.AddPolygonToBody(result,[2,5,8]);JSM.AddPolygonToBody(result,[2,7,5]);JSM.AddPolygonToBody(result,[2,9,7]);JSM.AddPolygonToBody(result,[3,5,7]);JSM.AddPolygonToBody(result,[3,7,11]);JSM.AddPolygonToBody(result,[3,10,5]);JSM.AddPolygonToBody(result,[4,8,10]);JSM.AddPolygonToBody(result,[6,11,9]);JSM.AddPolygonToBody(result,[5,10,8]);JSM.AddPolygonToBody(result,[7,9,11]);return result;};JSM.GenerateTruncatedTetrahedron=function(){var result=new JSM.Body();var a=1;var b=3;JSM.AddVertexToBody(result,+a,+a,+b);JSM.AddVertexToBody(result,+a,-a,-b);JSM.AddVertexToBody(result,-a,-a,+b);JSM.AddVertexToBody(result,-a,+a,-b);JSM.AddVertexToBody(result,+a,+b,+a);JSM.AddVertexToBody(result,+a,-b,-a);JSM.AddVertexToBody(result,-a,-b,+a);JSM.AddVertexToBody(result,-a,+b,-a);JSM.AddVertexToBody(result,+b,+a,+a);JSM.AddVertexToBody(result,+b,-a,-a);JSM.AddVertexToBody(result,-b,-a,+a);JSM.AddVertexToBody(result,-b,+a,-a);JSM.AddPolygonToBody(result,[0,8,4]);JSM.AddPolygonToBody(result,[1,9,5]);JSM.AddPolygonToBody(result,[2,10,6]);JSM.AddPolygonToBody(result,[3,11,7]);JSM.AddPolygonToBody(result,[0,2,6,5,9,8]);JSM.AddPolygonToBody(result,[0,4,7,11,10,2]);JSM.AddPolygonToBody(result,[1,3,7,4,8,9]);JSM.AddPolygonToBody(result,[1,5,6,10,11,3]);return result;};JSM.GenerateCuboctahedron=function(){var result=new JSM.Body();var a=1;var b=0;JSM.AddVertexToBody(result,+a,+a,+b);JSM.AddVertexToBody(result,+a,-a,+b);JSM.AddVertexToBody(result,-a,-a,+b);JSM.AddVertexToBody(result,-a,+a,+b);JSM.AddVertexToBody(result,+a,+b,+a);JSM.AddVertexToBody(result,+a,+b,-a);JSM.AddVertexToBody(result,-a,+b,+a);JSM.AddVertexToBody(result,-a,+b,-a);JSM.AddVertexToBody(result,+b,+a,+a);JSM.AddVertexToBody(result,+b,-a,-a);JSM.AddVertexToBody(result,+b,-a,+a);JSM.AddVertexToBody(result,+b,+a,-a);JSM.AddPolygonToBody(result,[0,5,11]);JSM.AddPolygonToBody(result,[0,8,4]);JSM.AddPolygonToBody(result,[1,4,10]);JSM.AddPolygonToBody(result,[1,9,5]);JSM.AddPolygonToBody(result,[2,7,9]);JSM.AddPolygonToBody(result,[2,10,6]);JSM.AddPolygonToBody(result,[3,6,8]);JSM.AddPolygonToBody(result,[3,11,7]);JSM.AddPolygonToBody(result,[0,4,1,5]);JSM.AddPolygonToBody(result,[0,11,3,8]);JSM.AddPolygonToBody(result,[1,10,2,9]);JSM.AddPolygonToBody(result,[2,6,3,7]);JSM.AddPolygonToBody(result,[4,8,6,10]);JSM.AddPolygonToBody(result,[5,9,7,11]);return result;};JSM.GenerateTruncatedCube=function(){var result=new JSM.Body();var a=1;var b=Math.sqrt(2)-1;JSM.AddVertexToBody(result,+a,+a,+b);JSM.AddVertexToBody(result,+a,+a,-b);JSM.AddVertexToBody(result,+a,-a,+b);JSM.AddVertexToBody(result,-a,+a,+b);JSM.AddVertexToBody(result,+a,-a,-b);JSM.AddVertexToBody(result,-a,+a,-b);JSM.AddVertexToBody(result,-a,-a,+b);JSM.AddVertexToBody(result,-a,-a,-b);JSM.AddVertexToBody(result,+a,+b,+a);JSM.AddVertexToBody(result,+a,+b,-a);JSM.AddVertexToBody(result,+a,-b,+a);JSM.AddVertexToBody(result,-a,+b,+a);JSM.AddVertexToBody(result,+a,-b,-a);JSM.AddVertexToBody(result,-a,+b,-a);JSM.AddVertexToBody(result,-a,-b,+a);JSM.AddVertexToBody(result,-a,-b,-a);JSM.AddVertexToBody(result,+b,+a,+a);JSM.AddVertexToBody(result,+b,+a,-a);JSM.AddVertexToBody(result,+b,-a,+a);JSM.AddVertexToBody(result,-b,+a,+a);JSM.AddVertexToBody(result,+b,-a,-a);JSM.AddVertexToBody(result,-b,+a,-a);JSM.AddVertexToBody(result,-b,-a,+a);JSM.AddVertexToBody(result,-b,-a,-a);JSM.AddPolygonToBody(result,[0,16,8]);JSM.AddPolygonToBody(result,[1,9,17]);JSM.AddPolygonToBody(result,[2,10,18]);JSM.AddPolygonToBody(result,[3,11,19]);JSM.AddPolygonToBody(result,[4,20,12]);JSM.AddPolygonToBody(result,[5,21,13]);JSM.AddPolygonToBody(result,[6,22,14]);JSM.AddPolygonToBody(result,[7,15,23]);JSM.AddPolygonToBody(result,[0,1,17,21,5,3,19,16]);JSM.AddPolygonToBody(result,[0,8,10,2,4,12,9,1]);JSM.AddPolygonToBody(result,[2,18,22,6,7,23,20,4]);JSM.AddPolygonToBody(result,[3,5,13,15,7,6,14,11]);JSM.AddPolygonToBody(result,[8,16,19,11,14,22,18,10]);JSM.AddPolygonToBody(result,[9,12,20,23,15,13,21,17]);return result;};JSM.GenerateTruncatedOctahedron=function(){var result=new JSM.Body();var a=1;var b=0;var c=2;JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,+b,+a,-c);JSM.AddVertexToBody(result,+b,-a,+c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,+b,+c,+a);JSM.AddVertexToBody(result,+b,-c,+a);JSM.AddVertexToBody(result,+b,+c,-a);JSM.AddVertexToBody(result,+b,-c,-a);JSM.AddVertexToBody(result,+a,+b,+c);JSM.AddVertexToBody(result,+a,+b,-c);JSM.AddVertexToBody(result,-a,+b,+c);JSM.AddVertexToBody(result,-a,+b,-c);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,+b);JSM.AddVertexToBody(result,-a,+c,+b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,+b,+a);JSM.AddVertexToBody(result,+c,+b,-a);JSM.AddVertexToBody(result,-c,+b,-a);JSM.AddVertexToBody(result,+c,+a,+b);JSM.AddVertexToBody(result,-c,+a,+b);JSM.AddVertexToBody(result,+c,-a,+b);JSM.AddVertexToBody(result,-c,-a,+b);JSM.AddPolygonToBody(result,[0,10,2,8]);JSM.AddPolygonToBody(result,[1,9,3,11]);JSM.AddPolygonToBody(result,[4,12,6,14]);JSM.AddPolygonToBody(result,[5,15,7,13]);JSM.AddPolygonToBody(result,[16,22,18,20]);JSM.AddPolygonToBody(result,[17,21,19,23]);JSM.AddPolygonToBody(result,[0,4,14,21,17,10]);JSM.AddPolygonToBody(result,[0,8,16,20,12,4]);JSM.AddPolygonToBody(result,[1,6,12,20,18,9]);JSM.AddPolygonToBody(result,[1,11,19,21,14,6]);JSM.AddPolygonToBody(result,[2,5,13,22,16,8]);JSM.AddPolygonToBody(result,[2,10,17,23,15,5]);JSM.AddPolygonToBody(result,[3,7,15,23,19,11]);JSM.AddPolygonToBody(result,[3,9,18,22,13,7]);return result;};JSM.GenerateRhombicuboctahedron=function(){var result=new JSM.Body();var a=1;var b=1+Math.sqrt(2);JSM.AddVertexToBody(result,+a,+a,+b);JSM.AddVertexToBody(result,+a,+a,-b);JSM.AddVertexToBody(result,+a,-a,+b);JSM.AddVertexToBody(result,-a,+a,+b);JSM.AddVertexToBody(result,+a,-a,-b);JSM.AddVertexToBody(result,-a,+a,-b);JSM.AddVertexToBody(result,-a,-a,+b);JSM.AddVertexToBody(result,-a,-a,-b);JSM.AddVertexToBody(result,+a,+b,+a);JSM.AddVertexToBody(result,+a,+b,-a);JSM.AddVertexToBody(result,+a,-b,+a);JSM.AddVertexToBody(result,-a,+b,+a);JSM.AddVertexToBody(result,+a,-b,-a);JSM.AddVertexToBody(result,-a,+b,-a);JSM.AddVertexToBody(result,-a,-b,+a);JSM.AddVertexToBody(result,-a,-b,-a);JSM.AddVertexToBody(result,+b,+a,+a);JSM.AddVertexToBody(result,+b,+a,-a);JSM.AddVertexToBody(result,+b,-a,+a);JSM.AddVertexToBody(result,-b,+a,+a);JSM.AddVertexToBody(result,+b,-a,-a);JSM.AddVertexToBody(result,-b,+a,-a);JSM.AddVertexToBody(result,-b,-a,+a);JSM.AddVertexToBody(result,-b,-a,-a);JSM.AddPolygonToBody(result,[0,16,8]);JSM.AddPolygonToBody(result,[1,9,17]);JSM.AddPolygonToBody(result,[2,10,18]);JSM.AddPolygonToBody(result,[3,11,19]);JSM.AddPolygonToBody(result,[4,20,12]);JSM.AddPolygonToBody(result,[5,21,13]);JSM.AddPolygonToBody(result,[6,22,14]);JSM.AddPolygonToBody(result,[7,15,23]);JSM.AddPolygonToBody(result,[0,2,18,16]);JSM.AddPolygonToBody(result,[0,3,6,2]);JSM.AddPolygonToBody(result,[0,8,11,3]);JSM.AddPolygonToBody(result,[1,4,7,5]);JSM.AddPolygonToBody(result,[1,5,13,9]);JSM.AddPolygonToBody(result,[1,17,20,4]);JSM.AddPolygonToBody(result,[2,6,14,10]);JSM.AddPolygonToBody(result,[3,19,22,6]);JSM.AddPolygonToBody(result,[4,12,15,7]);JSM.AddPolygonToBody(result,[5,7,23,21]);JSM.AddPolygonToBody(result,[8,9,13,11]);JSM.AddPolygonToBody(result,[8,16,17,9]);JSM.AddPolygonToBody(result,[10,12,20,18]);JSM.AddPolygonToBody(result,[10,14,15,12]);JSM.AddPolygonToBody(result,[11,13,21,19]);JSM.AddPolygonToBody(result,[14,22,23,15]);JSM.AddPolygonToBody(result,[16,18,20,17]);JSM.AddPolygonToBody(result,[19,21,23,22]);return result;};JSM.GenerateTruncatedCuboctahedron=function(){var result=new JSM.Body();var a=1;var b=1+Math.sqrt(2);var c=1+2*Math.sqrt(2);JSM.AddVertexToBody(result,+a,+b,+c);JSM.AddVertexToBody(result,+a,+b,-c);JSM.AddVertexToBody(result,+a,-b,+c);JSM.AddVertexToBody(result,-a,+b,+c);JSM.AddVertexToBody(result,+a,-b,-c);JSM.AddVertexToBody(result,-a,+b,-c);JSM.AddVertexToBody(result,-a,-b,+c);JSM.AddVertexToBody(result,-a,-b,-c);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,+b);JSM.AddVertexToBody(result,+a,+c,-b);JSM.AddVertexToBody(result,-a,+c,+b);JSM.AddVertexToBody(result,+a,-c,-b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,-a,+c,-b);JSM.AddVertexToBody(result,-a,-c,-b);JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,+b,+a,-c);JSM.AddVertexToBody(result,-b,+a,+c);JSM.AddVertexToBody(result,+b,-a,+c);JSM.AddVertexToBody(result,-b,+a,-c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,-b,-a,+c);JSM.AddVertexToBody(result,-b,-a,-c);JSM.AddVertexToBody(result,+b,+c,+a);JSM.AddVertexToBody(result,+b,-c,+a);JSM.AddVertexToBody(result,-b,+c,+a);JSM.AddVertexToBody(result,+b,+c,-a);JSM.AddVertexToBody(result,-b,-c,+a);JSM.AddVertexToBody(result,+b,-c,-a);JSM.AddVertexToBody(result,-b,+c,-a);JSM.AddVertexToBody(result,-b,-c,-a);JSM.AddVertexToBody(result,+c,+a,+b);JSM.AddVertexToBody(result,-c,+a,+b);JSM.AddVertexToBody(result,+c,+a,-b);JSM.AddVertexToBody(result,+c,-a,+b);JSM.AddVertexToBody(result,-c,+a,-b);JSM.AddVertexToBody(result,-c,-a,+b);JSM.AddVertexToBody(result,+c,-a,-b);JSM.AddVertexToBody(result,-c,-a,-b);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,+b,+a);JSM.AddVertexToBody(result,+c,-b,+a);JSM.AddVertexToBody(result,+c,+b,-a);JSM.AddVertexToBody(result,-c,-b,+a);JSM.AddVertexToBody(result,-c,+b,-a);JSM.AddVertexToBody(result,+c,-b,-a);JSM.AddVertexToBody(result,-c,-b,-a);JSM.AddPolygonToBody(result,[0,8,11,3]);JSM.AddPolygonToBody(result,[1,5,14,10]);JSM.AddPolygonToBody(result,[2,6,13,9]);JSM.AddPolygonToBody(result,[4,12,15,7]);JSM.AddPolygonToBody(result,[16,19,35,32]);JSM.AddPolygonToBody(result,[17,34,38,21]);JSM.AddPolygonToBody(result,[18,33,37,22]);JSM.AddPolygonToBody(result,[23,39,36,20]);JSM.AddPolygonToBody(result,[24,40,43,27]);JSM.AddPolygonToBody(result,[25,29,46,42]);JSM.AddPolygonToBody(result,[26,30,45,41]);JSM.AddPolygonToBody(result,[28,44,47,31]);JSM.AddPolygonToBody(result,[0,16,32,40,24,8]);JSM.AddPolygonToBody(result,[1,10,27,43,34,17]);JSM.AddPolygonToBody(result,[2,9,25,42,35,19]);JSM.AddPolygonToBody(result,[3,11,26,41,33,18]);JSM.AddPolygonToBody(result,[4,21,38,46,29,12]);JSM.AddPolygonToBody(result,[5,20,36,45,30,14]);JSM.AddPolygonToBody(result,[6,22,37,44,28,13]);JSM.AddPolygonToBody(result,[7,15,31,47,39,23]);JSM.AddPolygonToBody(result,[0,3,18,22,6,2,19,16]);JSM.AddPolygonToBody(result,[1,17,21,4,7,23,20,5]);JSM.AddPolygonToBody(result,[8,24,27,10,14,30,26,11]);JSM.AddPolygonToBody(result,[9,13,28,31,15,12,29,25]);JSM.AddPolygonToBody(result,[32,35,42,46,38,34,43,40]);JSM.AddPolygonToBody(result,[33,41,45,36,39,47,44,37]);return result;};JSM.GenerateSnubCube=function(){var result=new JSM.Body();var a=1;var b=(1/3)*(Math.pow(17+3*Math.sqrt(33),1/3)-Math.pow(-17+3*Math.sqrt(33),1/3)-1);var c=1/b;JSM.AddVertexToBody(result,+a,+b,-c);JSM.AddVertexToBody(result,+a,-b,+c);JSM.AddVertexToBody(result,-a,+b,+c);JSM.AddVertexToBody(result,-a,-b,-c);JSM.AddVertexToBody(result,+b,-c,+a);JSM.AddVertexToBody(result,-b,+c,+a);JSM.AddVertexToBody(result,+b,+c,-a);JSM.AddVertexToBody(result,-b,-c,-a);JSM.AddVertexToBody(result,-c,+a,+b);JSM.AddVertexToBody(result,+c,+a,-b);JSM.AddVertexToBody(result,+c,-a,+b);JSM.AddVertexToBody(result,-c,-a,-b);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,-b);JSM.AddVertexToBody(result,-a,+c,-b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,-b,+a,-c);JSM.AddVertexToBody(result,-b,-a,+c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,-b,+a);JSM.AddVertexToBody(result,+c,-b,-a);JSM.AddVertexToBody(result,-c,+b,-a);JSM.AddPolygonToBody(result,[0,6,9]);JSM.AddPolygonToBody(result,[0,9,22]);JSM.AddPolygonToBody(result,[0,17,6]);JSM.AddPolygonToBody(result,[0,22,19]);JSM.AddPolygonToBody(result,[1,4,10]);JSM.AddPolygonToBody(result,[1,10,20]);JSM.AddPolygonToBody(result,[1,18,4]);JSM.AddPolygonToBody(result,[1,20,16]);JSM.AddPolygonToBody(result,[2,5,8]);JSM.AddPolygonToBody(result,[2,8,21]);JSM.AddPolygonToBody(result,[2,16,5]);JSM.AddPolygonToBody(result,[2,21,18]);JSM.AddPolygonToBody(result,[3,7,11]);JSM.AddPolygonToBody(result,[3,11,23]);JSM.AddPolygonToBody(result,[3,19,7]);JSM.AddPolygonToBody(result,[3,23,17]);JSM.AddPolygonToBody(result,[4,13,10]);JSM.AddPolygonToBody(result,[4,18,15]);JSM.AddPolygonToBody(result,[5,14,8]);JSM.AddPolygonToBody(result,[5,16,12]);JSM.AddPolygonToBody(result,[6,12,9]);JSM.AddPolygonToBody(result,[6,17,14]);JSM.AddPolygonToBody(result,[7,15,11]);JSM.AddPolygonToBody(result,[7,19,13]);JSM.AddPolygonToBody(result,[8,14,23]);JSM.AddPolygonToBody(result,[9,12,20]);JSM.AddPolygonToBody(result,[10,13,22]);JSM.AddPolygonToBody(result,[11,15,21]);JSM.AddPolygonToBody(result,[12,16,20]);JSM.AddPolygonToBody(result,[13,19,22]);JSM.AddPolygonToBody(result,[14,17,23]);JSM.AddPolygonToBody(result,[15,18,21]);JSM.AddPolygonToBody(result,[0,19,3,17]);JSM.AddPolygonToBody(result,[1,16,2,18]);JSM.AddPolygonToBody(result,[4,15,7,13]);JSM.AddPolygonToBody(result,[5,12,6,14]);JSM.AddPolygonToBody(result,[8,23,11,21]);JSM.AddPolygonToBody(result,[9,20,10,22]);return result;};JSM.GenerateIcosidodecahedron=function(){var result=new JSM.Body();var a=0;var b=(1+Math.sqrt(5))/2;var c=1/2;var d=b/2;var e=(1+b)/2;JSM.AddVertexToBody(result,+a,+a,+b);JSM.AddVertexToBody(result,+a,+a,-b);JSM.AddVertexToBody(result,+a,+b,+a);JSM.AddVertexToBody(result,+a,-b,+a);JSM.AddVertexToBody(result,+b,+a,+a);JSM.AddVertexToBody(result,-b,+a,+a);JSM.AddVertexToBody(result,+c,+d,+e);JSM.AddVertexToBody(result,+c,+d,-e);JSM.AddVertexToBody(result,+c,-d,+e);JSM.AddVertexToBody(result,-c,+d,+e);JSM.AddVertexToBody(result,+c,-d,-e);JSM.AddVertexToBody(result,-c,+d,-e);JSM.AddVertexToBody(result,-c,-d,+e);JSM.AddVertexToBody(result,-c,-d,-e);JSM.AddVertexToBody(result,+d,+e,+c);JSM.AddVertexToBody(result,+d,-e,+c);JSM.AddVertexToBody(result,-d,+e,+c);JSM.AddVertexToBody(result,+d,+e,-c);JSM.AddVertexToBody(result,-d,-e,+c);JSM.AddVertexToBody(result,+d,-e,-c);JSM.AddVertexToBody(result,-d,+e,-c);JSM.AddVertexToBody(result,-d,-e,-c);JSM.AddVertexToBody(result,+e,+c,+d);JSM.AddVertexToBody(result,-e,+c,+d);JSM.AddVertexToBody(result,+e,+c,-d);JSM.AddVertexToBody(result,+e,-c,+d);JSM.AddVertexToBody(result,-e,+c,-d);JSM.AddVertexToBody(result,-e,-c,+d);JSM.AddVertexToBody(result,+e,-c,-d);JSM.AddVertexToBody(result,-e,-c,-d);JSM.AddPolygonToBody(result,[0,6,9]);JSM.AddPolygonToBody(result,[0,12,8]);JSM.AddPolygonToBody(result,[1,10,13]);JSM.AddPolygonToBody(result,[1,11,7]);JSM.AddPolygonToBody(result,[2,14,17]);JSM.AddPolygonToBody(result,[2,20,16]);JSM.AddPolygonToBody(result,[3,18,21]);JSM.AddPolygonToBody(result,[3,19,15]);JSM.AddPolygonToBody(result,[4,22,25]);JSM.AddPolygonToBody(result,[4,28,24]);JSM.AddPolygonToBody(result,[5,26,29]);JSM.AddPolygonToBody(result,[5,27,23]);JSM.AddPolygonToBody(result,[6,22,14]);JSM.AddPolygonToBody(result,[7,17,24]);JSM.AddPolygonToBody(result,[8,15,25]);JSM.AddPolygonToBody(result,[9,16,23]);JSM.AddPolygonToBody(result,[10,28,19]);JSM.AddPolygonToBody(result,[11,26,20]);JSM.AddPolygonToBody(result,[12,27,18]);JSM.AddPolygonToBody(result,[13,21,29]);JSM.AddPolygonToBody(result,[0,8,25,22,6]);JSM.AddPolygonToBody(result,[0,9,23,27,12]);JSM.AddPolygonToBody(result,[1,7,24,28,10]);JSM.AddPolygonToBody(result,[1,13,29,26,11]);JSM.AddPolygonToBody(result,[2,16,9,6,14]);JSM.AddPolygonToBody(result,[2,17,7,11,20]);JSM.AddPolygonToBody(result,[3,15,8,12,18]);JSM.AddPolygonToBody(result,[3,21,13,10,19]);JSM.AddPolygonToBody(result,[4,24,17,14,22]);JSM.AddPolygonToBody(result,[4,25,15,19,28]);JSM.AddPolygonToBody(result,[5,23,16,20,26]);JSM.AddPolygonToBody(result,[5,29,21,18,27]);return result;};JSM.GenerateTruncatedDodecahedron=function(){var result=new JSM.Body();var a=0;var b=2;var c=(1+Math.sqrt(5))/2;var d=1/c;var e=2+c;var f=2*c;var g=Math.pow(c,2);JSM.AddVertexToBody(result,+a,+d,+e);JSM.AddVertexToBody(result,+a,+d,-e);JSM.AddVertexToBody(result,+a,-d,+e);JSM.AddVertexToBody(result,+a,-d,-e);JSM.AddVertexToBody(result,+e,+a,+d);JSM.AddVertexToBody(result,-e,+a,+d);JSM.AddVertexToBody(result,+e,+a,-d);JSM.AddVertexToBody(result,-e,+a,-d);JSM.AddVertexToBody(result,+d,+e,+a);JSM.AddVertexToBody(result,+d,-e,+a);JSM.AddVertexToBody(result,-d,+e,+a);JSM.AddVertexToBody(result,-d,-e,+a);JSM.AddVertexToBody(result,+d,+c,+f);JSM.AddVertexToBody(result,+d,+c,-f);JSM.AddVertexToBody(result,+d,-c,+f);JSM.AddVertexToBody(result,-d,+c,+f);JSM.AddVertexToBody(result,+d,-c,-f);JSM.AddVertexToBody(result,-d,+c,-f);JSM.AddVertexToBody(result,-d,-c,+f);JSM.AddVertexToBody(result,-d,-c,-f);JSM.AddVertexToBody(result,+f,+d,+c);JSM.AddVertexToBody(result,+f,+d,-c);JSM.AddVertexToBody(result,+f,-d,+c);JSM.AddVertexToBody(result,-f,+d,+c);JSM.AddVertexToBody(result,+f,-d,-c);JSM.AddVertexToBody(result,-f,+d,-c);JSM.AddVertexToBody(result,-f,-d,+c);JSM.AddVertexToBody(result,-f,-d,-c);JSM.AddVertexToBody(result,+c,+f,+d);JSM.AddVertexToBody(result,+c,+f,-d);JSM.AddVertexToBody(result,+c,-f,+d);JSM.AddVertexToBody(result,-c,+f,+d);JSM.AddVertexToBody(result,+c,-f,-d);JSM.AddVertexToBody(result,-c,+f,-d);JSM.AddVertexToBody(result,-c,-f,+d);JSM.AddVertexToBody(result,-c,-f,-d);JSM.AddVertexToBody(result,+c,+b,+g);JSM.AddVertexToBody(result,+c,+b,-g);JSM.AddVertexToBody(result,+c,-b,+g);JSM.AddVertexToBody(result,-c,+b,+g);JSM.AddVertexToBody(result,+c,-b,-g);JSM.AddVertexToBody(result,-c,+b,-g);JSM.AddVertexToBody(result,-c,-b,+g);JSM.AddVertexToBody(result,-c,-b,-g);JSM.AddVertexToBody(result,+g,+c,+b);JSM.AddVertexToBody(result,+g,+c,-b);JSM.AddVertexToBody(result,+g,-c,+b);JSM.AddVertexToBody(result,-g,+c,+b);JSM.AddVertexToBody(result,+g,-c,-b);JSM.AddVertexToBody(result,-g,+c,-b);JSM.AddVertexToBody(result,-g,-c,+b);JSM.AddVertexToBody(result,-g,-c,-b);JSM.AddVertexToBody(result,+b,+g,+c);JSM.AddVertexToBody(result,+b,+g,-c);JSM.AddVertexToBody(result,+b,-g,+c);JSM.AddVertexToBody(result,-b,+g,+c);JSM.AddVertexToBody(result,+b,-g,-c);JSM.AddVertexToBody(result,-b,+g,-c);JSM.AddVertexToBody(result,-b,-g,+c);JSM.AddVertexToBody(result,-b,-g,-c);JSM.AddPolygonToBody(result,[0,12,15]);JSM.AddPolygonToBody(result,[1,17,13]);JSM.AddPolygonToBody(result,[2,18,14]);JSM.AddPolygonToBody(result,[3,16,19]);JSM.AddPolygonToBody(result,[4,20,22]);JSM.AddPolygonToBody(result,[5,26,23]);JSM.AddPolygonToBody(result,[6,24,21]);JSM.AddPolygonToBody(result,[7,25,27]);JSM.AddPolygonToBody(result,[8,28,29]);JSM.AddPolygonToBody(result,[9,32,30]);JSM.AddPolygonToBody(result,[10,33,31]);JSM.AddPolygonToBody(result,[11,34,35]);JSM.AddPolygonToBody(result,[36,44,52]);JSM.AddPolygonToBody(result,[37,53,45]);JSM.AddPolygonToBody(result,[38,54,46]);JSM.AddPolygonToBody(result,[39,55,47]);JSM.AddPolygonToBody(result,[40,48,56]);JSM.AddPolygonToBody(result,[41,49,57]);JSM.AddPolygonToBody(result,[42,50,58]);JSM.AddPolygonToBody(result,[43,59,51]);JSM.AddPolygonToBody(result,[0,2,14,38,46,22,20,44,36,12]);JSM.AddPolygonToBody(result,[0,15,39,47,23,26,50,42,18,2]);JSM.AddPolygonToBody(result,[1,3,19,43,51,27,25,49,41,17]);JSM.AddPolygonToBody(result,[1,13,37,45,21,24,48,40,16,3]);JSM.AddPolygonToBody(result,[4,6,21,45,53,29,28,52,44,20]);JSM.AddPolygonToBody(result,[4,22,46,54,30,32,56,48,24,6]);JSM.AddPolygonToBody(result,[5,7,27,51,59,35,34,58,50,26]);JSM.AddPolygonToBody(result,[5,23,47,55,31,33,57,49,25,7]);JSM.AddPolygonToBody(result,[8,10,31,55,39,15,12,36,52,28]);JSM.AddPolygonToBody(result,[8,29,53,37,13,17,41,57,33,10]);JSM.AddPolygonToBody(result,[9,11,35,59,43,19,16,40,56,32]);JSM.AddPolygonToBody(result,[9,30,54,38,14,18,42,58,34,11]);return result;};JSM.GenerateTruncatedIcosahedron=function(){var result=new JSM.Body();var a=0;var b=1;var c=2;var d=(1+Math.sqrt(5))/2;var e=3*d;var f=1+2*d;var g=2+d;var h=2*d;JSM.AddVertexToBody(result,+a,+b,+e);JSM.AddVertexToBody(result,+a,+b,-e);JSM.AddVertexToBody(result,+a,-b,+e);JSM.AddVertexToBody(result,+a,-b,-e);JSM.AddVertexToBody(result,+b,+e,+a);JSM.AddVertexToBody(result,+b,-e,+a);JSM.AddVertexToBody(result,-b,+e,+a);JSM.AddVertexToBody(result,-b,-e,+a);JSM.AddVertexToBody(result,+e,+a,+b);JSM.AddVertexToBody(result,-e,+a,+b);JSM.AddVertexToBody(result,+e,+a,-b);JSM.AddVertexToBody(result,-e,+a,-b);JSM.AddVertexToBody(result,+c,+f,+d);JSM.AddVertexToBody(result,+c,+f,-d);JSM.AddVertexToBody(result,+c,-f,+d);JSM.AddVertexToBody(result,-c,+f,+d);JSM.AddVertexToBody(result,+c,-f,-d);JSM.AddVertexToBody(result,-c,+f,-d);JSM.AddVertexToBody(result,-c,-f,+d);JSM.AddVertexToBody(result,-c,-f,-d);JSM.AddVertexToBody(result,+f,+d,+c);JSM.AddVertexToBody(result,+f,-d,+c);JSM.AddVertexToBody(result,-f,+d,+c);JSM.AddVertexToBody(result,+f,+d,-c);JSM.AddVertexToBody(result,-f,-d,+c);JSM.AddVertexToBody(result,+f,-d,-c);JSM.AddVertexToBody(result,-f,+d,-c);JSM.AddVertexToBody(result,-f,-d,-c);JSM.AddVertexToBody(result,+d,+c,+f);JSM.AddVertexToBody(result,-d,+c,+f);JSM.AddVertexToBody(result,+d,+c,-f);JSM.AddVertexToBody(result,+d,-c,+f);JSM.AddVertexToBody(result,-d,+c,-f);JSM.AddVertexToBody(result,-d,-c,+f);JSM.AddVertexToBody(result,+d,-c,-f);JSM.AddVertexToBody(result,-d,-c,-f);JSM.AddVertexToBody(result,+b,+g,+h);JSM.AddVertexToBody(result,+b,+g,-h);JSM.AddVertexToBody(result,+b,-g,+h);JSM.AddVertexToBody(result,-b,+g,+h);JSM.AddVertexToBody(result,+b,-g,-h);JSM.AddVertexToBody(result,-b,+g,-h);JSM.AddVertexToBody(result,-b,-g,+h);JSM.AddVertexToBody(result,-b,-g,-h);JSM.AddVertexToBody(result,+g,+h,+b);JSM.AddVertexToBody(result,+g,-h,+b);JSM.AddVertexToBody(result,-g,+h,+b);JSM.AddVertexToBody(result,+g,+h,-b);JSM.AddVertexToBody(result,-g,-h,+b);JSM.AddVertexToBody(result,+g,-h,-b);JSM.AddVertexToBody(result,-g,+h,-b);JSM.AddVertexToBody(result,-g,-h,-b);JSM.AddVertexToBody(result,+h,+b,+g);JSM.AddVertexToBody(result,-h,+b,+g);JSM.AddVertexToBody(result,+h,+b,-g);JSM.AddVertexToBody(result,+h,-b,+g);JSM.AddVertexToBody(result,-h,+b,-g);JSM.AddVertexToBody(result,-h,-b,+g);JSM.AddVertexToBody(result,+h,-b,-g);JSM.AddVertexToBody(result,-h,-b,-g);JSM.AddPolygonToBody(result,[0,28,36,39,29]);JSM.AddPolygonToBody(result,[1,32,41,37,30]);JSM.AddPolygonToBody(result,[2,33,42,38,31]);JSM.AddPolygonToBody(result,[3,34,40,43,35]);JSM.AddPolygonToBody(result,[4,12,44,47,13]);JSM.AddPolygonToBody(result,[5,16,49,45,14]);JSM.AddPolygonToBody(result,[6,17,50,46,15]);JSM.AddPolygonToBody(result,[7,18,48,51,19]);JSM.AddPolygonToBody(result,[8,20,52,55,21]);JSM.AddPolygonToBody(result,[9,24,57,53,22]);JSM.AddPolygonToBody(result,[10,25,58,54,23]);JSM.AddPolygonToBody(result,[11,26,56,59,27]);JSM.AddPolygonToBody(result,[0,2,31,55,52,28]);JSM.AddPolygonToBody(result,[0,29,53,57,33,2]);JSM.AddPolygonToBody(result,[1,3,35,59,56,32]);JSM.AddPolygonToBody(result,[1,30,54,58,34,3]);JSM.AddPolygonToBody(result,[4,6,15,39,36,12]);JSM.AddPolygonToBody(result,[4,13,37,41,17,6]);JSM.AddPolygonToBody(result,[5,7,19,43,40,16]);JSM.AddPolygonToBody(result,[5,14,38,42,18,7]);JSM.AddPolygonToBody(result,[8,10,23,47,44,20]);JSM.AddPolygonToBody(result,[8,21,45,49,25,10]);JSM.AddPolygonToBody(result,[9,11,27,51,48,24]);JSM.AddPolygonToBody(result,[9,22,46,50,26,11]);JSM.AddPolygonToBody(result,[12,36,28,52,20,44]);JSM.AddPolygonToBody(result,[13,47,23,54,30,37]);JSM.AddPolygonToBody(result,[14,45,21,55,31,38]);JSM.AddPolygonToBody(result,[15,46,22,53,29,39]);JSM.AddPolygonToBody(result,[16,40,34,58,25,49]);JSM.AddPolygonToBody(result,[17,41,32,56,26,50]);JSM.AddPolygonToBody(result,[18,42,33,57,24,48]);JSM.AddPolygonToBody(result,[19,51,27,59,35,43]);return result;};JSM.GenerateRhombicosidodecahedron=function(){var result=new JSM.Body();var a=0;var b=1;var c=(1+Math.sqrt(5))/2;var d=Math.pow(c,2);var e=Math.pow(c,3);var f=2*c;var g=2+c;JSM.AddVertexToBody(result,+b,+b,+e);JSM.AddVertexToBody(result,+b,+b,-e);JSM.AddVertexToBody(result,+b,-b,+e);JSM.AddVertexToBody(result,-b,+b,+e);JSM.AddVertexToBody(result,+b,-b,-e);JSM.AddVertexToBody(result,-b,+b,-e);JSM.AddVertexToBody(result,-b,-b,+e);JSM.AddVertexToBody(result,-b,-b,-e);JSM.AddVertexToBody(result,+e,+b,+b);JSM.AddVertexToBody(result,+e,+b,-b);JSM.AddVertexToBody(result,+e,-b,+b);JSM.AddVertexToBody(result,-e,+b,+b);JSM.AddVertexToBody(result,+e,-b,-b);JSM.AddVertexToBody(result,-e,+b,-b);JSM.AddVertexToBody(result,-e,-b,+b);JSM.AddVertexToBody(result,-e,-b,-b);JSM.AddVertexToBody(result,+b,+e,+b);JSM.AddVertexToBody(result,+b,+e,-b);JSM.AddVertexToBody(result,+b,-e,+b);JSM.AddVertexToBody(result,-b,+e,+b);JSM.AddVertexToBody(result,+b,-e,-b);JSM.AddVertexToBody(result,-b,+e,-b);JSM.AddVertexToBody(result,-b,-e,+b);JSM.AddVertexToBody(result,-b,-e,-b);JSM.AddVertexToBody(result,+d,+c,+f);JSM.AddVertexToBody(result,+d,+c,-f);JSM.AddVertexToBody(result,+d,-c,+f);JSM.AddVertexToBody(result,-d,+c,+f);JSM.AddVertexToBody(result,+d,-c,-f);JSM.AddVertexToBody(result,-d,+c,-f);JSM.AddVertexToBody(result,-d,-c,+f);JSM.AddVertexToBody(result,-d,-c,-f);JSM.AddVertexToBody(result,+f,+d,+c);JSM.AddVertexToBody(result,+f,+d,-c);JSM.AddVertexToBody(result,+f,-d,+c);JSM.AddVertexToBody(result,-f,+d,+c);JSM.AddVertexToBody(result,+f,-d,-c);JSM.AddVertexToBody(result,-f,+d,-c);JSM.AddVertexToBody(result,-f,-d,+c);JSM.AddVertexToBody(result,-f,-d,-c);JSM.AddVertexToBody(result,+c,+f,+d);JSM.AddVertexToBody(result,+c,+f,-d);JSM.AddVertexToBody(result,+c,-f,+d);JSM.AddVertexToBody(result,-c,+f,+d);JSM.AddVertexToBody(result,+c,-f,-d);JSM.AddVertexToBody(result,-c,+f,-d);JSM.AddVertexToBody(result,-c,-f,+d);JSM.AddVertexToBody(result,-c,-f,-d);JSM.AddVertexToBody(result,+g,+a,+d);JSM.AddVertexToBody(result,+g,+a,-d);JSM.AddVertexToBody(result,-g,+a,+d);JSM.AddVertexToBody(result,-g,+a,-d);JSM.AddVertexToBody(result,+d,+g,+a);JSM.AddVertexToBody(result,-d,+g,+a);JSM.AddVertexToBody(result,+d,-g,+a);JSM.AddVertexToBody(result,-d,-g,+a);JSM.AddVertexToBody(result,+a,+d,+g);JSM.AddVertexToBody(result,+a,-d,+g);JSM.AddVertexToBody(result,+a,+d,-g);JSM.AddVertexToBody(result,+a,-d,-g);JSM.AddPolygonToBody(result,[0,56,3]);JSM.AddPolygonToBody(result,[1,5,58]);JSM.AddPolygonToBody(result,[2,6,57]);JSM.AddPolygonToBody(result,[4,59,7]);JSM.AddPolygonToBody(result,[8,48,10]);JSM.AddPolygonToBody(result,[9,12,49]);JSM.AddPolygonToBody(result,[11,14,50]);JSM.AddPolygonToBody(result,[13,51,15]);JSM.AddPolygonToBody(result,[16,52,17]);JSM.AddPolygonToBody(result,[18,20,54]);JSM.AddPolygonToBody(result,[19,21,53]);JSM.AddPolygonToBody(result,[22,55,23]);JSM.AddPolygonToBody(result,[24,32,40]);JSM.AddPolygonToBody(result,[25,41,33]);JSM.AddPolygonToBody(result,[26,42,34]);JSM.AddPolygonToBody(result,[27,43,35]);JSM.AddPolygonToBody(result,[28,36,44]);JSM.AddPolygonToBody(result,[29,37,45]);JSM.AddPolygonToBody(result,[30,38,46]);JSM.AddPolygonToBody(result,[31,47,39]);JSM.AddPolygonToBody(result,[0,3,6,2]);JSM.AddPolygonToBody(result,[0,24,40,56]);JSM.AddPolygonToBody(result,[1,4,7,5]);JSM.AddPolygonToBody(result,[1,58,41,25]);JSM.AddPolygonToBody(result,[2,57,42,26]);JSM.AddPolygonToBody(result,[3,56,43,27]);JSM.AddPolygonToBody(result,[4,28,44,59]);JSM.AddPolygonToBody(result,[5,29,45,58]);JSM.AddPolygonToBody(result,[6,30,46,57]);JSM.AddPolygonToBody(result,[7,59,47,31]);JSM.AddPolygonToBody(result,[8,10,12,9]);JSM.AddPolygonToBody(result,[8,32,24,48]);JSM.AddPolygonToBody(result,[9,49,25,33]);JSM.AddPolygonToBody(result,[10,48,26,34]);JSM.AddPolygonToBody(result,[11,13,15,14]);JSM.AddPolygonToBody(result,[11,50,27,35]);JSM.AddPolygonToBody(result,[12,36,28,49]);JSM.AddPolygonToBody(result,[13,37,29,51]);JSM.AddPolygonToBody(result,[14,38,30,50]);JSM.AddPolygonToBody(result,[15,51,31,39]);JSM.AddPolygonToBody(result,[16,17,21,19]);JSM.AddPolygonToBody(result,[16,40,32,52]);JSM.AddPolygonToBody(result,[17,52,33,41]);JSM.AddPolygonToBody(result,[18,22,23,20]);JSM.AddPolygonToBody(result,[18,54,34,42]);JSM.AddPolygonToBody(result,[19,53,35,43]);JSM.AddPolygonToBody(result,[20,44,36,54]);JSM.AddPolygonToBody(result,[21,45,37,53]);JSM.AddPolygonToBody(result,[22,46,38,55]);JSM.AddPolygonToBody(result,[23,55,39,47]);JSM.AddPolygonToBody(result,[0,2,26,48,24]);JSM.AddPolygonToBody(result,[1,25,49,28,4]);JSM.AddPolygonToBody(result,[3,27,50,30,6]);JSM.AddPolygonToBody(result,[5,7,31,51,29]);JSM.AddPolygonToBody(result,[8,9,33,52,32]);JSM.AddPolygonToBody(result,[10,34,54,36,12]);JSM.AddPolygonToBody(result,[11,35,53,37,13]);JSM.AddPolygonToBody(result,[14,15,39,55,38]);JSM.AddPolygonToBody(result,[16,19,43,56,40]);JSM.AddPolygonToBody(result,[17,41,58,45,21]);JSM.AddPolygonToBody(result,[18,42,57,46,22]);JSM.AddPolygonToBody(result,[20,23,47,59,44]);return result;};JSM.GenerateTruncatedIcosidodecahedron=function(){var result=new JSM.Body();var a=2;var b=(1+Math.sqrt(5))/2;var c=1/b;var d=3+b;var e=2/b;var f=1+2*b;var g=Math.pow(b,2);var h=-1+3*b;var i=-1+2*b;var j=2+b;var k=3;var l=2*b;JSM.AddVertexToBody(result,+c,+c,+d);JSM.AddVertexToBody(result,+c,+c,-d);JSM.AddVertexToBody(result,+c,-c,+d);JSM.AddVertexToBody(result,-c,+c,+d);JSM.AddVertexToBody(result,+c,-c,-d);JSM.AddVertexToBody(result,-c,+c,-d);JSM.AddVertexToBody(result,-c,-c,+d);JSM.AddVertexToBody(result,-c,-c,-d);JSM.AddVertexToBody(result,+c,+d,+c);JSM.AddVertexToBody(result,+c,-d,+c);JSM.AddVertexToBody(result,-c,+d,+c);JSM.AddVertexToBody(result,+c,+d,-c);JSM.AddVertexToBody(result,-c,-d,+c);JSM.AddVertexToBody(result,+c,-d,-c);JSM.AddVertexToBody(result,-c,+d,-c);JSM.AddVertexToBody(result,-c,-d,-c);JSM.AddVertexToBody(result,+d,+c,+c);JSM.AddVertexToBody(result,-d,+c,+c);JSM.AddVertexToBody(result,+d,+c,-c);JSM.AddVertexToBody(result,+d,-c,+c);JSM.AddVertexToBody(result,-d,+c,-c);JSM.AddVertexToBody(result,-d,-c,+c);JSM.AddVertexToBody(result,+d,-c,-c);JSM.AddVertexToBody(result,-d,-c,-c);JSM.AddVertexToBody(result,+e,+b,+f);JSM.AddVertexToBody(result,+e,+b,-f);JSM.AddVertexToBody(result,+e,-b,+f);JSM.AddVertexToBody(result,-e,+b,+f);JSM.AddVertexToBody(result,+e,-b,-f);JSM.AddVertexToBody(result,-e,+b,-f);JSM.AddVertexToBody(result,-e,-b,+f);JSM.AddVertexToBody(result,-e,-b,-f);JSM.AddVertexToBody(result,+b,+f,+e);JSM.AddVertexToBody(result,+b,-f,+e);JSM.AddVertexToBody(result,-b,+f,+e);JSM.AddVertexToBody(result,+b,+f,-e);JSM.AddVertexToBody(result,-b,-f,+e);JSM.AddVertexToBody(result,+b,-f,-e);JSM.AddVertexToBody(result,-b,+f,-e);JSM.AddVertexToBody(result,-b,-f,-e);JSM.AddVertexToBody(result,+f,+e,+b);JSM.AddVertexToBody(result,-f,+e,+b);JSM.AddVertexToBody(result,+f,+e,-b);JSM.AddVertexToBody(result,+f,-e,+b);JSM.AddVertexToBody(result,-f,+e,-b);JSM.AddVertexToBody(result,-f,-e,+b);JSM.AddVertexToBody(result,+f,-e,-b);JSM.AddVertexToBody(result,-f,-e,-b);JSM.AddVertexToBody(result,+c,+g,+h);JSM.AddVertexToBody(result,+c,+g,-h);JSM.AddVertexToBody(result,+c,-g,+h);JSM.AddVertexToBody(result,-c,+g,+h);JSM.AddVertexToBody(result,+c,-g,-h);JSM.AddVertexToBody(result,-c,+g,-h);JSM.AddVertexToBody(result,-c,-g,+h);JSM.AddVertexToBody(result,-c,-g,-h);JSM.AddVertexToBody(result,+g,+h,+c);JSM.AddVertexToBody(result,+g,-h,+c);JSM.AddVertexToBody(result,-g,+h,+c);JSM.AddVertexToBody(result,+g,+h,-c);JSM.AddVertexToBody(result,-g,-h,+c);JSM.AddVertexToBody(result,+g,-h,-c);JSM.AddVertexToBody(result,-g,+h,-c);JSM.AddVertexToBody(result,-g,-h,-c);JSM.AddVertexToBody(result,+h,+c,+g);JSM.AddVertexToBody(result,-h,+c,+g);JSM.AddVertexToBody(result,+h,+c,-g);JSM.AddVertexToBody(result,+h,-c,+g);JSM.AddVertexToBody(result,-h,+c,-g);JSM.AddVertexToBody(result,-h,-c,+g);JSM.AddVertexToBody(result,+h,-c,-g);JSM.AddVertexToBody(result,-h,-c,-g);JSM.AddVertexToBody(result,+i,+a,+j);JSM.AddVertexToBody(result,+i,+a,-j);JSM.AddVertexToBody(result,+i,-a,+j);JSM.AddVertexToBody(result,-i,+a,+j);JSM.AddVertexToBody(result,+i,-a,-j);JSM.AddVertexToBody(result,-i,+a,-j);JSM.AddVertexToBody(result,-i,-a,+j);JSM.AddVertexToBody(result,-i,-a,-j);JSM.AddVertexToBody(result,+a,+j,+i);JSM.AddVertexToBody(result,+a,-j,+i);JSM.AddVertexToBody(result,-a,+j,+i);JSM.AddVertexToBody(result,+a,+j,-i);JSM.AddVertexToBody(result,-a,-j,+i);JSM.AddVertexToBody(result,+a,-j,-i);JSM.AddVertexToBody(result,-a,+j,-i);JSM.AddVertexToBody(result,-a,-j,-i);JSM.AddVertexToBody(result,+j,+i,+a);JSM.AddVertexToBody(result,-j,+i,+a);JSM.AddVertexToBody(result,+j,+i,-a);JSM.AddVertexToBody(result,+j,-i,+a);JSM.AddVertexToBody(result,-j,+i,-a);JSM.AddVertexToBody(result,-j,-i,+a);JSM.AddVertexToBody(result,+j,-i,-a);JSM.AddVertexToBody(result,-j,-i,-a);JSM.AddVertexToBody(result,+b,+k,+l);JSM.AddVertexToBody(result,+b,+k,-l);JSM.AddVertexToBody(result,+b,-k,+l);JSM.AddVertexToBody(result,-b,+k,+l);JSM.AddVertexToBody(result,+b,-k,-l);JSM.AddVertexToBody(result,-b,+k,-l);JSM.AddVertexToBody(result,-b,-k,+l);JSM.AddVertexToBody(result,-b,-k,-l);JSM.AddVertexToBody(result,+k,+l,+b);JSM.AddVertexToBody(result,+k,-l,+b);JSM.AddVertexToBody(result,-k,+l,+b);JSM.AddVertexToBody(result,+k,+l,-b);JSM.AddVertexToBody(result,-k,-l,+b);JSM.AddVertexToBody(result,+k,-l,-b);JSM.AddVertexToBody(result,-k,+l,-b);JSM.AddVertexToBody(result,-k,-l,-b);JSM.AddVertexToBody(result,+l,+b,+k);JSM.AddVertexToBody(result,-l,+b,+k);JSM.AddVertexToBody(result,+l,+b,-k);JSM.AddVertexToBody(result,+l,-b,+k);JSM.AddVertexToBody(result,-l,+b,-k);JSM.AddVertexToBody(result,-l,-b,+k);JSM.AddVertexToBody(result,+l,-b,-k);JSM.AddVertexToBody(result,-l,-b,-k);JSM.AddPolygonToBody(result,[0,3,6,2]);JSM.AddPolygonToBody(result,[1,4,7,5]);JSM.AddPolygonToBody(result,[8,11,14,10]);JSM.AddPolygonToBody(result,[9,12,15,13]);JSM.AddPolygonToBody(result,[16,19,22,18]);JSM.AddPolygonToBody(result,[17,20,23,21]);JSM.AddPolygonToBody(result,[24,72,96,48]);JSM.AddPolygonToBody(result,[25,49,97,73]);JSM.AddPolygonToBody(result,[26,50,98,74]);JSM.AddPolygonToBody(result,[27,51,99,75]);JSM.AddPolygonToBody(result,[28,76,100,52]);JSM.AddPolygonToBody(result,[29,77,101,53]);JSM.AddPolygonToBody(result,[30,78,102,54]);JSM.AddPolygonToBody(result,[31,55,103,79]);JSM.AddPolygonToBody(result,[32,80,104,56]);JSM.AddPolygonToBody(result,[33,57,105,81]);JSM.AddPolygonToBody(result,[34,58,106,82]);JSM.AddPolygonToBody(result,[35,59,107,83]);JSM.AddPolygonToBody(result,[36,84,108,60]);JSM.AddPolygonToBody(result,[37,85,109,61]);JSM.AddPolygonToBody(result,[38,86,110,62]);JSM.AddPolygonToBody(result,[39,63,111,87]);JSM.AddPolygonToBody(result,[40,88,112,64]);JSM.AddPolygonToBody(result,[41,65,113,89]);JSM.AddPolygonToBody(result,[42,66,114,90]);JSM.AddPolygonToBody(result,[43,67,115,91]);JSM.AddPolygonToBody(result,[44,92,116,68]);JSM.AddPolygonToBody(result,[45,93,117,69]);JSM.AddPolygonToBody(result,[46,94,118,70]);JSM.AddPolygonToBody(result,[47,71,119,95]);JSM.AddPolygonToBody(result,[0,24,48,51,27,3]);JSM.AddPolygonToBody(result,[1,5,29,53,49,25]);JSM.AddPolygonToBody(result,[2,6,30,54,50,26]);JSM.AddPolygonToBody(result,[4,28,52,55,31,7]);JSM.AddPolygonToBody(result,[8,32,56,59,35,11]);JSM.AddPolygonToBody(result,[9,13,37,61,57,33]);JSM.AddPolygonToBody(result,[10,14,38,62,58,34]);JSM.AddPolygonToBody(result,[12,36,60,63,39,15]);JSM.AddPolygonToBody(result,[16,40,64,67,43,19]);JSM.AddPolygonToBody(result,[17,21,45,69,65,41]);JSM.AddPolygonToBody(result,[18,22,46,70,66,42]);JSM.AddPolygonToBody(result,[20,44,68,71,47,23]);JSM.AddPolygonToBody(result,[72,112,88,104,80,96]);JSM.AddPolygonToBody(result,[73,97,83,107,90,114]);JSM.AddPolygonToBody(result,[74,98,81,105,91,115]);JSM.AddPolygonToBody(result,[75,99,82,106,89,113]);JSM.AddPolygonToBody(result,[76,118,94,109,85,100]);JSM.AddPolygonToBody(result,[78,117,93,108,84,102]);JSM.AddPolygonToBody(result,[79,103,87,111,95,119]);JSM.AddPolygonToBody(result,[86,101,77,116,92,110]);JSM.AddPolygonToBody(result,[0,2,26,74,115,67,64,112,72,24]);JSM.AddPolygonToBody(result,[1,25,73,114,66,70,118,76,28,4]);JSM.AddPolygonToBody(result,[3,27,75,113,65,69,117,78,30,6]);JSM.AddPolygonToBody(result,[5,7,31,79,119,71,68,116,77,29]);JSM.AddPolygonToBody(result,[8,10,34,82,99,51,48,96,80,32]);JSM.AddPolygonToBody(result,[9,33,81,98,50,54,102,84,36,12]);JSM.AddPolygonToBody(result,[11,35,83,97,49,53,101,86,38,14]);JSM.AddPolygonToBody(result,[13,15,39,87,103,55,52,100,85,37]);JSM.AddPolygonToBody(result,[16,18,42,90,107,59,56,104,88,40]);JSM.AddPolygonToBody(result,[17,41,89,106,58,62,110,92,44,20]);JSM.AddPolygonToBody(result,[19,43,91,105,57,61,109,94,46,22]);JSM.AddPolygonToBody(result,[21,23,47,95,111,63,60,108,93,45]);return result;};JSM.GenerateSnubDodecahedron=function(){var result=new JSM.Body();var a=2;var b=(1+Math.sqrt(5))/2;var c=Math.pow(b/2+(1/2)*Math.sqrt(b-(5/27)),1/3)+Math.pow(b/2-(1/2)*Math.sqrt(b-(5/27)),1/3);var d=c-(1/c);var e=c*b+Math.pow(b,2)+b/c;var f=2*d;var g=2*e;var h=d+(e/b)+b;var i=-(d*b)+e+(1/b);var j=(d/b)+(e*b)-1;var k=-(d/b)+(e*b)+1;var l=-d+(e/b)-b;var m=(d*b)+e-(1/b);var n=-(d/b)+(e*b)-1;var o=d-(e/b)-b;var p=(d*b)+e+(1/b);var q=d+(e/b)-b;var r=(d*b)-e+(1/b);var s=(d/b)+(e*b)+1;JSM.AddVertexToBody(result,+f,+a,-g);JSM.AddVertexToBody(result,+f,-a,+g);JSM.AddVertexToBody(result,-f,+a,+g);JSM.AddVertexToBody(result,-f,-a,-g);JSM.AddVertexToBody(result,+a,-g,+f);JSM.AddVertexToBody(result,-a,+g,+f);JSM.AddVertexToBody(result,+a,+g,-f);JSM.AddVertexToBody(result,-a,-g,-f);JSM.AddVertexToBody(result,-g,+f,+a);JSM.AddVertexToBody(result,+g,+f,-a);JSM.AddVertexToBody(result,+g,-f,+a);JSM.AddVertexToBody(result,-g,-f,-a);JSM.AddVertexToBody(result,+h,+i,-j);JSM.AddVertexToBody(result,+h,-i,+j);JSM.AddVertexToBody(result,-h,+i,+j);JSM.AddVertexToBody(result,-h,-i,-j);JSM.AddVertexToBody(result,+i,-j,+h);JSM.AddVertexToBody(result,-i,+j,+h);JSM.AddVertexToBody(result,+i,+j,-h);JSM.AddVertexToBody(result,-i,-j,-h);JSM.AddVertexToBody(result,-j,+h,+i);JSM.AddVertexToBody(result,+j,+h,-i);JSM.AddVertexToBody(result,+j,-h,+i);JSM.AddVertexToBody(result,-j,-h,-i);JSM.AddVertexToBody(result,+k,+l,-m);JSM.AddVertexToBody(result,+k,-l,+m);JSM.AddVertexToBody(result,-k,+l,+m);JSM.AddVertexToBody(result,-k,-l,-m);JSM.AddVertexToBody(result,+l,-m,+k);JSM.AddVertexToBody(result,-l,+m,+k);JSM.AddVertexToBody(result,+l,+m,-k);JSM.AddVertexToBody(result,-l,-m,-k);JSM.AddVertexToBody(result,-m,+k,+l);JSM.AddVertexToBody(result,+m,+k,-l);JSM.AddVertexToBody(result,+m,-k,+l);JSM.AddVertexToBody(result,-m,-k,-l);JSM.AddVertexToBody(result,+n,+o,-p);JSM.AddVertexToBody(result,+n,-o,+p);JSM.AddVertexToBody(result,-n,+o,+p);JSM.AddVertexToBody(result,-n,-o,-p);JSM.AddVertexToBody(result,+o,-p,+n);JSM.AddVertexToBody(result,-o,+p,+n);JSM.AddVertexToBody(result,+o,+p,-n);JSM.AddVertexToBody(result,-o,-p,-n);JSM.AddVertexToBody(result,-p,+n,+o);JSM.AddVertexToBody(result,+p,+n,-o);JSM.AddVertexToBody(result,+p,-n,+o);JSM.AddVertexToBody(result,-p,-n,-o);JSM.AddVertexToBody(result,+q,+r,-s);JSM.AddVertexToBody(result,+q,-r,+s);JSM.AddVertexToBody(result,-q,+r,+s);JSM.AddVertexToBody(result,-q,-r,-s);JSM.AddVertexToBody(result,+r,-s,+q);JSM.AddVertexToBody(result,-r,+s,+q);JSM.AddVertexToBody(result,+r,+s,-q);JSM.AddVertexToBody(result,-r,-s,-q);JSM.AddVertexToBody(result,-s,+q,+r);JSM.AddVertexToBody(result,+s,+q,-r);JSM.AddVertexToBody(result,+s,-q,+r);JSM.AddVertexToBody(result,-s,-q,-r);JSM.AddPolygonToBody(result,[0,3,51]);JSM.AddPolygonToBody(result,[0,30,12]);JSM.AddPolygonToBody(result,[0,48,3]);JSM.AddPolygonToBody(result,[0,51,30]);JSM.AddPolygonToBody(result,[1,2,50]);JSM.AddPolygonToBody(result,[1,28,13]);JSM.AddPolygonToBody(result,[1,49,2]);JSM.AddPolygonToBody(result,[1,50,28]);JSM.AddPolygonToBody(result,[2,29,14]);JSM.AddPolygonToBody(result,[2,49,29]);JSM.AddPolygonToBody(result,[3,31,15]);JSM.AddPolygonToBody(result,[3,48,31]);JSM.AddPolygonToBody(result,[4,7,55]);JSM.AddPolygonToBody(result,[4,34,16]);JSM.AddPolygonToBody(result,[4,52,7]);JSM.AddPolygonToBody(result,[4,55,34]);JSM.AddPolygonToBody(result,[5,6,54]);JSM.AddPolygonToBody(result,[5,32,17]);JSM.AddPolygonToBody(result,[5,53,6]);JSM.AddPolygonToBody(result,[5,54,32]);JSM.AddPolygonToBody(result,[6,33,18]);JSM.AddPolygonToBody(result,[6,53,33]);JSM.AddPolygonToBody(result,[7,35,19]);JSM.AddPolygonToBody(result,[7,52,35]);JSM.AddPolygonToBody(result,[8,11,59]);JSM.AddPolygonToBody(result,[8,26,20]);JSM.AddPolygonToBody(result,[8,56,11]);JSM.AddPolygonToBody(result,[8,59,26]);JSM.AddPolygonToBody(result,[9,10,58]);JSM.AddPolygonToBody(result,[9,24,21]);JSM.AddPolygonToBody(result,[9,57,10]);JSM.AddPolygonToBody(result,[9,58,24]);JSM.AddPolygonToBody(result,[10,25,22]);JSM.AddPolygonToBody(result,[10,57,25]);JSM.AddPolygonToBody(result,[11,27,23]);JSM.AddPolygonToBody(result,[11,56,27]);JSM.AddPolygonToBody(result,[12,18,21]);JSM.AddPolygonToBody(result,[12,21,24]);JSM.AddPolygonToBody(result,[12,30,18]);JSM.AddPolygonToBody(result,[13,16,22]);JSM.AddPolygonToBody(result,[13,22,25]);JSM.AddPolygonToBody(result,[13,28,16]);JSM.AddPolygonToBody(result,[14,17,20]);JSM.AddPolygonToBody(result,[14,20,26]);JSM.AddPolygonToBody(result,[14,29,17]);JSM.AddPolygonToBody(result,[15,19,23]);JSM.AddPolygonToBody(result,[15,23,27]);JSM.AddPolygonToBody(result,[15,31,19]);JSM.AddPolygonToBody(result,[16,34,22]);JSM.AddPolygonToBody(result,[17,32,20]);JSM.AddPolygonToBody(result,[18,33,21]);JSM.AddPolygonToBody(result,[19,35,23]);JSM.AddPolygonToBody(result,[24,58,36]);JSM.AddPolygonToBody(result,[25,57,37]);JSM.AddPolygonToBody(result,[26,59,38]);JSM.AddPolygonToBody(result,[27,56,39]);JSM.AddPolygonToBody(result,[28,50,40]);JSM.AddPolygonToBody(result,[29,49,41]);JSM.AddPolygonToBody(result,[30,51,42]);JSM.AddPolygonToBody(result,[31,48,43]);JSM.AddPolygonToBody(result,[32,54,44]);JSM.AddPolygonToBody(result,[33,53,45]);JSM.AddPolygonToBody(result,[34,55,46]);JSM.AddPolygonToBody(result,[35,52,47]);JSM.AddPolygonToBody(result,[36,43,48]);JSM.AddPolygonToBody(result,[36,46,43]);JSM.AddPolygonToBody(result,[36,58,46]);JSM.AddPolygonToBody(result,[37,41,49]);JSM.AddPolygonToBody(result,[37,45,41]);JSM.AddPolygonToBody(result,[37,57,45]);JSM.AddPolygonToBody(result,[38,40,50]);JSM.AddPolygonToBody(result,[38,47,40]);JSM.AddPolygonToBody(result,[38,59,47]);JSM.AddPolygonToBody(result,[39,42,51]);JSM.AddPolygonToBody(result,[39,44,42]);JSM.AddPolygonToBody(result,[39,56,44]);JSM.AddPolygonToBody(result,[40,47,52]);JSM.AddPolygonToBody(result,[41,45,53]);JSM.AddPolygonToBody(result,[42,44,54]);JSM.AddPolygonToBody(result,[43,46,55]);JSM.AddPolygonToBody(result,[0,12,24,36,48]);JSM.AddPolygonToBody(result,[1,13,25,37,49]);JSM.AddPolygonToBody(result,[2,14,26,38,50]);JSM.AddPolygonToBody(result,[3,15,27,39,51]);JSM.AddPolygonToBody(result,[4,16,28,40,52]);JSM.AddPolygonToBody(result,[5,17,29,41,53]);JSM.AddPolygonToBody(result,[6,18,30,42,54]);JSM.AddPolygonToBody(result,[7,19,31,43,55]);JSM.AddPolygonToBody(result,[8,20,32,44,56]);JSM.AddPolygonToBody(result,[9,21,33,45,57]);JSM.AddPolygonToBody(result,[10,22,34,46,58]);JSM.AddPolygonToBody(result,[11,23,35,47,59]);return result;};JSM.AddCumulatedPolygonToBody=function(body,vertices,height){var CalculatePolygonCentroidAndNormal=function(vertices,centroidCoord,normalVector){var vertexCoords=[];var i;for(i=0;i<vertices.length;i++){vertexCoords.push(body.GetVertexPosition(vertices[i]));}var centroid=JSM.CalculateCentroid(vertexCoords);var normal=JSM.CalculateNormal(vertexCoords);centroidCoord.Set(centroid.x,centroid.y,centroid.z);normalVector.Set(normal.x,normal.y,normal.z);};var centroidCoord=new JSM.Coord();var normalVector=new JSM.Vector();CalculatePolygonCentroidAndNormal(vertices,centroidCoord,normalVector);centroidCoord=JSM.CoordOffset(centroidCoord,normalVector,height);centroid=body.VertexCount();JSM.AddVertexToBody(body,centroidCoord.x,centroidCoord.y,centroidCoord.z);var count=vertices.length;var i,curr,next,centroid;for(i=0;i<count;i++){curr=vertices[i];next=vertices[i<count-1?i+1:0];JSM.AddPolygonToBody(body,[curr,next,centroid]);}};JSM.GenerateCumulatedDodecahedron=function(pyramidUnitHeight){var result=new JSM.Body();var a=1;var b=0;var c=(1+Math.sqrt(5))/2;var d=1/c;JSM.AddVertexToBody(result,+a,+a,+a);JSM.AddVertexToBody(result,+a,+a,-a);JSM.AddVertexToBody(result,+a,-a,+a);JSM.AddVertexToBody(result,-a,+a,+a);JSM.AddVertexToBody(result,+a,-a,-a);JSM.AddVertexToBody(result,-a,+a,-a);JSM.AddVertexToBody(result,-a,-a,+a);JSM.AddVertexToBody(result,-a,-a,-a);JSM.AddVertexToBody(result,+b,+d,+c);JSM.AddVertexToBody(result,+b,+d,-c);JSM.AddVertexToBody(result,+b,-d,+c);JSM.AddVertexToBody(result,+b,-d,-c);JSM.AddVertexToBody(result,+d,+c,+b);JSM.AddVertexToBody(result,+d,-c,+b);JSM.AddVertexToBody(result,-d,+c,+b);JSM.AddVertexToBody(result,-d,-c,+b);JSM.AddVertexToBody(result,+c,+b,+d);JSM.AddVertexToBody(result,-c,+b,+d);JSM.AddVertexToBody(result,+c,+b,-d);JSM.AddVertexToBody(result,-c,+b,-d);var edgeLength=Math.sqrt(5)-1;var height=edgeLength*pyramidUnitHeight;JSM.AddCumulatedPolygonToBody(result,[0,8,10,2,16],height);JSM.AddCumulatedPolygonToBody(result,[0,16,18,1,12],height);JSM.AddCumulatedPolygonToBody(result,[0,12,14,3,8],height);JSM.AddCumulatedPolygonToBody(result,[1,9,5,14,12],height);JSM.AddCumulatedPolygonToBody(result,[1,18,4,11,9],height);JSM.AddCumulatedPolygonToBody(result,[2,10,6,15,13],height);JSM.AddCumulatedPolygonToBody(result,[2,13,4,18,16],height);JSM.AddCumulatedPolygonToBody(result,[3,14,5,19,17],height);JSM.AddCumulatedPolygonToBody(result,[3,17,6,10,8],height);JSM.AddCumulatedPolygonToBody(result,[4,13,15,7,11],height);JSM.AddCumulatedPolygonToBody(result,[5,9,11,7,19],height);JSM.AddCumulatedPolygonToBody(result,[6,17,19,7,15],height);return result;};JSM.GenerateCumulatedIcosahedron=function(pyramidUnitHeight){var result=new JSM.Body();var a=1;var b=0;var c=(1+Math.sqrt(5))/2;JSM.AddVertexToBody(result,+b,+a,+c);JSM.AddVertexToBody(result,+b,+a,-c);JSM.AddVertexToBody(result,+b,-a,+c);JSM.AddVertexToBody(result,+b,-a,-c);JSM.AddVertexToBody(result,+a,+c,+b);JSM.AddVertexToBody(result,+a,-c,+b);JSM.AddVertexToBody(result,-a,+c,+b);JSM.AddVertexToBody(result,-a,-c,+b);JSM.AddVertexToBody(result,+c,+b,+a);JSM.AddVertexToBody(result,-c,+b,+a);JSM.AddVertexToBody(result,+c,+b,-a);JSM.AddVertexToBody(result,-c,+b,-a);var edgeLength=2;var height=edgeLength*pyramidUnitHeight;JSM.AddCumulatedPolygonToBody(result,[0,2,8],height);JSM.AddCumulatedPolygonToBody(result,[0,4,6],height);JSM.AddCumulatedPolygonToBody(result,[0,6,9],height);JSM.AddCumulatedPolygonToBody(result,[0,8,4],height);JSM.AddCumulatedPolygonToBody(result,[0,9,2],height);JSM.AddCumulatedPolygonToBody(result,[1,3,11],height);JSM.AddCumulatedPolygonToBody(result,[1,4,10],height);JSM.AddCumulatedPolygonToBody(result,[1,6,4],height);JSM.AddCumulatedPolygonToBody(result,[1,10,3],height);JSM.AddCumulatedPolygonToBody(result,[1,11,6],height);JSM.AddCumulatedPolygonToBody(result,[2,5,8],height);JSM.AddCumulatedPolygonToBody(result,[2,7,5],height);JSM.AddCumulatedPolygonToBody(result,[2,9,7],height);JSM.AddCumulatedPolygonToBody(result,[3,5,7],height);JSM.AddCumulatedPolygonToBody(result,[3,7,11],height);JSM.AddCumulatedPolygonToBody(result,[3,10,5],height);JSM.AddCumulatedPolygonToBody(result,[4,8,10],height);JSM.AddCumulatedPolygonToBody(result,[6,11,9],height);JSM.AddCumulatedPolygonToBody(result,[5,10,8],height);JSM.AddCumulatedPolygonToBody(result,[7,9,11],height);return result;};JSM.GenerateSmallStellatedDodecahedron=function(){var pyramidUnitHeight=Math.sqrt((5+2*Math.sqrt(5))/5);return JSM.GenerateCumulatedDodecahedron(pyramidUnitHeight);};JSM.GenerateGreatDodecahedron=function(){var pyramidUnitHeight=-Math.sqrt((7-3*Math.sqrt(5))/6);return JSM.GenerateCumulatedIcosahedron(pyramidUnitHeight);};JSM.GenerateGreatStellatedDodecahedron=function(){var pyramidUnitHeight=Math.sqrt((7+3*Math.sqrt(5))/6);return JSM.GenerateCumulatedIcosahedron(pyramidUnitHeight);};JSM.OrderPolygons=function(body,eye,center,up,fieldOfView,aspectRatio,nearPlane,farPlane,viewPort){var SwapArrayValues=function(array,from,to){var temp=array[from];array[from]=array[to];array[to]=temp;};var GetProjectedPolygon=function(p){var polygon=body.GetPolygon(p);var coords=[];var i,coord,projected;for(i=0;i<polygon.VertexIndexCount();i++){coord=body.GetVertexPosition(polygon.GetVertexIndex(i));projected=JSM.Project(coord,eye,center,up,fieldOfView,aspectRatio,nearPlane,farPlane,viewPort);coords.push(projected);}return coords;};var GetPolygonCenter=function(p){var polygon=body.GetPolygon(p);var result=new JSM.Coord();var i,coord;for(i=0;i<polygon.VertexIndexCount();i++){coord=body.GetVertexPosition(polygon.GetVertexIndex(i));result=JSM.CoordAdd(result,coord);}result=JSM.VectorMultiply(result,1/polygon.VertexIndexCount());return result;};var GetBoundingBox=function(projectedPolygon){var min=new JSM.Coord2D(JSM.Inf,JSM.Inf);var max=new JSM.Coord2D(-JSM.Inf,-JSM.Inf);for(i=0;i<projectedPolygon.length;i++){coord=projectedPolygon[i];min.x=JSM.Minimum(min.x,coord.x);min.y=JSM.Minimum(min.y,coord.y);max.x=JSM.Maximum(max.x,coord.x);max.y=JSM.Maximum(max.y,coord.y);}return[min,max];};var CalculatePolygonValues=function(){var viewDirection=JSM.VectorNormalize(JSM.CoordSub(center,eye));var cameraPlane=JSM.GetPlaneFromCoordAndDirection(eye,viewDirection);var i,j,polygon,coord,distance,minDistance,maxDistance;var polygonCenter,polygonCenterDistance,projectedPolygon,xyBoundingBox;var polygonNormal,polygonViewVector,polygonDirection,polygonPlane;for(i=0;i<body.PolygonCount();i++){minDistance=JSM.Inf;maxDistance=-JSM.Inf;polygon=body.GetPolygon(i);for(j=0;j<polygon.VertexIndexCount();j++){coord=body.GetVertexPosition(polygon.GetVertexIndex(j));distance=JSM.CoordPlaneDistance(coord,cameraPlane);if(JSM.IsLower(distance,minDistance)){minDistance=distance;}if(JSM.IsGreater(distance,maxDistance)){maxDistance=distance;}}minViewDistances.push(minDistance);maxViewDistances.push(maxDistance);polygonCenter=GetPolygonCenter(i);polygonCenterDistance=JSM.CoordPlaneDistance(polygonCenter,cameraPlane);polygonCenters.push(polygonCenter);polygonCenterDistances.push(polygonCenterDistance);projectedPolygon=GetProjectedPolygon(i);xyBoundingBox=GetBoundingBox(projectedPolygon);projectedPolygons.push(projectedPolygon);xyBoundingBoxes.push(xyBoundingBox);polygonNormal=JSM.CalculateBodyPolygonNormal(body,i);polygonViewVector=JSM.VectorNormalize(JSM.CoordSub(polygonCenter,eye));polygonDirection=JSM.VectorDot(polygonNormal,polygonViewVector);if(JSM.IsGreaterOrEqual(polygonDirection,0)){polygonNormal=JSM.VectorMultiply(polygonNormal,-1);}polygonPlane=JSM.GetPlaneFromCoordAndDirection(polygonCenter,polygonNormal);polygonPlanes.push(polygonPlane);}};var PolygonViewOverlap=function(s,p){return JSM.IsLowerOrEqual(minViewDistances[s],maxViewDistances[p]);};var PolygonBoxesOverlap=function(s,p){var sBox=xyBoundingBoxes[s];var pBox=xyBoundingBoxes[p];if(JSM.IsLower(sBox[1].x,pBox[0].x)||JSM.IsGreater(sBox[0].x,pBox[1].x)){return false;}if(JSM.IsLower(sBox[1].y,pBox[0].y)||JSM.IsGreater(sBox[0].y,pBox[1].y)){return false;}return true;};var PolygonIsFrontOfPlane=function(s,p){var sPlane=polygonPlanes[s];var pPlane=polygonPlanes[p];var i,coord;var isSBehindP=true;var sPolygon=body.GetPolygon(s);for(i=0;i<sPolygon.VertexIndexCount();i++){coord=body.GetVertexPosition(sPolygon.GetVertexIndex(i));if(JSM.CoordPlanePosition(coord,pPlane)==="CoordInFrontOfPlane"){isSBehindP=false;break;}}if(isSBehindP){return false;}var isPFrontOfS=true;var pPolygon=body.GetPolygon(p);for(i=0;i<pPolygon.VertexIndexCount();i++){coord=body.GetVertexPosition(pPolygon.GetVertexIndex(i));if(JSM.CoordPlanePosition(coord,sPlane)==="CoordAtBackOfPlane"){isPFrontOfS=false;break;}}if(isPFrontOfS){return false;}return true;};var HasLowerDistance=function(s,p){if(JSM.IsLower(maxViewDistances[s],maxViewDistances[p])){return true;}else{if(JSM.IsEqual(maxViewDistances[s],maxViewDistances[p])){if(JSM.IsLower(polygonCenterDistances[s],polygonCenterDistances[p])){return true;}}}return false;};var OrderPolygonsByMaxViewDistance=function(){var count=ordered.length;var i,j;for(i=0;i<count-1;i++){for(j=0;j<count-i-1;j++){if(HasLowerDistance(ordered[j],ordered[j+1])){SwapArrayValues(ordered,j,j+1);}}}};var NeedToChangeOrder=function(s,p){if(needToChangeOrderCache[s][p]!=null){return needToChangeOrderCache[s][p];}if(PolygonViewOverlap(s,p)){if(PolygonBoxesOverlap(s,p)){if(PolygonIsFrontOfPlane(s,p)){needToChangeOrderCache[s][p]=true;return true;}}}needToChangeOrderCache[s][p]=false;return false;};var ReorderPolygons=function(){var count=ordered.length;var i,j;for(i=0;i<count-1;i++){for(j=0;j<count-i-1;j++){if(NeedToChangeOrder(ordered[j],ordered[j+1])){SwapArrayValues(ordered,j,j+1);}}}};var result=[];var projectedPolygons=[];var xyBoundingBoxes=[];var minViewDistances=[];var maxViewDistances=[];var polygonCenters=[];var polygonCenterDistances=[];var polygonPlanes=[];var ordered=[];var needToChangeOrderCache=[];var count=body.PolygonCount();var i,j;for(i=0;i<count;i++){ordered.push(i);needToChangeOrderCache.push([]);for(j=0;j<count;j++){needToChangeOrderCache[i].push(null);}}CalculatePolygonValues();OrderPolygonsByMaxViewDistance();ReorderPolygons();result=ordered;return result;};JSM.ConversionData=function(textureLoadedCallback,hasConvexPolygons,doubleSided){this.textureLoadedCallback=JSM.ValueOrDefault(textureLoadedCallback,null);this.hasConvexPolygons=JSM.ValueOrDefault(hasConvexPolygons,false);this.doubleSided=JSM.ValueOrDefault(doubleSided,true);};JSM.ConvertBodyToThreeMeshesSpecial=function(body,materials,vertexNormals,textureCoords,conversionData){var AddTriangle=function(geometry,vertex1,vertex2,vertex3,normal1,normal2,normal3,uv1,uv2,uv3){var lastVertexIndex=geometry.vertices.length;geometry.vertices.push(new THREE.Vector3(vertex1.x,vertex1.y,vertex1.z));geometry.vertices.push(new THREE.Vector3(vertex2.x,vertex2.y,vertex2.z));geometry.vertices.push(new THREE.Vector3(vertex3.x,vertex3.y,vertex3.z));var face=new THREE.Face3(lastVertexIndex+0,lastVertexIndex+1,lastVertexIndex+2);geometry.faces.push(face);if(normal1!==undefined&&normal2!==undefined&&normal3!==undefined){var normalArray=[];normalArray.push(new THREE.Vector3(normal1.x,normal1.y,normal1.z));normalArray.push(new THREE.Vector3(normal2.x,normal2.y,normal2.z));normalArray.push(new THREE.Vector3(normal3.x,normal3.y,normal3.z));geometry.faces[geometry.faces.length-1].vertexNormals=normalArray;}if(uv1!==undefined&&uv2!==undefined&&uv3!==undefined){var uvArray=[];uvArray.push(new THREE.UV(uv1.x,-uv1.y));uvArray.push(new THREE.UV(uv2.x,-uv2.y));uvArray.push(new THREE.UV(uv3.x,-uv3.y));geometry.faceVertexUvs[0].push(uvArray);}};var AddPolygon=function(geometry,index,hasTexture){var polygon=body.GetPolygon(index);var count=polygon.VertexIndexCount();if(count<3){return;}var vertex1,vertex2,vertex3;var normal1,normal2,normal3;var uv1,uv2,uv3;if(count===3){vertex1=body.GetVertex(polygon.GetVertexIndex(0)).position;vertex2=body.GetVertex(polygon.GetVertexIndex(1)).position;vertex3=body.GetVertex(polygon.GetVertexIndex(2)).position;normal1=undefined;normal2=undefined;normal3=undefined;if(hasVertexNormals){normal1=vertexNormals[index][0];normal2=vertexNormals[index][1];normal3=vertexNormals[index][2];}uv1=undefined;uv2=undefined;uv3=undefined;if(hasTexture&&hasTextureCoords){uv1=textureCoords[index][0];uv2=textureCoords[index][1];uv3=textureCoords[index][2];}AddTriangle(geometry,vertex1,vertex2,vertex3,normal1,normal2,normal3,uv1,uv2,uv3);}else{var i;var useTriangulation=false;if(!conversionData.hasConvexPolygons){useTriangulation=true;}if(useTriangulation){var polygon3D=new JSM.Polygon();var vertex;for(i=0;i<count;i++){vertex=body.GetVertex(polygon.vertices[i]);polygon3D.AddVertex(vertex.position.x,vertex.position.y,vertex.position.z);}var normal=JSM.CalculateBodyPolygonNormal(body,index);var triangles=JSM.PolygonTriangulate(polygon3D,normal);var triangle;for(i=0;i<triangles.length;i++){triangle=triangles[i];vertex1=body.GetVertex(polygon.GetVertexIndex(triangle[0])).position;vertex2=body.GetVertex(polygon.GetVertexIndex(triangle[1])).position;vertex3=body.GetVertex(polygon.GetVertexIndex(triangle[2])).position;normal1=undefined;normal2=undefined;normal3=undefined;if(hasVertexNormals){normal1=vertexNormals[index][triangle[0]];normal2=vertexNormals[index][triangle[1]];normal3=vertexNormals[index][triangle[2]];}uv1=undefined;uv2=undefined;uv3=undefined;if(hasTexture&&hasTextureCoords){uv1=textureCoords[index][triangle[0]];uv2=textureCoords[index][triangle[1]];uv3=textureCoords[index][triangle[2]];}AddTriangle(geometry,vertex1,vertex2,vertex3,normal1,normal2,normal3,uv1,uv2,uv3);}}else{for(i=0;i<count-2;i++){vertex1=body.GetVertex(polygon.GetVertexIndex(0)).position;vertex2=body.GetVertex(polygon.GetVertexIndex((i+1)%count)).position;vertex3=body.GetVertex(polygon.GetVertexIndex((i+2)%count)).position;normal1=undefined;normal2=undefined;normal3=undefined;if(hasVertexNormals){normal1=vertexNormals[index][0];normal2=vertexNormals[index][(i+1)%count];normal3=vertexNormals[index][(i+2)%count];}uv1=undefined;uv2=undefined;uv3=undefined;if(hasTexture&&hasTextureCoords){uv1=textureCoords[index][0];uv2=textureCoords[index][(i+1)%count];uv3=textureCoords[index][(i+2)%count];}AddTriangle(geometry,vertex1,vertex2,vertex3,normal1,normal2,normal3,uv1,uv2,uv3);}}}};var CreateGeometry=function(polygonIndices,materialIndex){var geometry=new THREE.Geometry();var modelerMaterial=materials.GetMaterial(materialIndex);var hasTexture=(modelerMaterial.texture!==null);var hasOpacity=(modelerMaterial.opacity!==1);var i;for(i=0;i<polygonIndices.length;i++){AddPolygon(geometry,polygonIndices[i],hasTexture);}var material=null;material=new THREE.MeshLambertMaterial({ambient:modelerMaterial.ambient,color:modelerMaterial.diffuse});if(conversionData.doubleSided){material.side=THREE.DoubleSide;}if(hasOpacity){material.opacity=modelerMaterial.opacity;material.transparent=true;}if(hasTexture){var textureName=modelerMaterial.texture;var texture=THREE.ImageUtils.loadTexture(textureName,new THREE.UVMapping(),function(image){if(conversionData.textureLoadedCallback!==null){conversionData.textureLoadedCallback();}});texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.RepeatWrapping;material.map=texture;}geometry.computeCentroids();geometry.computeFaceNormals();var mesh=new THREE.Mesh(geometry,material);meshes.push(mesh);};var i,j;var polygonsByMaterial=[];var polygonsWithNoMaterial=[];var hasVertexNormals=(vertexNormals!==undefined&&vertexNormals!==null);var hasTextureCoords=(textureCoords!==undefined&&textureCoords!==null);if(materials===undefined||materials===null){materials=new JSM.Materials();}for(i=0;i<materials.Count();i++){polygonsByMaterial[i]=[];}var polygon,material;for(i=0;i<body.PolygonCount();i++){polygon=body.GetPolygon(i);if(!polygon.HasMaterialIndex()){polygonsWithNoMaterial.push(i);continue;}material=polygon.GetMaterialIndex();polygonsByMaterial[material].push(i);}var meshes=[];var polygons;for(i=0;i<polygonsByMaterial.length;i++){polygons=polygonsByMaterial[i];if(polygons.length===0){continue;}CreateGeometry(polygons,i);}if(polygonsWithNoMaterial.length!==0){CreateGeometry(polygonsWithNoMaterial,-1);}return meshes;};JSM.ConvertBodyToThreeMeshes=function(body,materials,conversionData){if(conversionData===undefined){conversionData=new JSM.ConversionData();}var vertexNormals=JSM.CalculateBodyVertexNormals(body);var hasTextures=false;if(materials!==undefined&&materials!==null&&projection!==null&&coords!==null){var projection=body.GetTextureProjectionType();var coords=body.GetTextureProjectionCoords();for(i=0;i<materials.Count();i++){if(materials.GetMaterial(i).texture!==null){hasTextures=true;break;}}}var textureCoords;if(hasTextures){textureCoords=JSM.CalculateBodyTextureCoords(body);for(i=0;i<textureCoords.length;i++){polygon=body.GetPolygon(i);if(polygon.HasMaterialIndex()){material=materials.GetMaterial(polygon.GetMaterialIndex());for(j=0;j<textureCoords[i].length;j++){textureCoords[i][j].x/=material.textureWidth;textureCoords[i][j].y/=-material.textureHeight;}}}}return JSM.ConvertBodyToThreeMeshesSpecial(body,materials,vertexNormals,textureCoords,conversionData);};JSM.ConvertModelToThreeMeshes=function(model,materials,conversionData){var meshes=[];var currentMeshes=[];var i,j,body;for(i=0;i<model.BodyCount();i++){body=model.GetBody(i);currentMeshes=JSM.ConvertBodyToThreeMeshes(body,materials,conversionData);for(j=0;j<currentMeshes.length;j++){meshes.push(currentMeshes[j]);}}return meshes;};JSM.ExportBodyContentToStl=function(body,name,hasConvexPolygons){var AddLineToContent=function(line){stlContent+=line+"\n";};var AddTriangleToContent=function(normal,vertex1,vertex2,vertex3){AddLineToContent("\tfacet normal "+normal.x+" "+normal.y+" "+normal.z);AddLineToContent("\t\touter loop");AddLineToContent("\t\t\tvertex "+vertex1.x+" "+vertex1.y+" "+vertex1.z);AddLineToContent("\t\t\tvertex "+vertex2.x+" "+vertex2.y+" "+vertex2.z);AddLineToContent("\t\t\tvertex "+vertex3.x+" "+vertex3.y+" "+vertex3.z);AddLineToContent("\t\tendloop");AddLineToContent("\tendfacet");};var AddPolygon=function(index){var polygon=body.GetPolygon(index);var count=polygon.VertexIndexCount();if(count<3){return;}var vertex1,vertex2,vertex3;var normal1,normal2,normal3;var uv1,uv2,uv3;if(count===3){var normal=JSM.CalculateBodyPolygonNormal(body,index);vertex1=body.GetVertex(polygon.GetVertexIndex(0)).position;vertex2=body.GetVertex(polygon.GetVertexIndex(1)).position;vertex3=body.GetVertex(polygon.GetVertexIndex(2)).position;AddTriangleToContent(normal,vertex1,vertex2,vertex3);}else{var useTriangulation=true;if(hasConvexPolygons!==undefined&&hasConvexPolygons){useTriangulation=false;}var i;var normal=JSM.CalculateBodyPolygonNormal(body,index);if(useTriangulation){var polygon3D=new JSM.Polygon();var vertex;for(i=0;i<count;i++){vertex=body.GetVertex(polygon.vertices[i]);polygon3D.AddVertex(vertex.position.x,vertex.position.y,vertex.position.z);}var triangles=JSM.PolygonTriangulate(polygon3D,normal);var triangle;for(i=0;i<triangles.length;i++){triangle=triangles[i];vertex1=body.GetVertex(polygon.GetVertexIndex(triangle[0])).position;vertex2=body.GetVertex(polygon.GetVertexIndex(triangle[1])).position;vertex3=body.GetVertex(polygon.GetVertexIndex(triangle[2])).position;AddTriangleToContent(normal,vertex1,vertex2,vertex3);}}else{for(i=0;i<count-2;i++){vertex1=body.GetVertex(polygon.GetVertexIndex(0)).position;vertex2=body.GetVertex(polygon.GetVertexIndex((i+1)%count)).position;vertex3=body.GetVertex(polygon.GetVertexIndex((i+2)%count)).position;AddTriangleToContent(normal,vertex1,vertex2,vertex3);}}}};var stlContent="";var i;for(i=0;i<body.PolygonCount();i++){AddPolygon(i);}return stlContent;};JSM.ExportBodyToStl=function(body,name,hasConvexPolygons){var AddLineToContent=function(line){stlContent+=line+"\n";};var stlContent="";AddLineToContent("solid "+name);stlContent+=JSM.ExportBodyContentToStl(body,name,hasConvexPolygons);AddLineToContent("endsolid "+name);return stlContent;};JSM.ExportModelToStl=function(model,name,hasConvexPolygons){var AddLineToContent=function(line){stlContent+=line+"\n";};var stlContent="";AddLineToContent("solid "+name);var i,body;for(i=0;i<model.BodyCount();i++){body=model.GetBody(i);stlContent+=JSM.ExportBodyContentToStl(body,name+(i+1).toString(),hasConvexPolygons);}AddLineToContent("endsolid "+name);return stlContent;};JSM.ExportBodyToObjInternal=function(body,vertexOffset,normalOffset){var AddToContent=function(line){objContent+=line;};var AddLineToContent=function(line){objContent+=line+"\n";};var AddVertex=function(index){var vertCoord=body.GetVertex(index).position;AddLineToContent("v "+vertCoord.x+" "+vertCoord.y+" "+vertCoord.z);};var AddNormal=function(index){var normalVector=JSM.CalculateBodyPolygonNormal(body,index);AddLineToContent("vn "+normalVector.x+" "+normalVector.y+" "+normalVector.z);};var AddPolygon=function(index){var polygon=body.GetPolygon(index);AddToContent("f ");var i;for(i=0;i<polygon.VertexIndexCount();i++){AddToContent((vertexOffset+polygon.GetVertexIndex(i)+1)+"//"+(normalOffset+index+1)+" ");}AddLineToContent("");};var objContent="";var i;for(i=0;i<body.VertexCount();i++){AddVertex(i);}for(i=0;i<body.PolygonCount();i++){AddNormal(i);}for(i=0;i<body.PolygonCount();i++){AddPolygon(i);}return objContent;};JSM.ExportBodyToObj=function(body){return JSM.ExportBodyToObjInternal(body,0,0);};JSM.ExportModelToObj=function(model,name,hasConvexPolygons){var objContent="";var vertexOffset=0;var normalOffset=0;var i,body;for(i=0;i<model.BodyCount();i++){body=model.GetBody(i);objContent+=JSM.ExportBodyToObjInternal(body,vertexOffset,normalOffset);vertexOffset+=body.VertexCount();normalOffset+=body.PolygonCount();}return objContent;};JSM.ExportMaterialsToGDL=function(materials){var HexColorToRGBColorString=function(hexColor){var rgb=JSM.HexColorToRGBColor(hexColor);var result=rgb[0]/255+","+rgb[1]/255+","+rgb[2]/255;return result;};var AddLineToContent=function(line){gdlContent+=line+"\n";};var AddMaterial=function(material,index){var rgbString=HexColorToRGBColorString(material.diffuse);AddLineToContent('define material "material'+index+'" 2, '+rgbString+" ! "+index);};var gdlContent="";var writeMaterials=false;if(materials!==undefined&&materials!==null){writeMaterials=true;}var i;if(writeMaterials){AddMaterial(materials.GetDefaultMaterial(),1);for(i=0;i<materials.Count();i++){AddMaterial(materials.GetMaterial(i),i+2);}}return gdlContent;};JSM.ExportBodyGeometryToGDL=function(body,writeMaterials){var AddToContent=function(line){gdlContent+=line;};var AddLineToContent=function(line){gdlContent+=line+"\n";};var AddVertex=function(index){var vertCoord=body.GetVertex(index).position;AddLineToContent("vert "+vertCoord.x+", "+vertCoord.y+", "+vertCoord.z+" ! "+(index+1));};var AddEdge=function(index){var edge=al.edges[index];AddLineToContent("edge "+(edge.vert1+1)+", "+(edge.vert2+1)+", -1, -1, 0"+" ! "+(index+1));};var AddPolygon=function(index){if(writeMaterials){var materialIndex=body.GetPolygon(index).GetMaterialIndex()+2;AddLineToContent('set material "material'+materialIndex+'"');}var pgon=al.pgons[index];AddToContent("pgon "+pgon.pedges.length+", 0, 0, ");var i,pedge;for(i=0;i<pgon.pedges.length;i++){pedge=pgon.pedges[i];if(!pedge.reverse){AddToContent((pedge.index+1));}else{AddToContent(-(pedge.index+1));}if(i<pgon.pedges.length-1){AddToContent(", ");}}AddToContent(" ! "+(index+1));AddLineToContent("");};var gdlContent="";AddLineToContent("base");var al=JSM.CalculateAdjacencyList(body);for(i=0;i<al.verts.length;i++){AddVertex(i);}for(i=0;i<al.edges.length;i++){AddEdge(i);}for(i=0;i<al.pgons.length;i++){AddPolygon(i);}AddLineToContent("body -1");return gdlContent;};JSM.ExportBodyToGDL=function(body,materials){var gdlContent="";var writeMaterials=false;if(materials!==undefined&&materials!==null){gdlContent+=JSM.ExportMaterialsToGDL(materials);writeMaterials=true;}gdlContent+=JSM.ExportBodyGeometryToGDL(body,writeMaterials);return gdlContent;};JSM.ExportModelToGDL=function(model,materials){var gdlContent="";var writeMaterials=false;if(materials!==undefined&&materials!==null){gdlContent+=JSM.ExportMaterialsToGDL(materials);writeMaterials=true;}var i,body;for(i=0;i<model.BodyCount();i++){body=model.GetBody(i);gdlContent+=JSM.ExportBodyGeometryToGDL(body,writeMaterials);}return gdlContent;};JSM.SVGSettings=function(camera,fieldOfView,nearPlane,farPlane,hiddenLine){this.camera=camera;this.fieldOfView=fieldOfView;this.nearPlane=nearPlane;this.farPlane=farPlane;this.hiddenLine=hiddenLine;this.clear=true;};JSM.ExportBodyToSVG=function(body,materials,settings,svgObject,orderedPolygons,solidPolygons){var HexColorToHTMLColor=function(hexColor){var rgb=JSM.HexColorToRGBColor(hexColor);var result="rgb("+rgb[0]+","+rgb[1]+","+rgb[2]+")";return result;};if(settings.clear){while(svgObject.lastChild){svgObject.removeChild(svgObject.lastChild);}}var svgNameSpace="http://www.w3.org/2000/svg";var width=svgObject.getAttribute("width");var height=svgObject.getAttribute("height");var eye=settings.camera.eye;var center=settings.camera.center;var up=settings.camera.up;var fieldOfView=settings.fieldOfView;var aspectRatio=width/height;var nearPlane=settings.nearPlane;var farPlane=settings.farPlane;var viewPort=[0,0,width,height];var hiddenLine=settings.hiddenLine;var i,j;var polygon,points,coord,projected,x,y,svgPolyon;var orderedPolygons=[];if(hiddenLine){orderedPolygons=JSM.OrderPolygons(body,eye,center,up,fieldOfView,aspectRatio,nearPlane,farPlane,viewPort);}else{for(i=0;i<body.PolygonCount();i++){orderedPolygons.push(i);}}if(materials===undefined||materials===null){materials=new JSM.Materials();}var materialIndex,color;for(i=0;i<orderedPolygons.length;i++){points="";polygon=body.GetPolygon(orderedPolygons[i]);for(j=0;j<polygon.VertexIndexCount();j++){coord=body.GetVertexPosition(polygon.GetVertexIndex(j));projected=new JSM.Coord();JSM.Project(coord,eye,center,up,fieldOfView,aspectRatio,nearPlane,farPlane,viewPort,projected);x=projected.x;y=height-projected.y;points=points+x+", "+y;if(j<polygon.VertexIndexCount()-1){points=points+", ";}}svgPolyon=document.createElementNS(svgNameSpace,"polygon");svgPolyon.setAttributeNS(null,"points",points);if(hiddenLine){materialIndex=polygon.GetMaterialIndex();color=materials.GetMaterial(materialIndex).diffuse;svgPolyon.setAttributeNS(null,"fill",HexColorToHTMLColor(color));svgPolyon.setAttributeNS(null,"fill-opacity","1.0");}else{svgPolyon.setAttributeNS(null,"fill","none");}svgPolyon.setAttributeNS(null,"stroke","black");svgObject.appendChild(svgPolyon);}return true;};JSM.ConvertRawDataToThreeMeshes=function(rawData,textureLoadedCallback){var AddMesh=function(mesh){var AddTriangles=function(currentTriangles){var materialIndex=currentTriangles["material"];var parameters=currentTriangles["parameters"];var materialData=materials[materialIndex];var textureName=materialData["texture"];var textureOffset=materialData["offset"];var textureScale=materialData["scale"];var ambientColor=new THREE.Color();var diffuseColor=new THREE.Color();var specularColor=new THREE.Color();ambientColor.setRGB(materialData["ambient"][0],materialData["ambient"][1],materialData["ambient"][2]);diffuseColor.setRGB(materialData["diffuse"][0],materialData["diffuse"][1],materialData["diffuse"][2]);specularColor.setRGB(materialData["specular"][0],materialData["specular"][1],materialData["specular"][2]);if(textureName!==undefined){ambientColor.setRGB(1,1,1);diffuseColor.setRGB(1,1,1);specularColor.setRGB(1,1,1);if(textureOffset===undefined){textureOffset=[0,0];}if(textureScale===undefined){textureScale=[1,1];}}var material=new THREE.MeshLambertMaterial({ambient:ambientColor.getHex(),color:diffuseColor.getHex(),side:THREE.DoubleSide});if(materialData["opacity"]!==1){material.opacity=materialData["opacity"];material.transparent=true;}if(textureName!==undefined){texture=THREE.ImageUtils.loadTexture(textureName,new THREE.UVMapping(),function(image){if(textureLoadedCallback!==undefined){textureLoadedCallback();}});texture.wrapS=THREE.RepeatWrapping;texture.wrapT=THREE.RepeatWrapping;material.map=texture;}var geometry=new THREE.Geometry();var v1,v2,v3,n1,n2,n3,u1,u2,u3;var lastVertex,lastFace,vertexNormals,textureUVs;for(j=0;j<parameters.length;j+=9){v1=3*parameters[j+0];v2=3*parameters[j+1];v3=3*parameters[j+2];n1=3*parameters[j+3];n2=3*parameters[j+4];n3=3*parameters[j+5];u1=2*parameters[j+6];u2=2*parameters[j+7];u3=2*parameters[j+8];lastVertex=geometry.vertices.length;lastFace=geometry.faces.length;geometry.vertices.push(new THREE.Vector3(vertices[v1+0],vertices[v1+1],vertices[v1+2]));geometry.vertices.push(new THREE.Vector3(vertices[v2+0],vertices[v2+1],vertices[v2+2]));geometry.vertices.push(new THREE.Vector3(vertices[v3+0],vertices[v3+1],vertices[v3+2]));geometry.faces.push(new THREE.Face3(lastVertex+0,lastVertex+1,lastVertex+2));vertexNormals=[];vertexNormals.push(new THREE.Vector3(normals[n1+0],normals[n1+1],normals[n1+2]));vertexNormals.push(new THREE.Vector3(normals[n2+0],normals[n2+1],normals[n2+2]));vertexNormals.push(new THREE.Vector3(normals[n3+0],normals[n3+1],normals[n3+2]));geometry.faces[lastFace].vertexNormals=vertexNormals;if(textureName!==undefined){textureUVs=[];textureUVs.push(new THREE.UV(textureOffset[0]+uvs[u1+0]*textureScale[0],textureOffset[1]+uvs[u1+1]*textureScale[1]));textureUVs.push(new THREE.UV(textureOffset[0]+uvs[u2+0]*textureScale[0],textureOffset[1]+uvs[u2+1]*textureScale[1]));textureUVs.push(new THREE.UV(textureOffset[0]+uvs[u3+0]*textureScale[0],textureOffset[1]+uvs[u3+1]*textureScale[1]));geometry.faceVertexUvs[0].push(textureUVs);}}var mesh=new THREE.Mesh(geometry,material);result.push(mesh);};var vertices=mesh["vertices"];if(vertices===undefined){return result;}var normals=mesh["normals"];if(normals===undefined){return result;}var uvs=mesh["uvs"];if(uvs===undefined){return result;}var triangles=mesh["triangles"];var i;for(i=0;i<triangles.length;i++){AddTriangles(triangles[i]);}};var result=[];var materials=rawData["materials"];if(materials===undefined){return result;}var meshes=rawData["meshes"];if(meshes===undefined){return result;}var i;for(i=0;i<meshes.length;i++){AddMesh(meshes[i]);}return result;};JSM.Camera=function(eye,center,up){this.origo=new JSM.Coord(center[0],center[1],center[2]);this.eye=new JSM.Coord(eye[0],eye[1],eye[2]);this.center=new JSM.Coord(center[0],center[1],center[2]);this.up=new JSM.Coord(up[0],up[1],up[2]);this.mode="FreeRotateAroundCenter";this.zoom=true;};JSM.Camera.prototype={SetMode:function(mode){this.mode=mode;},SetZoomEnabled:function(zoom){this.zoom=zoom;},Zoom:function(zoomIn){if(!this.zoom){return;}var direction=JSM.CoordSub(this.center,this.eye);var distance=JSM.VectorLength(direction);if(zoomIn&&distance<0.1){return 0;}var move=distance*0.1;if(!zoomIn){move=move*-1;}this.eye=JSM.CoordOffset(this.eye,direction,move);},Orbit:function(angleX,angleY){var radAngleX=angleX*JSM.DegRad;var radAngleY=angleY*JSM.DegRad;var viewDirection=JSM.VectorNormalize(JSM.CoordSub(this.center,this.eye));var horizontalDirection=JSM.VectorNormalize(JSM.VectorCross(viewDirection,this.up));var verticalDirection=JSM.VectorNormalize(JSM.VectorCross(horizontalDirection,viewDirection));if(this.mode=="FreeRotateAroundCenterWithFixUp"){var originalAngle=JSM.GetVectorsAngle(viewDirection,this.up);var angleLimit=5*JSM.DegRad;if((originalAngle>Math.PI-angleLimit&&radAngleY<0)||(originalAngle<angleLimit&&radAngleY>0)){return;}}this.eye=JSM.CoordRotate(this.eye,verticalDirection,radAngleX,this.origo);this.center=JSM.CoordRotate(this.center,verticalDirection,radAngleX,this.origo);viewDirection=JSM.VectorNormalize(JSM.CoordSub(this.center,this.eye));horizontalDirection=JSM.VectorNormalize(JSM.VectorCross(viewDirection,verticalDirection));this.eye=JSM.CoordRotate(this.eye,horizontalDirection,radAngleY,this.origo);this.center=JSM.CoordRotate(this.center,horizontalDirection,radAngleY,this.origo);if(this.mode=="FreeRotateAroundCenter"){this.up=verticalDirection;}},Clone:function(){var result=new JSM.Camera();result.origo=this.origo;result.eye=this.eye;result.center=this.center;result.up=this.up;return result;}};JSM.Shape=function(){this.transformation=null;};JSM.Shape.prototype={Initialize:function(){this.transformation=JSM.IdentityTransformation();},Translate:function(translationVector){var trafo=JSM.TranslationTransformation(translationVector);this.transformation.Append(trafo);},TranslateX:function(translation){var trafo=JSM.TranslationTransformation(new JSM.Vector(translation,0,0));this.transformation.Append(trafo);},TranslateY:function(translation){var trafo=JSM.TranslationTransformation(new JSM.Vector(0,translation,0));this.transformation.Append(trafo);},TranslateZ:function(translation){var trafo=JSM.TranslationTransformation(new JSM.Vector(0,0,translation));this.transformation.Append(trafo);},Rotate:function(axis,angle,origo){var trafo=JSM.RotationTransformation(axis,angle,origo);this.transformation.Append(trafo);},RotateX:function(angle,origo){var trafo=JSM.RotationXTransformation(angle,origo);this.transformation.Append(trafo);},RotateY:function(angle,origo){var trafo=JSM.RotationYTransformation(angle,origo);this.transformation.Append(trafo);},RotateZ:function(angle,origo){var trafo=JSM.RotationZTransformation(angle,origo);this.transformation.Append(trafo);},GetOrigo:function(){var matrix=this.transformation.matrix;return new JSM.Coord(matrix[3],matrix[7],matrix[11]);}};JSM.Cube=function(xSize,ySize,zSize){this.Initialize();this.xSize=JSM.ValueOrDefault(xSize,1);this.ySize=JSM.ValueOrDefault(ySize,1);this.zSize=JSM.ValueOrDefault(zSize,1);};JSM.Cube.prototype=new JSM.Shape();JSM.Cube.prototype.GetBody=function(){var body=JSM.GenerateCuboid(this.xSize,this.ySize,this.zSize);body.Transform(this.transformation);return body;};JSM.Sphere=function(radius,segmentation,isCurved){this.Initialize();this.radius=JSM.ValueOrDefault(radius,0.5);this.segmentation=JSM.ValueOrDefault(segmentation,25);this.isCurved=JSM.ValueOrDefault(isCurved,true);};JSM.Sphere.prototype=new JSM.Shape();JSM.Sphere.prototype.GetBody=function(){var body=JSM.GenerateSphere(this.radius,this.segmentation,this.isCurved);body.Transform(this.transformation);return body;};JSM.Cylinder=function(radius,height,segmentation,withTopAndBottom,isCurved){this.Initialize();this.radius=JSM.ValueOrDefault(radius,0.5);this.height=JSM.ValueOrDefault(height,1);this.segmentation=JSM.ValueOrDefault(segmentation,25);this.withTopAndBottom=JSM.ValueOrDefault(withTopAndBottom,true);this.isCurved=JSM.ValueOrDefault(isCurved,true);};JSM.Cylinder.prototype=new JSM.Shape();JSM.Cylinder.prototype.GetBody=function(){var body=JSM.GenerateCylinder(this.radius,this.height,this.segmentation,this.withTopAndBottom,this.isCurved);body.Transform(this.transformation);return body;};JSM.Cone=function(topRadius,bottomRadius,height,segmentation,withTopAndBottom,isCurved){this.Initialize();this.topRadius=JSM.ValueOrDefault(topRadius,0);this.bottomRadius=JSM.ValueOrDefault(bottomRadius,0.5);this.height=JSM.ValueOrDefault(height,1);this.segmentation=JSM.ValueOrDefault(segmentation,25);this.withTopAndBottom=JSM.ValueOrDefault(withTopAndBottom,true);this.isCurved=JSM.ValueOrDefault(isCurved,true);};JSM.Cone.prototype=new JSM.Shape();JSM.Cone.prototype.GetBody=function(){var body=JSM.GenerateCone(this.topRadius,this.bottomRadius,this.height,this.segmentation,this.withTopAndBottom,this.isCurved);body.Transform(this.transformation);return body;};JSM.Torus=function(outerRadius,innerRadius,outerSegmentation,innerSegmentation,isCurved){this.Initialize();this.outerRadius=JSM.ValueOrDefault(outerRadius,0.5);this.innerRadius=JSM.ValueOrDefault(innerRadius,0.25);this.outerSegmentation=JSM.ValueOrDefault(outerSegmentation,25);this.innerSegmentation=JSM.ValueOrDefault(innerSegmentation,25);this.isCurved=JSM.ValueOrDefault(isCurved,true);};JSM.Torus.prototype=new JSM.Shape();JSM.Torus.prototype.GetBody=function(){var body=JSM.GenerateTorus(this.outerRadius,this.innerRadius,this.outerSegmentation,this.innerSegmentation,this.isCurved);body.Transform(this.transformation);return body;};JSM.Mouse=function(){this.down=false;this.button=0;this.shift=false;this.ctrl=false;this.alt=false;this.prevX=0;this.prevY=0;this.currX=0;this.currY=0;this.diffX=0;this.diffY=0;};JSM.Mouse.prototype={Down:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}this.down=true;this.button=event.which;this.shift=event.shiftKey;this.ctrl=event.ctrlKey;this.alt=event.altKey;this.prevX=eventParameters.clientX;this.prevY=eventParameters.clientY;if(div!==undefined){this.prevX=this.prevX-div.offsetLeft;this.prevY=this.prevY-div.offsetTop;}},Move:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}this.shift=event.shiftKey;this.ctrl=event.ctrlKey;this.alt=event.altKey;this.currX=eventParameters.clientX;this.currY=eventParameters.clientY;if(div!==undefined){this.currX=this.currX-div.offsetLeft;this.currY=this.currY-div.offsetTop;}this.diffX=this.currX-this.prevX;this.diffY=this.currY-this.prevY;this.prevX=this.currX;this.prevY=this.currY;},Up:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}this.down=false;this.currX=eventParameters.clientX;this.currY=eventParameters.clientY;if(div!==undefined){this.currX=this.currX-div.offsetLeft;this.currY=this.currY-div.offsetTop;}},Out:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}this.down=false;this.currX=eventParameters.clientX;this.currY=eventParameters.clientY;if(div!==undefined){this.currX=this.currX-div.offsetLeft;this.currY=this.currY-div.offsetTop;}}};JSM.Touch=function(){this.down=false;this.prevX=0;this.prevY=0;this.currX=0;this.currY=0;this.diffX=0;this.diffY=0;};JSM.Touch.prototype={Start:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}if(event.touches.length==0){return;}var touch=event.touches[0];this.down=true;this.prevX=touch.pageX;this.prevY=touch.pageY;if(div!==undefined){this.prevX=touch.prevX-div.offsetLeft;this.prevY=touch.prevX-div.offsetTop;}},Move:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}if(event.touches.length==0){return;}var touch=event.touches[0];this.currX=touch.pageX;this.currY=touch.pageY;if(div!==undefined){this.currX=touch.currX-div.offsetLeft;this.currY=touch.currY-div.offsetTop;}this.diffX=this.currX-this.prevX;this.diffY=this.currY-this.prevY;this.prevX=this.currX;this.prevY=this.currY;},End:function(event,div){var eventParameters=event;if(eventParameters===undefined){eventParameters=window.event;}this.down=false;}};JSM.Viewer=function(){this.canvas=null;this.scene=null;this.camera=null;this.renderer=null;this.ambientLight=null;this.directionalLight=null;this.cameraMove=null;this.mouse=null;this.touch=null;this.settings=null;};JSM.Viewer.prototype={Start:function(canvasName,settings){if(!this.IsWebGLEnabled()){return false;}if(!this.InitSettings(settings)){return false;}if(!this.InitThree(canvasName)){return false;}if(!this.InitCamera()){return false;}if(!this.InitLights()){return false;}if(!this.InitEvents()){return false;}this.Draw();return true;},IsWebGLEnabled:function(){if(!window.WebGLRenderingContext){return false;}if(!document.createElement("canvas").getContext("experimental-webgl")){return false;}return true;},InitSettings:function(settings){this.settings={"cameraEyePosition":[1,1,1],"cameraCenterPosition":[0,0,0],"cameraUpVector":[0,0,1],"cameraMode":"FreeRotateAroundCenter","disableZoom":false,"fieldOfView":45,"nearClippingPlane":0.1,"farClippingPlane":1000,"lightAmbientColor":[0.5,0.5,0.5],"lightDiffuseColor":[1,1,1],"fixLightDirection":null,};if(settings!=undefined){if(settings["cameraEyePosition"]!==undefined){this.settings["cameraEyePosition"]=settings["cameraEyePosition"];}if(settings["cameraCenterPosition"]!==undefined){this.settings["cameraCenterPosition"]=settings["cameraCenterPosition"];}if(settings["cameraUpVector"]!==undefined){this.settings["cameraUpVector"]=settings["cameraUpVector"];}if(settings["cameraMode"]!==undefined){this.settings["cameraMode"]=settings["cameraMode"];}if(settings["disableZoom"]!==undefined){this.settings["disableZoom"]=settings["disableZoom"];}if(settings["fieldOfView"]!==undefined){this.settings["fieldOfView"]=settings["fieldOfView"];}if(settings["nearClippingPlane"]!==undefined){this.settings["nearClippingPlane"]=settings["nearClippingPlane"];}if(settings["farClippingPlane"]!==undefined){this.settings["farClippingPlane"]=settings["farClippingPlane"];}if(settings["lightAmbientColor"]!==undefined){this.settings["lightAmbientColor"]=settings["lightAmbientColor"];}if(settings["lightDiffuseColor"]!==undefined){this.settings["lightDiffuseColor"]=settings["lightDiffuseColor"];}if(settings["fixLightDirection"]!==undefined){this.settings["fixLightDirection"]=settings["fixLightDirection"];}}return true;},InitThree:function(canvasName){this.canvas=document.getElementById(canvasName);if(!this.canvas||!this.canvas.getContext){return false;}this.scene=new THREE.Scene();if(!this.scene){return false;}var parameters={canvas:this.canvas,antialias:true};this.renderer=new THREE.WebGLRenderer(parameters);if(!this.renderer){return false;}this.renderer.setSize(this.canvas.width,this.canvas.height);return true;},InitCamera:function(canvasName){this.mouse=new JSM.Mouse();if(!this.mouse){return false;}this.touch=new JSM.Touch();if(!this.touch){return false;}this.cameraMove=new JSM.Camera(this.settings["cameraEyePosition"],this.settings["cameraCenterPosition"],this.settings["cameraUpVector"]);this.cameraMove.SetMode(this.settings["cameraMode"]);this.cameraMove.SetZoomEnabled(!this.settings["disableZoom"]);if(!this.cameraMove){return false;}this.camera=new THREE.PerspectiveCamera(this.settings["fieldOfView"],this.canvas.width/this.canvas.height,this.settings["nearClippingPlane"],this.settings["farClippingPlane"]);if(!this.camera){return false;}this.scene.add(this.camera);return true;},InitLights:function(){var ambientColor=new THREE.Color();var diffuseColor=new THREE.Color();ambientColor.setRGB(this.settings["lightAmbientColor"][0],this.settings["lightAmbientColor"][1],this.settings["lightAmbientColor"][2]);diffuseColor.setRGB(this.settings["lightDiffuseColor"][0],this.settings["lightDiffuseColor"][1],this.settings["lightDiffuseColor"][2]);this.ambientLight=new THREE.AmbientLight(ambientColor.getHex());if(!this.ambientLight){return false;}this.scene.add(this.ambientLight);this.directionalLight=new THREE.DirectionalLight(diffuseColor.getHex());if(!this.directionalLight){return false;}if(this.settings["fixLightDirection"]!==null){this.directionalLight.position.set(this.settings["fixLightDirection"][0],this.settings["fixLightDirection"][1],this.settings["fixLightDirection"][2]).normalize();}else{this.directionalLight.position.set(0,0,1).normalize();}this.scene.add(this.directionalLight);return true;},InitEvents:function(){var myThis=this;if(document.addEventListener){document.addEventListener("mousemove",function(event){myThis.OnMouseMove(event);});document.addEventListener("mouseup",function(event){myThis.OnMouseUp(event);});}if(this.canvas.addEventListener){this.canvas.addEventListener("mousedown",function(event){myThis.OnMouseDown(event);},false);this.canvas.addEventListener("DOMMouseScroll",function(event){myThis.OnMouseWheel(event);},false);this.canvas.addEventListener("mousewheel",function(event){myThis.OnMouseWheel(event);},false);this.canvas.addEventListener("touchstart",function(event){myThis.OnTouchStart(event);},false);this.canvas.addEventListener("touchmove",function(event){myThis.OnTouchMove(event);},false);this.canvas.addEventListener("touchend",function(event){myThis.OnTouchEnd(event);},false);}return true;},AddMesh:function(mesh){this.scene.add(mesh);this.Draw();},GetMesh:function(index){var currentIndex=0;var i,current;for(i=0;i<this.scene.__objects.length;i++){current=this.scene.__objects[i];if(current instanceof THREE.Mesh){if(currentIndex==index){return current;}currentIndex++;}}alert("not found");return new THREE.Mesh();},RemoveMeshes:function(){var i,current;for(i=0;i<this.scene.__objects.length;i++){current=this.scene.__objects[i];if(current instanceof THREE.Mesh){this.scene.remove(current);i--;}}this.Draw();},RemoveLastMesh:function(){var i,current;for(i=this.scene.__objects.length;i>=0;i--){current=this.scene.__objects[i];if(current instanceof THREE.Mesh){this.scene.remove(current);this.Draw();return;}}},FitInWindow:function(){var center=this.GetCenter();var radius=this.GetBoundingSphereRadius();this.FitInWindowWithCenterAndRadius(center,radius);},FitInWindowWithCenterAndRadius:function(center,radius){var offsetToOrigo=JSM.CoordSub(this.cameraMove.center,center);this.cameraMove.origo=center;this.cameraMove.center=center;this.cameraMove.eye=JSM.CoordSub(this.cameraMove.eye,offsetToOrigo);var centerEyeDirection=JSM.VectorNormalize(JSM.CoordSub(this.cameraMove.eye,this.cameraMove.center));var fieldOfView=this.settings["fieldOfView"]/2;if(this.canvas.width<this.canvas.height){fieldOfView=fieldOfView*this.canvas.width/this.canvas.height;}var distance=radius/Math.sin(fieldOfView*JSM.DegRad);this.cameraMove.eye=JSM.CoordOffset(this.cameraMove.center,centerEyeDirection,distance);this.Draw();},GetCenter:function(){var boundingBox=this.GetBoundingBox();var center=JSM.MidCoord(boundingBox[0],boundingBox[1]);return center;},GetBoundingBox:function(){var min=new JSM.Coord(JSM.Inf,JSM.Inf,JSM.Inf);var max=new JSM.Coord(-JSM.Inf,-JSM.Inf,-JSM.Inf);var current,geometry,coord;this.scene.traverse(function(current){if(current instanceof THREE.Mesh){geometry=current.geometry;for(j=0;j<geometry.vertices.length;j++){coord=geometry.vertices[j].clone();coord.add(current.position);min.x=JSM.Minimum(min.x,coord.x);min.y=JSM.Minimum(min.y,coord.y);min.z=JSM.Minimum(min.z,coord.z);max.x=JSM.Maximum(max.x,coord.x);max.y=JSM.Maximum(max.y,coord.y);max.z=JSM.Maximum(max.z,coord.z);}}});return[min,max];},GetBoundingSphereRadius:function(){var center=this.GetCenter();var radius=0;var current,geometry,coord,distance;this.scene.traverse(function(current){if(current instanceof THREE.Mesh){geometry=current.geometry;for(j=0;j<geometry.vertices.length;j++){coord=geometry.vertices[j].clone();coord.add(current.position);distance=JSM.CoordDistance(center,new JSM.Coord(coord.x,coord.y,coord.z));if(JSM.IsGreater(distance,radius)){radius=distance;}}}});return radius;},GetObjectsUnderMouse:function(){var projector=new THREE.Projector();var mouseX=(this.mouse.currX/this.canvas.width)*2-1;var mouseY=-(this.mouse.currY/this.canvas.height)*2+1;var cameraPosition=this.camera.position;var vector=new THREE.Vector3(mouseX,mouseY,0.5);projector.unprojectVector(vector,this.camera);var ray=new THREE.Ray(cameraPosition,vector.subSelf(cameraPosition).normalize());return ray.intersectObjects(this.scene.children);},GetFaceUnderMouse:function(){var intersects=this.GetObjectsUnderMouse();var face=null;if(intersects.length>0){face=intersects[0].face;}return face;},GetFaceIndexUnderMouse:function(){var intersects=this.GetObjectsUnderMouse();var faceIndex=-1;if(intersects.length>0){faceIndex=intersects[0].faceIndex;}return faceIndex;},GetPointUnderMouse:function(){var intersects=this.GetObjectsUnderMouse();var point=null;if(intersects.length>0){point=intersects[0].point;}return point;},Draw:function(){this.camera.position=this.cameraMove.eye;this.camera.up=this.cameraMove.up;this.camera.lookAt(this.cameraMove.center);if(this.settings["fixLightDirection"]===null){this.directionalLight.position=new THREE.Vector3().sub(this.cameraMove.eye,this.cameraMove.center);}this.renderer.render(this.scene,this.camera);return true;},OnMouseDown:function(event){this.mouse.Down(event,this.canvas);},OnMouseMove:function(event){this.mouse.Move(event,this.canvas);if(!this.mouse.down){return;}var ratio=-0.5;this.cameraMove.Orbit(this.mouse.diffX*ratio,this.mouse.diffY*ratio);this.Draw();},OnMouseUp:function(event){this.mouse.Up(event,this.canvas);},OnMouseOut:function(event){this.mouse.Out(event,this.canvas);},OnMouseWheel:function(event){var eventParameters=event;if(eventParameters===null){eventParameters=window.event;}var delta=0;if(eventParameters.detail){delta=-eventParameters.detail;}else{if(eventParameters.wheelDelta){delta=eventParameters.wheelDelta/40;}}var zoomIn=delta>0;this.cameraMove.Zoom(zoomIn);this.Draw();},OnTouchStart:function(event){this.touch.Start(event,this.canvas);},OnTouchMove:function(event){this.touch.Move(event,this.canvas);if(!this.touch.down){return;}var ratio=-0.5;this.cameraMove.Orbit(this.touch.diffX*ratio,this.touch.diffY*ratio);this.Draw();},OnTouchEnd:function(event){this.touch.End(event,this.canvas);}};JSM.SVGViewer=function(){this.canvas=null;this.cameraMove=null;this.settings=null;this.bodies=null;this.hiddenLine=null;this.mouse=null;this.touch=null;};JSM.SVGViewer.prototype={Start:function(canvasName,settings,hiddenLine){if(!this.InitCanvas(canvasName)){return false;}if(!this.InitSettings(settings,hiddenLine)){return false;}if(!this.InitCamera()){return false;}if(!this.InitEvents()){return false;}return true;},InitCanvas:function(canvasName){this.bodies=[];this.canvas=document.getElementById(canvasName);if(!this.canvas){return false;}return true;},InitSettings:function(settings,hiddenLine){this.settings={"cameraEyePosition":[1,1,1],"cameraCenterPosition":[0,0,0],"cameraUpVector":[0,0,1],"fieldOfView":45,"nearClippingPlane":0.1,"farClippingPlane":1000};this.hiddenLine=false;if(settings!=undefined){if(settings["cameraEyePosition"]!==undefined){this.settings["cameraEyePosition"]=settings["cameraEyePosition"];}if(settings["cameraCenterPosition"]!==undefined){this.settings["cameraCenterPosition"]=settings["cameraCenterPosition"];}if(settings["cameraUpVector"]!==undefined){this.settings["cameraUpVector"]=settings["cameraUpVector"];}if(settings["fieldOfView"]!==undefined){this.settings["fieldOfView"]=settings["fieldOfView"];}if(settings["nearClippingPlane"]!==undefined){this.settings["nearClippingPlane"]=settings["nearClippingPlane"];}if(settings["farClippingPlane"]!==undefined){this.settings["farClippingPlane"]=settings["farClippingPlane"];}if(hiddenLine!==undefined){this.hiddenLine=hiddenLine;}}return true;},InitCamera:function(canvasName){this.cameraMove=new JSM.Camera(this.settings["cameraEyePosition"],this.settings["cameraCenterPosition"],this.settings["cameraUpVector"]);if(!this.cameraMove){return false;}return true;},InitEvents:function(){this.mouse=new JSM.Mouse();if(!this.mouse){return false;}this.touch=new JSM.Touch();if(!this.touch){return false;}var myThis=this;if(document.addEventListener){document.addEventListener("mousemove",function(event){myThis.OnMouseMove(event);});document.addEventListener("mouseup",function(event){myThis.OnMouseUp(event);});}if(this.canvas.addEventListener){this.canvas.addEventListener("mousedown",function(event){myThis.OnMouseDown(event);},false);this.canvas.addEventListener("DOMMouseScroll",function(event){myThis.OnMouseWheel(event);},false);this.canvas.addEventListener("mousewheel",function(event){myThis.OnMouseWheel(event);},false);this.canvas.addEventListener("touchstart",function(event){myThis.OnTouchStart(event);},false);this.canvas.addEventListener("touchmove",function(event){myThis.OnTouchMove(event);},false);this.canvas.addEventListener("touchend",function(event){myThis.OnTouchEnd(event);},false);}return true;},AddBody:function(body,materials){this.bodies.push([body,materials]);},RemoveBodies:function(){this.bodies=[];},Resize:function(){this.Draw();},Draw:function(){var i,bodies;var svgSettings=new JSM.SVGSettings(this.cameraMove,this.settings["fieldOfView"],this.settings["nearClippingPlane"],this.settings["farClippingPlane"],this.hiddenLine);svgSettings.clear=false;while(this.canvas.lastChild){this.canvas.removeChild(this.canvas.lastChild);}for(i=0;i<this.bodies.length;i++){body=this.bodies[i];JSM.ExportBodyToSVG(body[0],body[1],svgSettings,this.canvas);}return true;},OnMouseDown:function(event){this.mouse.Down(event);},OnMouseMove:function(event){this.mouse.Move(event);if(!this.mouse.down){return;}var ratio=-0.5;this.cameraMove.Orbit(this.mouse.diffX*ratio,this.mouse.diffY*ratio);this.Draw();},OnMouseUp:function(event){this.mouse.Up(event);},OnMouseOut:function(event){this.mouse.Out(event);},OnMouseWheel:function(event){var eventParameters=event;if(eventParameters===null){eventParameters=window.event;}var delta=0;if(eventParameters.detail){delta=-eventParameters.detail;}else{if(eventParameters.wheelDelta){delta=eventParameters.wheelDelta/40;}}var zoomIn=delta>0;this.cameraMove.Zoom(zoomIn);this.Draw();},OnTouchStart:function(event){this.touch.Start(event);},OnTouchMove:function(event){this.touch.Move(event);if(!this.touch.down){return;}var ratio=-0.5;this.cameraMove.Orbit(this.touch.diffX*ratio,this.touch.diffY*ratio);this.Draw();},OnTouchEnd:function(event){this.touch.End(event,this.canvas);}};